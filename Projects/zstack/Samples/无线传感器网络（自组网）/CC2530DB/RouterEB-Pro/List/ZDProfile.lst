###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             17/Feb/2013  12:17:04 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\ZD #
#                          Profile.c                                          #
#    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530À #
#                          ı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sam #
#                          ples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "C:\Documents and     #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\Z #
#                          DProfile.c" -D ZIGBEEPRO -D ZTOOL_P1 -D            #
#                          NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D         #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterE #
#                          B-Pro\List\" -lA "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\" #
#                           --diag_suppress Pe001,Pa010 -o "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\Obj\"  #
#                          -e --require_prototypes --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I "C:\Documents  #
#                          and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ #
#                          ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp    #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\SOURCE\" -I      #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\. #
#                          .\ZMAIN\TI2530DB\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "C:\Documents and                   #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I "C:\Documents and         #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "C:\Documents and           #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\List\ZDProfile.lst                            #
#    Object file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\Obj\ZDProfile.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-01-17 08:58:03 -0800 (Sun, 17 Jan 2010) $
      4            Revision:       $Revision: 21533 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    154          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000....     DW 0, ??zdpProcessAddrReq?relay, 19, ??ZDO_ProcessDeviceAnnce?relay, 1
   \            1300....
   \            0100    
   \   00000A   ....0200     DW ??zdpProcessAddrReq?relay, 2, ??ZDO_ProcessNodeDescReq?relay, 3
   \            ....0300
   \   000012   ....0400     DW ??ZDO_ProcessPowerDescReq?relay, 4, ??ZDO_ProcessSimpleDescReq?relay
   \            ....    
   \   000018   0500....     DW 5, ??ZDO_ProcessActiveEPReq?relay, 6
   \            0600    
   \   00001E   ....1100     DW ??ZDO_ProcessMatchDescReq?relay, 17, ??ZDO_ProcessUserDescReq?relay
   \            ....    
   \   000024   1400....     DW 20, ??ZDO_ProcessUserDescSet?relay, 21
   \            1500    
   \   00002A   ....FFFF     DW ??ZDO_ProcessServerDiscReq?relay, 65535, 0H
   \            0000    
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 6,R1
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine112_0 & 0xFFFF
    227            afAddrType_t afAddr;
    228          
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \                     ??CrossCallReturnLabel_181:
   \   00001C                ; Setup parameters for call to function osal_memset
   \   00001C   7C0C         MOV     R4,#0xc
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7900         MOV     R1,#0x0
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??osal_memset?relay
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002F   7409         MOV     A,#0x9
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7408         MOV     A,#0x8
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000054   F0           MOVX    @DPTR,A
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \   000055   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24FF         ADD     A,#-0x1
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   34FF         ADDC    A,#-0x1
   \   000061   F5..         MOV     ?V0 + 5,A
   \   000063   85..82       MOV     DPL,?V0 + 2
   \   000066   85..83       MOV     DPH,?V0 + 3
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   85..82       MOV     DPL,?V0 + 4
   \   00006D   85..83       MOV     DPH,?V0 + 5
   \   000070   F0           MOVX    @DPTR,A
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000071                ; Setup parameters for call to function AF_DataRequest
   \   000071   75..1E       MOV     ?V0 + 7,#0x1e
   \   000074   78..         MOV     R0,#?V0 + 7
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   78..         MOV     R0,#?V0 + 2
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   78..         MOV     R0,#?V0 + 4
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   85....       MOV     ?V0 + 2,?V0 + 6
   \   000086   7401         MOV     A,#0x1
   \   000088   25..         ADD     A,?V0 + 2
   \   00008A   F5..         MOV     ?V0 + 2,A
   \   00008C   E4           CLR     A
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F5..         MOV     ?V0 + 3,A
   \   000091   78..         MOV     R0,#?V0 + 2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   78..         MOV     R0,#?V0 + 0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   7C..         MOV     R4,#(ZDApp_epDesc & 0xff)
   \   0000A2   7D..         MOV     R5,#((ZDApp_epDesc >> 8) & 0xff)
   \   0000A4   7409         MOV     A,#0x9
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??AF_DataRequest?relay
   \   0000B0   7409         MOV     A,#0x9
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   740C         MOV     A,#0xc
   \   0000B7                REQUIRE ?Subroutine0
   \   0000B7                ; // Fall through to label ?Subroutine0
    237          
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 1,A
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   00001F   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    258            byte cnt = len;
   \                     ??CrossCallReturnLabel_272:
   \   000022   EE           MOV     A,R6
   \   000023   FF           MOV     R7,A
   \   000024   801F         SJMP    ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000026   85..82       MOV     DPL,?V0 + 4
   \   000029   85..83       MOV     DPH,?V0 + 5
   \   00002C   12....       LCALL   ?Subroutine39 & 0xFFFF
    263            }
   \                     ??CrossCallReturnLabel_40:
   \   00002F   85..82       MOV     DPL,?V0 + 4
   \   000032   85..83       MOV     DPH,?V0 + 5
   \   000035   A3           INC     DPTR
   \   000036   8582..       MOV     ?V0 + 4,DPL
   \   000039   8583..       MOV     ?V0 + 5,DPH
   \   00003C   8882         MOV     DPL,R0
   \   00003E   8983         MOV     DPH,R1
   \   000040   A3           INC     DPTR
   \   000041   A882         MOV     R0,DPL
   \   000043   A983         MOV     R1,DPH
   \                     ??ZDP_SendData_0:
   \   000045   8F..         MOV     ?V0 + 0,R7
   \   000047   1F           DEC     R7
   \   000048   E5..         MOV     A,?V0 + 0
   \   00004A   70DA         JNZ     ??ZDP_SendData_1
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len,
    266                         (AF_DEFAULT_RADIUS | ((SecurityEnable) ? AF_EN_SECURITY : 0)) );
   \   00004C   E5..         MOV     A,?V0 + 1
   \   00004E   6004         JZ      ??ZDP_SendData_2
   \   000050   7840         MOV     R0,#0x40
   \   000052   8002         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000054   7800         MOV     R0,#0x0
   \                     ??ZDP_SendData_3:
   \   000056   E8           MOV     A,R0
   \   000057   441E         ORL     A,#0x1e
   \   000059   90....       MOV     DPTR,#ZDP_TxOptions
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D                ; Setup parameters for call to function fillAndSend
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   E4           CLR     A
   \   00006B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F                REQUIRE ?Subroutine1
   \   00006F                ; // Fall through to label ?Subroutine1
    267          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   12....       LCALL   ??fillAndSend?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET
    268          
    269          /*********************************************************************
    270           * @fn          ZDP_NWKAddrOfInterestReq
    271           *
    272           * @brief       This builds and send a request message that has
    273           *              NWKAddrOfInterest as its only parameter.
    274           *
    275           * @param       dstAddr - destination address
    276           * @param       nwkAddr - 16 bit address
    277           * @param       SecurityEnable - Security Options
    278           *
    279           * @return      afStatus_t
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    282                                               byte cmd, byte SecurityEnable )
    283          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    284            (void)SecurityEnable;  // Intentionally unreferenced parameter
    285          
    286            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine18 & 0xFFFF
    287            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    288          
    289            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \                     ??CrossCallReturnLabel_8:
   \   00000A                ; Setup parameters for call to function fillAndSend
   \   00000A   8E..         MOV     ?V0 + 0,R6
   \   00000C   02....       LJMP    ?Subroutine2 & 0xFFFF
    290          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine92_0
   \   00000A                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#(ZDP_TransID & 0xff)
   \   000006   7B..         MOV     R3,#((ZDP_TransID >> 8) & 0xff)
   \   000008                REQUIRE ??Subroutine93_0
   \   000008                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003                REQUIRE ??Subroutine94_0
   \   000003                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000006   EC           MOV     A,R4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    291          
    292          /*********************************************************************
    293           * Address Requests
    294           */
    295          
    296          /*********************************************************************
    297           * @fn          ZDP_NwkAddrReq
    298           *
    299           * @brief       This builds and send a NWK_addr_req message.  This
    300           *              function sends a broadcast message looking for a 16
    301           *              bit address with a 64 bit address as bait.
    302           *
    303           * @param       IEEEAddress - looking for this device
    304           * @param       SecurityEnable - Security Options
    305           *
    306           * @return      afStatus_t
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    309                                     byte StartIndex, byte SecurityEnable )
    310          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 2,R1
   \   000010   8C..         MOV     ?V0 + 3,R4
    311            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ?Subroutine11 & 0xFFFF
    312            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    313            zAddrType_t dstAddr;
    314          
    315            (void)SecurityEnable;  // Intentionally unreferenced parameter
    316          
    317            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_189:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#(saveExtAddr & 0xff)
   \   00001B   7B..         MOV     R3,#((saveExtAddr >> 8) & 0xff)
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay
   \   000020   E9           MOV     A,R1
   \   000021   7012         JNZ     ??ZDP_NwkAddrReq_0
    318            {
    319              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   740F         MOV     A,#0xf
   \   00002A   12....       LCALL   ?Subroutine56 & 0xFFFF
    320              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    321            }
   \                     ??CrossCallReturnLabel_75:
   \   00002D   74FD         MOV     A,#-0x3
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74FF         MOV     A,#-0x1
   \   000033   800E         SJMP    ??CrossCallReturnLabel_23
    322            else
    323            {
    324              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000035   7408         MOV     A,#0x8
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7402         MOV     A,#0x2
   \   00003C   F0           MOVX    @DPTR,A
    325              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00003D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000040   12....       LCALL   ?Subroutine27 & 0xFFFF
    326            }
   \                     ??CrossCallReturnLabel_23:
   \   000043   F0           MOVX    @DPTR,A
    327          
    328            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000044                ; Setup parameters for call to function sAddrExtCpy
   \   000044   EE           MOV     A,R6
   \   000045   FC           MOV     R4,A
   \   000046   EF           MOV     A,R7
   \   000047   FD           MOV     R5,A
   \   000048   AA..         MOV     R2,?V0 + 0
   \   00004A   AB..         MOV     R3,?V0 + 1
   \   00004C   12....       LCALL   ?Subroutine75 & 0xFFFF
    329          
    330            *pBuf++ = ReqType;
   \                     ??CrossCallReturnLabel_102:
   \   00004F   E5..         MOV     A,?V0 + 2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
    331            *pBuf++ = StartIndex;
   \   000053   E5..         MOV     A,?V0 + 3
   \   000055   F0           MOVX    @DPTR,A
    332          
    333            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   75..00       MOV     ?V0 + 0,#0x0
   \   000059   75..00       MOV     ?V0 + 1,#0x0
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   790A         MOV     R1,#0xa
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   02....       LJMP    ?Subroutine1 & 0xFFFF
    334          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine118_0
   \   000004                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   7A..         MOV     R2,#(ZDP_TransID & 0xff)
   \   000002   7B..         MOV     R3,#((ZDP_TransID >> 8) & 0xff)
   \   000004                REQUIRE ??Subroutine119_0
   \   000004                ; // Fall through to label ??Subroutine119_0
    335          
    336          /*********************************************************************
    337           * @fn          ZDP_IEEEAddrReq
    338           *
    339           * @brief       This builds and send a IEEE_addr_req message.  This
    340           *              function sends a unicast message looking for a 64
    341           *              bit IEEE address with a 16 bit address as bait.
    342           *
    343           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    344           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    345           * @param       SecurityEnable - Security Options
    346           *
    347           * @return      afStatus_t
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    350                                      byte StartIndex, byte SecurityEnable )
    351          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    352            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    353            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    354            zAddrType_t dstAddr;
    355          
    356            (void)SecurityEnable;  // Intentionally unreferenced parameter
    357          
    358            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_273:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?Subroutine56 & 0xFFFF
    359            dstAddr.addr.shortAddr = shortAddr;
   \                     ??CrossCallReturnLabel_76:
   \   00001B   EA           MOV     A,R2
   \   00001C   12....       LCALL   ??Subroutine120_0 & 0xFFFF
    360          
    361            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_241:
   \   00001F   12....       LCALL   ?Subroutine64 & 0xFFFF
    362            *pBuf++ = HI_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_239:
   \   000022   A3           INC     DPTR
    363          
    364            *pBuf++ = ReqType;
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    365            *pBuf++ = StartIndex;
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
    366          
    367            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..01       MOV     ?V0 + 0,#0x1
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7904         MOV     R1,#0x4
   \   000035                REQUIRE ?Subroutine8
   \   000035                ; // Fall through to label ?Subroutine8
    368          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP0_8
   \   000005   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000008   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000B                REQUIRE ??Subroutine91_0
   \   00000B                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   80..         SJMP    ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   EA           MOV     A,R2
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine120_0
   \   000005                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    369          
    370          /*********************************************************************
    371           * @fn          ZDP_MatchDescReq
    372           *
    373           * @brief       This builds and send a Match_Desc_req message.  This
    374           *              function sends a broadcast or unicast message
    375           *              requesting the list of endpoint/interfaces that
    376           *              match profile ID and cluster IDs.
    377           *
    378           * @param       dstAddr - destination address
    379           * @param       nwkAddr - network address of interest
    380           * @param       ProfileID - Profile ID
    381           * @param       NumInClusters - number of input clusters
    382           * @param       InClusterList - input cluster ID list
    383           * @param       NumOutClusters - number of output clusters
    384           * @param       OutClusterList - output cluster ID list
    385           * @param       SecurityEnable - Security Options
    386           *
    387           * @return      afStatus_t
    388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    389          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    390                                          uint16 ProfileID,
    391                                          byte NumInClusters, cId_t *InClusterList,
    392                                          byte NumOutClusters, cId_t *OutClusterList,
    393                                          byte SecurityEnable )
    394          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   7412         MOV     A,#0x12
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000017   88..         MOV     ?V0 + 2,R0
   \   000019   89..         MOV     ?V0 + 3,R1
   \   00001B   7416         MOV     A,#0x16
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FF           MOV     R7,A
   \   000022   7417         MOV     A,#0x17
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00002A   88..         MOV     ?V0 + 6,R0
   \   00002C   89..         MOV     ?V0 + 7,R1
    395            uint8 *pBuf = ZDP_TmpBuf;
   \   00002E   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    396            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    398          
    399            (void)SecurityEnable;  // Intentionally unreferenced parameter
    400          
    401            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \                     ??CrossCallReturnLabel_274:
   \   000031   EF           MOV     A,R7
   \   000032   2E           ADD     A,R6
   \   000033   C3           CLR     C
   \   000034   33           RLC     A
   \   000035   2406         ADD     A,#0x6
   \   000037   F5..         MOV     ?V0 + 4,A
    402          
    403            if ( len >= ZDP_BUF_SZ-1 )
   \   000039   C3           CLR     C
   \   00003A   944F         SUBB    A,#0x4f
   \   00003C   4005         JC      ??ZDP_MatchDescReq_0
    404            {
    405              return afStatus_MEM_FAIL;
   \   00003E   7910         MOV     R1,#0x10
   \   000040   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    406            }
    407          
    408            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    409            // this command to 0xFFFF.  So, here we will filter this and replace 
    410            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    411            // network address of interest.
    412            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    413                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0 + 5,A
   \   000052   740F         MOV     A,#0xf
   \   000054   65..         XRL     A,?V0 + 5
   \   000056   6006         JZ      ??ZDP_MatchDescReq_2
   \   000058   7402         MOV     A,#0x2
   \   00005A   65..         XRL     A,?V0 + 5
   \   00005C   701A         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   E0           MOVX    A,@DPTR
   \   000063   64FF         XRL     A,#0xff
   \   000065   7004         JNZ     ??ZDP_MatchDescReq_4
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   64FF         XRL     A,#0xff
   \                     ??ZDP_MatchDescReq_4:
   \   00006B   700B         JNZ     ??ZDP_MatchDescReq_3
    414            {
    415              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   74FD         MOV     A,#-0x3
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   74FF         MOV     A,#-0x1
   \   000077   F0           MOVX    @DPTR,A
    416            }
    417            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000078   74FF         MOV     A,#-0x1
   \   00007A   6C           XRL     A,R4
   \   00007B   7003         JNZ     ??ZDP_MatchDescReq_5
   \   00007D   74FF         MOV     A,#-0x1
   \   00007F   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000080   7004         JNZ     ??ZDP_MatchDescReq_6
    418            {
    419              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000082   7CFD         MOV     R4,#-0x3
   \   000084   7DFF         MOV     R5,#-0x1
    420            }
    421            
    422            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000086   EC           MOV     A,R4
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
    423            *pBuf++ = HI_UINT16( nwkAddr );
   \   00008D   ED           MOV     A,R5
   \   00008E   12....       LCALL   ?Subroutine59 & 0xFFFF
    424          
    425            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    426            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_80:
   \   000091   E5..         MOV     A,?V0 + 1
   \   000093   F0           MOVX    @DPTR,A
   \   000094   A3           INC     DPTR
    427          
    428            *pBuf++ = NumInClusters; // Input cluster list
   \   000095   EE           MOV     A,R6
   \   000096   12....       LCALL   ??Subroutine113_0 & 0xFFFF
    429            if ( NumInClusters )
   \                     ??CrossCallReturnLabel_191:
   \   000099   6017         JZ      ??ZDP_MatchDescReq_7
    430            {
    431              for (i=0; i<NumInClusters; ++i)  {
   \   00009B   75..00       MOV     ?V0 + 0,#0x0
    432                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_8:
   \   00009E   E5..         MOV     A,?V0 + 0
   \   0000A0   C3           CLR     C
   \   0000A1   33           RLC     A
   \   0000A2   FC           MOV     R4,A
   \   0000A3   E4           CLR     A
   \   0000A4   33           RLC     A
   \   0000A5   FD           MOV     R5,A
   \   0000A6   E5..         MOV     A,?V0 + 2
   \   0000A8   2C           ADD     A,R4
   \   0000A9   FC           MOV     R4,A
   \   0000AA   E5..         MOV     A,?V0 + 3
   \   0000AC   12....       LCALL   ?Subroutine13 & 0xFFFF
    433                *pBuf++ = HI_UINT16( InClusterList[i] );
    434              }
    435            }
   \                     ??CrossCallReturnLabel_0:
   \   0000AF   9E           SUBB    A,R6
   \   0000B0   40EC         JC      ??ZDP_MatchDescReq_8
    436          
    437            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   0000B2   EF           MOV     A,R7
   \   0000B3   12....       LCALL   ?Subroutine51 & 0xFFFF
    438            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_194:
   \   0000B6   6017         JZ      ??ZDP_MatchDescReq_9
    439            {
    440              for (i=0; i<NumOutClusters; ++i)  {
   \   0000B8   75..00       MOV     ?V0 + 0,#0x0
    441                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_10:
   \   0000BB   E5..         MOV     A,?V0 + 0
   \   0000BD   C3           CLR     C
   \   0000BE   33           RLC     A
   \   0000BF   FC           MOV     R4,A
   \   0000C0   E4           CLR     A
   \   0000C1   33           RLC     A
   \   0000C2   FD           MOV     R5,A
   \   0000C3   E5..         MOV     A,?V0 + 6
   \   0000C5   2C           ADD     A,R4
   \   0000C6   FC           MOV     R4,A
   \   0000C7   E5..         MOV     A,?V0 + 7
   \   0000C9   12....       LCALL   ?Subroutine13 & 0xFFFF
    442                *pBuf++ = HI_UINT16( OutClusterList[i] );
    443              }
    444            }
   \                     ??CrossCallReturnLabel_1:
   \   0000CC   9F           SUBB    A,R7
   \   0000CD   40EC         JC      ??ZDP_MatchDescReq_10
    445          
    446            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_9:
   \   0000CF                ; Setup parameters for call to function fillAndSend
   \   0000CF   75..06       MOV     ?V0 + 0,#0x6
   \   0000D2   75..00       MOV     ?V0 + 1,#0x0
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   A9..         MOV     R1,?V0 + 4
   \   0000DC   EA           MOV     A,R2
   \   0000DD   FC           MOV     R4,A
   \   0000DE   EB           MOV     A,R3
   \   0000DF   FD           MOV     R5,A
   \   0000E0   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000E6   80..         SJMP    ??Subroutine95_0
    447          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   3D           ADDC    A,R5
   \   000001   FD           MOV     R5,A
   \   000002   8C82         MOV     DPL,R4
   \   000004   8D83         MOV     DPH,R5
   \   000006   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000009   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00000C   05..         INC     ?V0 + 0
   \   00000E   E5..         MOV     A,?V0 + 0
   \   000010   C3           CLR     C
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine101_0
   \   000005                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine113_0
   \   000004                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine115_0
   \   000004                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine116_0
   \   000001                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine117_0
   \   000001                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   22           RET
    448          
    449          /*********************************************************************
    450           * @fn          ZDP_SimpleDescReq
    451           *
    452           * @brief       This builds and send a NWK_Simple_Desc_req
    453           *              message.  This function sends unicast message to the
    454           *              destination device.
    455           *
    456           * @param       dstAddr - destination address
    457           * @param       nwkAddr - 16 bit address
    458           * @param       epIntf - endpoint/interface
    459           * @param       SecurityEnable - Security Options
    460           *
    461           * @return      afStatus_t
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    464                                              byte endPoint, byte SecurityEnable )
    465          
    466          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    467            (void)SecurityEnable;  // Intentionally unreferenced parameter
    468          
    469            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine18 & 0xFFFF
    470            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    471            ZDP_TmpBuf[2] = endPoint;
   \                     ??CrossCallReturnLabel_9:
   \   000008   12....       LCALL   ?Subroutine32 & 0xFFFF
    472          
    473            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_32:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0 + 0,#0x4
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine92_0 & 0xFFFF
    474          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    475          
    476          /*********************************************************************
    477           * @fn          ZDP_UserDescSet
    478           *
    479           * @brief       This builds and send a User_Desc_set message to set
    480           *              the user descriptor.  This function sends unicast
    481           *              message to the destination device.
    482           *
    483           * @param       dstAddr - destination address
    484           * @param       nwkAddr - 16 bit address
    485           * @param       UserDescriptor - user descriptor
    486           * @param       SecurityEnable - Security Options
    487           *
    488           * @return      afStatus_t
    489           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    490          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    491                                    UserDescriptorFormat_t *UserDescriptor,
    492                                    byte SecurityEnable )
    493          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   7414         MOV     A,#0x14
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000016   FA           MOV     R2,A
   \   000017   E9           MOV     A,R1
   \   000018   FB           MOV     R3,A
    494            uint8 *pBuf = ZDP_TmpBuf;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   12....       LCALL   ??Subroutine97_0 & 0xFFFF
    495            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    496                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_124:
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   E0           MOVX    A,@DPTR
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   C3           CLR     C
   \   00002C   9410         SUBB    A,#0x10
   \   00002E   5005         JNC     ??ZDP_UserDescSet_0
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 6,A
   \   000033   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000035   75..10       MOV     ?V0 + 6,#0x10
    497            byte addrLen = 2;
    498          
    499            (void)SecurityEnable;  // Intentionally unreferenced parameter
    500          
    501            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000038   EC           MOV     A,R4
   \   000039   85..82       MOV     DPL,?V0 + 2
   \   00003C   85..83       MOV     DPH,?V0 + 3
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
    502            *pBuf++ = HI_UINT16( nwkAddr );
   \   000041   ED           MOV     A,R5
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
    503          
    504            *pBuf++ = len;
   \   000044   E5..         MOV     A,?V0 + 6
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   8582..       MOV     ?V0 + 2,DPL
   \   00004B   8583..       MOV     ?V0 + 3,DPH
    505            addrLen = 3;
    506          
    507            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    508            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00004E                ; Setup parameters for call to function osal_memset
   \   00004E   F5..         MOV     ?V0 + 4,A
   \   000050   7410         MOV     A,#0x10
   \   000052   C3           CLR     C
   \   000053   95..         SUBB    A,?V0 + 4
   \   000055   FC           MOV     R4,A
   \   000056   E4           CLR     A
   \   000057   9400         SUBB    A,#0x0
   \   000059   FD           MOV     R5,A
   \   00005A   7920         MOV     R1,#0x20
   \   00005C   E9           MOV     A,R1
   \   00005D   C0E0         PUSH    A
   \   00005F   EC           MOV     A,R4
   \   000060   FE           MOV     R6,A
   \   000061   ED           MOV     A,R5
   \   000062   FF           MOV     R7,A
   \   000063                ; Setup parameters for call to function osal_memcpy
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   A982         MOV     R1,DPL
   \   00006A   AA83         MOV     R2,DPH
   \   00006C   89..         MOV     ?V0 + 8,R1
   \   00006E   8A..         MOV     ?V0 + 9,R2
   \   000070   75..00       MOV     ?V0 + 10,#0x0
   \   000073   78..         MOV     R0,#?V0 + 8
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000078   AC..         MOV     R4,?V0 + 4
   \   00007A   7D00         MOV     R5,#0x0
   \   00007C   AA..         MOV     R2,?V0 + 2
   \   00007E   AB..         MOV     R3,?V0 + 3
   \   000080   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
   \   000086   EE           MOV     A,R6
   \   000087   FC           MOV     R4,A
   \   000088   EF           MOV     A,R7
   \   000089   FD           MOV     R5,A
   \   00008A   D0E0         POP     A
   \   00008C   F9           MOV     R1,A
   \   00008D   12....       LCALL   ??osal_memset?relay
    509          
    510            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000090                ; Setup parameters for call to function fillAndSend
   \   000090   75..14       MOV     ?V0 + 2,#0x14
   \   000093   75..00       MOV     ?V0 + 3,#0x0
   \   000096   78..         MOV     R0,#?V0 + 2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   7913         MOV     R1,#0x13
   \   00009D   AC..         MOV     R4,?V0 + 0
   \   00009F   AD..         MOV     R5,?V0 + 1
   \   0000A1   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   7F0B         MOV     R7,#0xb
   \   0000AE   02....       LJMP    ?BANKED_LEAVE_XDATA
    511          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    512          
    513          /*********************************************************************
    514           * @fn          ZDP_ServerDiscReq
    515           *
    516           * @brief       Build and send a Server_Discovery_req request message.
    517           *
    518           * @param       serverMask - 16-bit bit-mask of server services being sought.
    519           * @param       SecurityEnable - Security Options
    520           *
    521           * @return      afStatus_t
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    524          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine31 & 0xFFFF
    525            uint8 *pBuf = ZDP_TmpBuf;
    526            zAddrType_t dstAddr;
    527          
    528            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_259:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine53 & 0xFFFF
    529            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    530          
    531            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_69:
   \   000015   12....       LCALL   ?Subroutine64 & 0xFFFF
    532            *pBuf = HI_UINT16( serverMask );
    533          
    534            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    535                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \                     ??CrossCallReturnLabel_240:
   \   000018   EE           MOV     A,R6
   \   000019   6004         JZ      ??ZDP_ServerDiscReq_0
   \   00001B   7440         MOV     A,#0x40
   \   00001D   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   00001F   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000020   90....       MOV     DPTR,#ZDP_TxOptions
   \   000023   F0           MOVX    @DPTR,A
   \   000024                ; Setup parameters for call to function fillAndSend
   \   000024   75..15       MOV     ?V0 + 0,#0x15
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7902         MOV     R1,#0x2
   \   000031   E9           MOV     A,R1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   E4           CLR     A
   \   00003C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   02....       LJMP    ??Subroutine91_0 & 0xFFFF
    536          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0
    537          
    538          /*********************************************************************
    539           * @fn          ZDP_DeviceAnnce
    540           *
    541           * @brief       This builds and send a Device_Annce message.  This
    542           *              function sends a broadcast message.
    543           *
    544           * @param       nwkAddr - 16 bit address of the device
    545           * @param       IEEEAddr - 64 bit address of the device
    546           * @param       capabilities - device capabilities.  This field is only
    547           *                 sent for v1.1 networks.
    548           * @param       SecurityEnable - Security Options
    549           *
    550           * @return      afStatus_t
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    553                                        byte capabilities, byte SecurityEnable )
    554          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    555            zAddrType_t dstAddr;
    556            uint8 len;
    557          
    558            (void)SecurityEnable;  // Intentionally unreferenced parameter
    559          
    560            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine53 & 0xFFFF
    561            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    562          
    563            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_70:
   \   000014   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine33 & 0xFFFF
    564            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_116:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    565            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   12....       LCALL   ?Subroutine24 & 0xFFFF
    566            len = 2 + Z_EXTADDR_LEN;
    567          
    568            ZDP_TmpBuf[10] = capabilities;
   \                     ??CrossCallReturnLabel_16:
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   EE           MOV     A,R6
   \   00002E   F0           MOVX    @DPTR,A
    569            len++;
    570          
    571            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00002F                ; Setup parameters for call to function fillAndSend
   \   00002F   75..13       MOV     ?V0 + 0,#0x13
   \   000032   75..00       MOV     ?V0 + 1,#0x0
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   790B         MOV     R1,#0xb
   \   00003C   02....       LJMP    ?Subroutine8 & 0xFFFF
    572          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine96_0
   \   000001                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??sAddrExtCpy?relay
   \   000004   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   22           RET
    573          
    574          /*********************************************************************
    575           * Address Responses
    576           */
    577          
    578          /*********************************************************************
    579           * @fn      zdpProcessAddrReq
    580           *
    581           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    582           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    583           *
    584           * @param   inMsg - incoming message
    585           *
    586           * @return  none
    587           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    589          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 8,R2
   \   00000C   8B..         MOV     ?V0 + 9,R3
    590            associated_devices_t *pAssoc;
    591            uint8 reqType;
    592            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0 + 2,#-0x2
   \   000011   75..FF       MOV     ?V0 + 3,#-0x1
    593            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    594          
    595            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   EA           MOV     A,R2
   \   00001B   240C         ADD     A,#0xc
   \   00001D   F5..         MOV     ?V0 + 10,A
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 11,A
   \   000024   85..82       MOV     DPL,?V0 + 10
   \   000027   F583         MOV     DPH,A
   \   000029   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00002C   EA           MOV     A,R2
   \   00002D   7001         JNZ     ??zdpProcessAddrReq_0
   \   00002F   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_0:
   \   000030   7004         JNZ     ??zdpProcessAddrReq_1
   \   000032   7C08         MOV     R4,#0x8
   \   000034   8002         SJMP    ??zdpProcessAddrReq_2
   \                     ??zdpProcessAddrReq_1:
   \   000036   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_2:
   \   000038   E5..         MOV     A,?V0 + 8
   \   00003A   2413         ADD     A,#0x13
   \   00003C   F5..         MOV     ?V0 + 12,A
   \   00003E   E5..         MOV     A,?V0 + 9
   \   000040   3400         ADDC    A,#0x0
   \   000042   F5..         MOV     ?V0 + 13,A
   \   000044   85..82       MOV     DPL,?V0 + 12
   \   000047   F583         MOV     DPH,A
   \   000049   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00004C   2C           ADD     A,R4
   \   00004D   F582         MOV     DPL,A
   \   00004F   E9           MOV     A,R1
   \   000050   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000053   F5..         MOV     ?V0 + 4,A
    596          
    597            if ( inMsg->clusterID == NWK_addr_req )
   \   000055   EA           MOV     A,R2
   \   000056   7001         JNZ     ??zdpProcessAddrReq_3
   \   000058   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_3:
   \   000059   704C         JNZ     ??zdpProcessAddrReq_4
    598          
    599            {
    600              ieee = inMsg->asdu;
   \   00005B   88..         MOV     ?V0 + 0,R0
   \   00005D   89..         MOV     ?V0 + 1,R1
    601          
    602              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00005F                ; Setup parameters for call to function sAddrExtCmp
   \   00005F   AC..         MOV     R4,?V0 + 0
   \   000061   AD..         MOV     R5,?V0 + 1
   \   000063   7A..         MOV     R2,#(saveExtAddr & 0xff)
   \   000065   7B..         MOV     R3,#((saveExtAddr >> 8) & 0xff)
   \   000067   12....       LCALL   ??sAddrExtCmp?relay
   \   00006A   E9           MOV     A,R1
   \   00006B   6006         JZ      ??zdpProcessAddrReq_5
    603              {
    604                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00006D   12....       LCALL   ?Subroutine12 & 0xFFFF
    605              }
   \                     ??CrossCallReturnLabel_129:
   \   000070   02....       LJMP    ??zdpProcessAddrReq_6 & 0xFFFF
    606              // Handle response for sleeping end devices
    607              else if ( (ZSTACK_ROUTER_BUILD)
    608                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    609                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_5:
   \   000073                ; Setup parameters for call to function AssocGetWithExt
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   12....       LCALL   ??AssocGetWithExt?relay
   \   00007A   EA           MOV     A,R2
   \   00007B   F8           MOV     R0,A
   \   00007C   EB           MOV     A,R3
   \   00007D   F9           MOV     R1,A
   \   00007E   EA           MOV     A,R2
   \   00007F   7001         JNZ     ??zdpProcessAddrReq_7
   \   000081   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_7:
   \   000082   7003         JNZ     $+5
   \   000084   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   6401         XRL     A,#0x1
   \   000092   6003         JZ      $+5
   \   000094   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
    610              {
    611                aoi = pAssoc->shortAddr;
   \   000097   8882         MOV     DPL,R0
   \   000099   8983         MOV     DPH,R1
   \   00009B   12....       LCALL   ??Subroutine97_0 & 0xFFFF
    612                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_125:
   \   00009E   E5..         MOV     A,?V0 + 4
   \   0000A0   607A         JZ      ??zdpProcessAddrReq_6
    613                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_9:
   \   0000A2   75..FF       MOV     ?V0 + 4,#-0x1
   \   0000A5   8075         SJMP    ??zdpProcessAddrReq_6
    614              }
    615            }
    616            else  // if ( inMsg->clusterID == IEEE_addr_req )
    617            {
    618              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_4:
   \   0000A7   8882         MOV     DPL,R0
   \   0000A9   8983         MOV     DPH,R1
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   FA           MOV     R2,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F9           MOV     R1,A
   \   0000B0   EA           MOV     A,R2
   \   0000B1   F5..         MOV     ?V0 + 2,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   F5..         MOV     ?V0 + 3,A
    619          
    620              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000B6   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   65..         XRL     A,?V0 + 2
   \   0000BC   7004         JNZ     ??zdpProcessAddrReq_10
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_10:
   \   0000C2   7008         JNZ     ??zdpProcessAddrReq_11
    621              {
    622                ieee = saveExtAddr;
   \   0000C4   75....       MOV     ?V0 + 0,#(saveExtAddr & 0xff)
   \   0000C7   75....       MOV     ?V0 + 1,#((saveExtAddr >> 8) & 0xff)
   \   0000CA   8050         SJMP    ??zdpProcessAddrReq_6
    623              }
    624              else if ( (ZSTACK_ROUTER_BUILD)
    625                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    626                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_11:
   \   0000CC                ; Setup parameters for call to function AssocGetWithShort
   \   0000CC   AB..         MOV     R3,?V0 + 3
   \   0000CE   12....       LCALL   ??AssocGetWithShort?relay
   \   0000D1   EA           MOV     A,R2
   \   0000D2   F8           MOV     R0,A
   \   0000D3   EB           MOV     A,R3
   \   0000D4   F9           MOV     R1,A
   \   0000D5   EA           MOV     A,R2
   \   0000D6   7001         JNZ     ??zdpProcessAddrReq_12
   \   0000D8   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_12:
   \   0000D9   6041         JZ      ??zdpProcessAddrReq_6
   \   0000DB   8882         MOV     DPL,R0
   \   0000DD   8983         MOV     DPH,R1
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6401         XRL     A,#0x1
   \   0000E6   7034         JNZ     ??zdpProcessAddrReq_6
    627              {
    628                AddrMgrEntry_t addrEntry;
    629                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000E8   7401         MOV     A,#0x1
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E4           CLR     A
   \   0000EE   12....       LCALL   ?Subroutine61 & 0xFFFF
    630                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_86:
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0000F6   740C         MOV     A,#0xc
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ??Subroutine127_0 & 0xFFFF
    631                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_294:
   \   0000FE                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000FE   7401         MOV     A,#0x1
   \   000100   12....       LCALL   ?XSTACK_DISP0_8
   \   000103   AA82         MOV     R2,DPL
   \   000105   AB83         MOV     R3,DPH
   \   000107   12....       LCALL   ??AddrMgrEntryGet?relay
   \   00010A   E9           MOV     A,R1
   \   00010B   600B         JZ      ??zdpProcessAddrReq_13
    632                {
    633                  ieee = addrEntry.extAddr;
   \   00010D   7404         MOV     A,#0x4
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   8582..       MOV     ?V0 + 0,DPL
   \   000115   8583..       MOV     ?V0 + 1,DPH
    634                }
    635          
    636                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_13:
   \   000118   E5..         MOV     A,?V0 + 4
   \   00011A   7086         JNZ     ??zdpProcessAddrReq_9
    637                  reqType = 0xFF; // Force Invalid
    638              }
    639            }
    640          
    641            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_6:
   \   00011C   74FE         MOV     A,#-0x2
   \   00011E   65..         XRL     A,?V0 + 2
   \   000120   7004         JNZ     ??zdpProcessAddrReq_14
   \   000122   74FF         MOV     A,#-0x1
   \   000124   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_14:
   \   000126   6008         JZ      ??zdpProcessAddrReq_8
   \   000128   E5..         MOV     A,?V0 + 0
   \   00012A   7002         JNZ     ??zdpProcessAddrReq_15
   \   00012C   E5..         MOV     A,?V0 + 1
   \                     ??zdpProcessAddrReq_15:
   \   00012E   7010         JNZ     ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_8:
   \   000130   E5..         MOV     A,?V0 + 8
   \   000132   240B         ADD     A,#0xb
   \   000134   F582         MOV     DPL,A
   \   000136   E5..         MOV     A,?V0 + 9
   \   000138   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00013B   6003         JZ      $+5
   \   00013D   02....       LJMP    ??zdpProcessAddrReq_17 & 0xFFFF
    642            {
    643              uint8 stat;
    644              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_16:
   \   000140   12....       LCALL   ?Subroutine29 & 0xFFFF
    645              // Status + IEEE-Addr + Nwk-Addr.
    646              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_250:
   \   000143   75..0B       MOV     ?V0 + 5,#0xb
    647              
    648              // If aoi and iee are both setup, we found results
    649              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000146   74FE         MOV     A,#-0x2
   \   000148   65..         XRL     A,?V0 + 2
   \   00014A   7004         JNZ     ??zdpProcessAddrReq_18
   \   00014C   74FF         MOV     A,#-0x1
   \   00014E   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_18:
   \   000150   601C         JZ      ??zdpProcessAddrReq_19
   \   000152   E5..         MOV     A,?V0 + 0
   \   000154   7002         JNZ     ??zdpProcessAddrReq_20
   \   000156   E5..         MOV     A,?V0 + 1
   \                     ??zdpProcessAddrReq_20:
   \   000158   6014         JZ      ??zdpProcessAddrReq_19
    650              {
    651                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    652                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   00015A   E5..         MOV     A,?V0 + 4
   \   00015C   6006         JZ      ??zdpProcessAddrReq_21
   \   00015E   7401         MOV     A,#0x1
   \   000160   65..         XRL     A,?V0 + 4
   \   000162   7005         JNZ     ??zdpProcessAddrReq_22
   \                     ??zdpProcessAddrReq_21:
   \   000164   75..00       MOV     ?V0 + 6,#0x0
   \   000167   8020         SJMP    ??zdpProcessAddrReq_23
   \                     ??zdpProcessAddrReq_22:
   \   000169   75..80       MOV     ?V0 + 6,#-0x80
   \   00016C   801B         SJMP    ??zdpProcessAddrReq_23
    653              }
    654              else 
    655              {
    656                // not found and the req was unicast to this device
    657                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_19:
   \   00016E   75..81       MOV     ?V0 + 6,#-0x7f
    658                
    659                // Fill in the missing field with this device's address
    660                if ( inMsg->clusterID == NWK_addr_req )
   \   000171   85..82       MOV     DPL,?V0 + 10
   \   000174   85..83       MOV     DPH,?V0 + 11
   \   000177   E0           MOVX    A,@DPTR
   \   000178   7002         JNZ     ??zdpProcessAddrReq_24
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \                     ??zdpProcessAddrReq_24:
   \   00017C   7005         JNZ     ??zdpProcessAddrReq_25
    661                {
    662                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00017E   12....       LCALL   ?Subroutine12 & 0xFFFF
    663                }
   \                     ??CrossCallReturnLabel_130:
   \   000181   8006         SJMP    ??zdpProcessAddrReq_23
    664                else
    665                {
    666                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_25:
   \   000183   75....       MOV     ?V0 + 0,#(saveExtAddr & 0xff)
   \   000186   75....       MOV     ?V0 + 1,#((saveExtAddr >> 8) & 0xff)
    667                }
    668              }
    669          
    670              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_23:
   \   000189   8E82         MOV     DPL,R6
   \   00018B   8F83         MOV     DPH,R7
   \   00018D   E5..         MOV     A,?V0 + 6
   \   00018F   F0           MOVX    @DPTR,A
   \   000190   A3           INC     DPTR
    671          
    672              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000191                ; Setup parameters for call to function sAddrExtCpy
   \   000191   AC..         MOV     R4,?V0 + 0
   \   000193   AD..         MOV     R5,?V0 + 1
   \   000195   AA82         MOV     R2,DPL
   \   000197   AB83         MOV     R3,DPH
   \   000199   12....       LCALL   ??sAddrExtCpy?relay
   \   00019C   8A..         MOV     ?V0 + 0,R2
   \   00019E   8B..         MOV     ?V0 + 1,R3
   \   0001A0   AE..         MOV     R6,?V0 + 0
   \   0001A2   AF..         MOV     R7,?V0 + 1
    673          
    674              *pBuf++ = LO_UINT16( aoi );
   \   0001A4   8E82         MOV     DPL,R6
   \   0001A6   8F83         MOV     DPH,R7
   \   0001A8   E5..         MOV     A,?V0 + 2
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   A3           INC     DPTR
    675              *pBuf++ = HI_UINT16( aoi );
   \   0001AC   E5..         MOV     A,?V0 + 3
   \   0001AE   12....       LCALL   ?Subroutine60 & 0xFFFF
    676          
    677              if ( ZSTACK_ROUTER_BUILD )
    678              {
    679                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    680                     && (stat == ZDP_SUCCESS) )
   \                     ??CrossCallReturnLabel_83:
   \   0001B1   7401         MOV     A,#0x1
   \   0001B3   65..         XRL     A,?V0 + 4
   \   0001B5   6003         JZ      $+5
   \   0001B7   02....       LJMP    ??zdpProcessAddrReq_26 & 0xFFFF
   \   0001BA   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   65..         XRL     A,?V0 + 2
   \   0001C0   7004         JNZ     ??zdpProcessAddrReq_27
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_27:
   \   0001C6   6003         JZ      $+5
   \   0001C8   02....       LJMP    ??zdpProcessAddrReq_26 & 0xFFFF
   \   0001CB   E5..         MOV     A,?V0 + 6
   \   0001CD   6003         JZ      $+5
   \   0001CF   02....       LJMP    ??zdpProcessAddrReq_26 & 0xFFFF
    681                {
    682                  uint8  cnt = 0;
   \   0001D2   E4           CLR     A
   \   0001D3   85..82       MOV     DPL,?XSP + 0
   \   0001D6   85..83       MOV     DPH,?XSP + 1
   \   0001D9   F0           MOVX    @DPTR,A
    683                  uint16 *list = AssocMakeList( &cnt );
   \   0001DA                ; Setup parameters for call to function AssocMakeList
   \   0001DA   AA82         MOV     R2,DPL
   \   0001DC   AB83         MOV     R3,DPH
   \   0001DE   12....       LCALL   ??AssocMakeList?relay
    684          
    685                  if ( list != NULL )
   \   0001E1   8E82         MOV     DPL,R6
   \   0001E3   8F83         MOV     DPH,R7
   \   0001E5   A3           INC     DPTR
   \   0001E6   A983         MOV     R1,DPH
   \   0001E8   EA           MOV     A,R2
   \   0001E9   7001         JNZ     ??zdpProcessAddrReq_28
   \   0001EB   EB           MOV     A,R3
   \                     ??zdpProcessAddrReq_28:
   \   0001EC   7003         JNZ     $+5
   \   0001EE   02....       LJMP    ??zdpProcessAddrReq_29 & 0xFFFF
    686                  {
    687                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001F1   85..82       MOV     DPL,?V0 + 10
   \   0001F4   85..83       MOV     DPH,?V0 + 11
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   7002         JNZ     ??zdpProcessAddrReq_30
   \   0001FA   A3           INC     DPTR
   \   0001FB   E0           MOVX    A,@DPTR
   \                     ??zdpProcessAddrReq_30:
   \   0001FC   7004         JNZ     ??zdpProcessAddrReq_31
   \   0001FE   7C08         MOV     R4,#0x8
   \   000200   8002         SJMP    ??zdpProcessAddrReq_32
   \                     ??zdpProcessAddrReq_31:
   \   000202   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_32:
   \   000204   85..82       MOV     DPL,?V0 + 12
   \   000207   85..83       MOV     DPH,?V0 + 13
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   2C           ADD     A,R4
   \   00020C   F5..         MOV     ?V0 + 0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   3400         ADDC    A,#0x0
   \   000212   85..82       MOV     DPL,?V0 + 0
   \   000215   F583         MOV     DPH,A
   \   000217   A3           INC     DPTR
   \   000218   E0           MOVX    A,@DPTR
   \   000219   F5..         MOV     ?V0 + 0,A
    688                    uint16 *pList = list + idx;
   \   00021B   C3           CLR     C
   \   00021C   33           RLC     A
   \   00021D   FC           MOV     R4,A
   \   00021E   E4           CLR     A
   \   00021F   33           RLC     A
   \   000220   FD           MOV     R5,A
   \   000221   EA           MOV     A,R2
   \   000222   2C           ADD     A,R4
   \   000223   FC           MOV     R4,A
   \   000224   EB           MOV     A,R3
   \   000225   3D           ADDC    A,R5
   \   000226   FD           MOV     R5,A
    689          
    690                    // NumAssocDev field is only present on success.
    691                    if ( cnt > idx )
   \   000227   85..82       MOV     DPL,?XSP + 0
   \   00022A   85..83       MOV     DPH,?XSP + 1
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   F5..         MOV     ?V0 + 1,A
   \   000230   E5..         MOV     A,?V0 + 0
   \   000232   C3           CLR     C
   \   000233   95..         SUBB    A,?V0 + 1
   \   000235   500D         JNC     ??zdpProcessAddrReq_33
    692                    {
    693                      cnt -= idx;
   \   000237   E0           MOVX    A,@DPTR
   \   000238   C3           CLR     C
   \   000239   95..         SUBB    A,?V0 + 0
   \   00023B   F0           MOVX    @DPTR,A
    694                      len += (cnt * sizeof( uint16 ));
   \   00023C   C3           CLR     C
   \   00023D   33           RLC     A
   \   00023E   240B         ADD     A,#0xb
   \   000240   F5..         MOV     ?V0 + 5,A
   \   000242   8002         SJMP    ??zdpProcessAddrReq_34
    695                    }
    696                    else
    697                    {
    698                      cnt = 0;
   \                     ??zdpProcessAddrReq_33:
   \   000244   E4           CLR     A
   \   000245   F0           MOVX    @DPTR,A
    699                    }
    700                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_34:
   \   000246   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000249   0E           INC     R6
   \   00024A   E9           MOV     A,R1
   \   00024B   FF           MOV     R7,A
    701                    len++;
    702          
    703                    // StartIndex field is only present if NumAssocDev field is non-zero.
    704                    *pBuf++ = idx;
   \   00024C   8E82         MOV     DPL,R6
   \   00024E   8F83         MOV     DPH,R7
   \   000250   E5..         MOV     A,?V0 + 0
   \   000252   F0           MOVX    @DPTR,A
   \   000253   A3           INC     DPTR
   \   000254   0E           INC     R6
   \   000255   AF83         MOV     R7,DPH
    705                    len++;
   \   000257   05..         INC     ?V0 + 5
   \   000259   05..         INC     ?V0 + 5
   \   00025B   8024         SJMP    ??zdpProcessAddrReq_35
    706          
    707                    while ( cnt != 0 )
    708                    {
    709                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_36:
   \   00025D   8C82         MOV     DPL,R4
   \   00025F   8D83         MOV     DPH,R5
   \   000261   12....       LCALL   ?Subroutine40 & 0xFFFF
    710                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_44:
   \   000264   8C82         MOV     DPL,R4
   \   000266   8D83         MOV     DPH,R5
   \   000268   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00026B   A3           INC     DPTR
   \   00026C   0E           INC     R6
   \   00026D   AF83         MOV     R7,DPH
    711                      pList++;
   \   00026F   EC           MOV     A,R4
   \   000270   2402         ADD     A,#0x2
   \   000272   0C           INC     R4
   \   000273   0C           INC     R4
   \   000274   ED           MOV     A,R5
   \   000275   3400         ADDC    A,#0x0
   \   000277   FD           MOV     R5,A
    712                      cnt--;
   \   000278   85..82       MOV     DPL,?XSP + 0
   \   00027B   85..83       MOV     DPH,?XSP + 1
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   14           DEC     A
   \   000280   F0           MOVX    @DPTR,A
    713                    }
   \                     ??zdpProcessAddrReq_35:
   \   000281   85..82       MOV     DPL,?XSP + 0
   \   000284   85..83       MOV     DPH,?XSP + 1
   \   000287   E0           MOVX    A,@DPTR
   \   000288   70D3         JNZ     ??zdpProcessAddrReq_36
    714          
    715                    osal_mem_free( (uint8 *)list );
   \   00028A                ; Setup parameters for call to function osal_mem_free
   \   00028A   12....       LCALL   ??osal_mem_free?relay
   \   00028D   8009         SJMP    ??zdpProcessAddrReq_26
    716                  }
    717                  else
    718                  {
    719                    // NumAssocDev field is only present on success.
    720                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_29:
   \   00028F   E4           CLR     A
   \   000290   8E82         MOV     DPL,R6
   \   000292   8F83         MOV     DPH,R7
   \   000294   F0           MOVX    @DPTR,A
    721                    len++;
   \   000295   75..0C       MOV     ?V0 + 5,#0xc
    722                  }
    723                }
    724              }
    725          
    726              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_26:
   \   000298   7410         MOV     A,#0x10
   \   00029A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00029D   F0           MOVX    @DPTR,A
    727              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   00029E                ; Setup parameters for call to function fillAndSend
   \   00029E   85..82       MOV     DPL,?V0 + 10
   \   0002A1   85..83       MOV     DPH,?V0 + 11
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   F5..         MOV     ?V0 + 0,A
   \   0002A7   A3           INC     DPTR
   \   0002A8   E0           MOVX    A,@DPTR
   \   0002A9   4480         ORL     A,#0x80
   \   0002AB   F5..         MOV     ?V0 + 1,A
   \   0002AD   78..         MOV     R0,#?V0 + 0
   \   0002AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B2   A9..         MOV     R1,?V0 + 5
   \   0002B4   E5..         MOV     A,?V0 + 8
   \   0002B6   2402         ADD     A,#0x2
   \   0002B8   FC           MOV     R4,A
   \   0002B9   E5..         MOV     A,?V0 + 9
   \   0002BB   3400         ADDC    A,#0x0
   \   0002BD   FD           MOV     R5,A
   \   0002BE   E5..         MOV     A,?V0 + 8
   \   0002C0   240F         ADD     A,#0xf
   \   0002C2   FA           MOV     R2,A
   \   0002C3   E5..         MOV     A,?V0 + 9
   \   0002C5   3400         ADDC    A,#0x0
   \   0002C7   FB           MOV     R3,A
   \   0002C8   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   0002CB   12....       LCALL   ?DEALLOC_XSTACK8
    728              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0002CE   E4           CLR     A
   \   0002CF   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002D2   F0           MOVX    @DPTR,A
    729            }
    730          }
   \                     ??zdpProcessAddrReq_17:
   \   0002D3   740E         MOV     A,#0xe
   \   0002D5   80..         SJMP    ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine99_0
   \   000003                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine106_0
   \   000005                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine110_0
   \   000001                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    731          
    732          /*********************************************************************
    733           * @fn          ZDP_NodeDescMsg
    734           *
    735           * @brief       Builds and sends a Node Descriptor message, unicast to the
    736           *              specified device.
    737           *
    738           * @param       inMsg - incoming message
    739           * @param       nwkAddr - 16 bit network address for device
    740           * @param       pNodeDesc - pointer to the node descriptor
    741           *
    742           * @return      afStatus_t
    743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    744          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    745                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    746          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   12....       LCALL   ?Subroutine15 & 0xFFFF
    747            uint8 *pBuf = ZDP_TmpBuf;
    748            byte len;
    749          
    750            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    751          
    752            *pBuf++ = ZDP_SUCCESS;
    753          
    754            *pBuf++ = LO_UINT16( nwkAddr );
    755            *pBuf++ = HI_UINT16( nwkAddr );
    756          
    757            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    758                               (pNodeDesc->UserDescAvail << 4) |
    759                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_2:
   \   000011   541F         ANL     A,#0x1f
   \   000013   12....       LCALL   ?Subroutine58 & 0xFFFF
    760          
    761            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_78:
   \   000016   12....       LCALL   ?Subroutine25 & 0xFFFF
    762            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_18:
   \   000019   12....       LCALL   ?Subroutine25 & 0xFFFF
    763            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_19:
   \   00001C   A3           INC     DPTR
   \   00001D   12....       LCALL   ?Subroutine22 & 0xFFFF
    764            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_12:
   \   000020   12....       LCALL   ?Subroutine22 & 0xFFFF
    765            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_13:
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine20 & 0xFFFF
    766            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_10:
   \   000027   12....       LCALL   ?Subroutine20 & 0xFFFF
    767            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_11:
   \   00002A   12....       LCALL   ?Subroutine21 & 0xFFFF
    768          
    769            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_131:
   \   00002D   2408         ADD     A,#0x8
   \   00002F   FC           MOV     R4,A
   \   000030   EF           MOV     A,R7
   \   000031   12....       LCALL   ?Subroutine17 & 0xFFFF
    770            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
    771            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_6:
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   12....       LCALL   ?Subroutine21 & 0xFFFF
    772            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_132:
   \   000044   240B         ADD     A,#0xb
   \   000046   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000049   12....       LCALL   ??Subroutine100_0 & 0xFFFF
    773            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_133:
   \   00004C   240C         ADD     A,#0xc
   \   00004E   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000051   12....       LCALL   ?Subroutine39 & 0xFFFF
    774          
    775            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_41:
   \   000054                ; Setup parameters for call to function fillAndSend
   \   000054   75..02       MOV     ?V0 + 0,#0x2
   \   000057   75..80       MOV     ?V0 + 1,#-0x80
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7910         MOV     R1,#0x10
   \   000061                REQUIRE ?Subroutine10
   \   000061                ; // Fall through to label ?Subroutine10
    776          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   EA           MOV     A,R2
   \   000009   240F         ADD     A,#0xf
   \   00000B   FA           MOV     R2,A
   \   00000C   EB           MOV     A,R3
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   FB           MOV     R3,A
   \   000010   02....       LJMP    ??Subroutine93_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   FF           MOV     R7,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000007   E4           CLR     A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EC           MOV     A,R4
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   ED           MOV     A,R5
   \   000012   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00000A   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    777          
    778          /*********************************************************************
    779           * @fn          ZDP_PowerDescMsg
    780           *
    781           * @brief       Builds and sends a Power Descriptor message, unicast to the
    782           *              specified device.
    783           *
    784           * @param       inMsg - incoming message (request)
    785           * @param       nwkAddr - 16 bit network address for device
    786           * @param       pPowerDesc - pointer to the node descriptor
    787           *
    788           * @return      afStatus_t
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    791                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    792          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00000D   FE           MOV     R6,A
   \   00000E   E9           MOV     A,R1
   \   00000F   12....       LCALL   ?Subroutine15 & 0xFFFF
    793            uint8 *pBuf = ZDP_TmpBuf;
    794            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    795          
    796            *pBuf++ = ZDP_SUCCESS;
    797          
    798            *pBuf++ = LO_UINT16( nwkAddr );
    799            *pBuf++ = HI_UINT16( nwkAddr );
    800          
    801            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    802                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_3:
   \   000012   12....       LCALL   ?Subroutine58 & 0xFFFF
    803            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    804                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_79:
   \   000015   12....       LCALL   ?Subroutine39 & 0xFFFF
    805          
    806            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \                     ??CrossCallReturnLabel_42:
   \   000018                ; Setup parameters for call to function fillAndSend
   \   000018   75..03       MOV     ?V0 + 0,#0x3
   \   00001B   75..80       MOV     ?V0 + 1,#-0x80
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7905         MOV     R1,#0x5
   \   000025   80..         SJMP    ?Subroutine10
    807          }
    808          
    809          /*********************************************************************
    810           * @fn          ZDP_SimpleDescMsg
    811           *
    812           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    813           *              specified device.
    814           *
    815           * @param       inMsg - incoming message (request)
    816           * @param       Status - message status (ZDP_SUCCESS or other)
    817           * @param       pSimpleDesc - pointer to the node descriptor
    818           *
    819           * @return      afStatus_t
    820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    821          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    822                                        SimpleDescriptionFormat_t *pSimpleDesc )
    823          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   12....       LCALL   ?Subroutine31 & 0xFFFF
    824            uint8 *pBuf = ZDP_TmpBuf;
    825            uint8 i, len;
    826          
    827            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_260:
   \   00000C   EC           MOV     A,R4
   \   00000D   2409         ADD     A,#0x9
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   8A..         MOV     ?V0 + 4,R2
   \   000016   8B..         MOV     ?V0 + 5,R3
   \   000018   EC           MOV     A,R4
   \   000019   2406         ADD     A,#0x6
   \   00001B   1A           DEC     R2
   \   00001C   1A           DEC     R2
   \   00001D   1A           DEC     R2
   \   00001E   ED           MOV     A,R5
   \   00001F   3400         ADDC    A,#0x0
   \   000021   FB           MOV     R3,A
   \   000022   8A..         MOV     ?V0 + 6,R2
   \   000024   8B..         MOV     ?V0 + 7,R3
   \   000026   EE           MOV     A,R6
   \   000027   7021         JNZ     ??ZDP_SimpleDescMsg_0
   \   000029   EC           MOV     A,R4
   \   00002A   7001         JNZ     ??ZDP_SimpleDescMsg_1
   \   00002C   ED           MOV     A,R5
   \                     ??ZDP_SimpleDescMsg_1:
   \   00002D   601B         JZ      ??ZDP_SimpleDescMsg_0
    828            {
    829              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    830              len = 1 + 2 + 1 + 8;
    831              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00002F   85..82       MOV     DPL,?V0 + 4
   \   000032   85..83       MOV     DPH,?V0 + 5
   \   000035   12....       LCALL   ??Subroutine104_0 & 0xFFFF
    832            }
   \                     ??CrossCallReturnLabel_145:
   \   000038   FA           MOV     R2,A
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   2A           ADD     A,R2
   \   00003B   C3           CLR     C
   \   00003C   33           RLC     A
   \   00003D   240C         ADD     A,#0xc
   \   00003F   FA           MOV     R2,A
    833            else
    834            {
    835              len = 1 + 2 + 1; // Status + desc length
    836            }
    837            if ( len >= ZDP_BUF_SZ-1 )
   \   000040   C3           CLR     C
   \   000041   944F         SUBB    A,#0x4f
   \   000043   4007         JC      ??ZDP_SimpleDescMsg_2
    838            {
    839              return afStatus_MEM_FAIL;
   \   000045   7910         MOV     R1,#0x10
   \   000047   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    840            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00004A   7A04         MOV     R2,#0x4
    841          
    842            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   00004C   EE           MOV     A,R6
   \   00004D   12....       LCALL   ?Subroutine51 & 0xFFFF
    843          
    844            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_195:
   \   000050   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000053   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    845            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_201:
   \   000056   90....       MOV     DPTR,#(ZDAppNwkAddr + 1)
   \   000059   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00005C   A3           INC     DPTR
    846          
    847            if ( len > 4 )
   \   00005D   EA           MOV     A,R2
   \   00005E   C3           CLR     C
   \   00005F   9405         SUBB    A,#0x5
   \   000061   5003         JNC     $+5
   \   000063   02....       LJMP    ??ZDP_SimpleDescMsg_4 & 0xFFFF
    848            {
    849              *pBuf++ = len - 4;   // Simple descriptor length
   \   000066   74FC         MOV     A,#-0x4
   \   000068   2A           ADD     A,R2
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   08           INC     R0
   \   00006C   08           INC     R0
   \   00006D   A983         MOV     R1,DPH
    850          
    851              *pBuf++ = pSimpleDesc->EndPoint;
   \   00006F   8C82         MOV     DPL,R4
   \   000071   8D83         MOV     DPH,R5
   \   000073   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    852              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_202:
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   A3           INC     DPTR
   \   00007B   8582..       MOV     ?V0 + 2,DPL
   \   00007E   8583..       MOV     ?V0 + 3,DPH
   \   000081   12....       LCALL   ?Subroutine16 & 0xFFFF
    853              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
    854              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_4:
   \   000084   EC           MOV     A,R4
   \   000085   2403         ADD     A,#0x3
   \   000087   F5..         MOV     ?V0 + 2,A
   \   000089   ED           MOV     A,R5
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   F5..         MOV     ?V0 + 3,A
   \   00008E   85..82       MOV     DPL,?V0 + 2
   \   000091   F583         MOV     DPH,A
   \   000093   12....       LCALL   ?Subroutine16 & 0xFFFF
    855              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
    856          
    857              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_5:
   \   000096   8C82         MOV     DPL,R4
   \   000098   8D83         MOV     DPH,R5
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   C4           SWAP    A
   \   0000A1   54F0         ANL     A,#0xf0
   \   0000A3   12....       LCALL   ??Subroutine117_0 & 0xFFFF
    858          
    859              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_206:
   \   0000A6   85..82       MOV     DPL,?V0 + 6
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    860              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_203:
   \   0000AE   85..82       MOV     DPL,?V0 + 6
   \   0000B1   8B83         MOV     DPH,R3
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6033         JZ      ??ZDP_SimpleDescMsg_5
    861              {
    862                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000B6   7B00         MOV     R3,#0x0
   \   0000B8   EC           MOV     A,R4
   \   0000B9   2407         ADD     A,#0x7
   \   0000BB   F5..         MOV     ?V0 + 2,A
   \   0000BD   ED           MOV     A,R5
   \   0000BE   3400         ADDC    A,#0x0
   \   0000C0   85....       MOV     ?V0 + 8,?V0 + 2
   \   0000C3   F5..         MOV     ?V0 + 9,A
   \   0000C5   8015         SJMP    ??CrossCallReturnLabel_36
    863                {
    864                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000C7   EB           MOV     A,R3
   \   0000C8   C3           CLR     C
   \   0000C9   33           RLC     A
   \   0000CA   F5..         MOV     ?V0 + 2,A
   \   0000CC   E4           CLR     A
   \   0000CD   33           RLC     A
   \   0000CE   F5..         MOV     ?V0 + 3,A
   \   0000D0   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000D3   12....       LCALL   ?Subroutine38 & 0xFFFF
    865                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_38:
   \   0000D6   12....       LCALL   ?Subroutine35 & 0xFFFF
    866                }
   \                     ??CrossCallReturnLabel_35:
   \   0000D9   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000DC   85..82       MOV     DPL,?V0 + 6
   \   0000DF   85..83       MOV     DPH,?V0 + 7
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FF           MOV     R7,A
   \   0000E4   EB           MOV     A,R3
   \   0000E5   C3           CLR     C
   \   0000E6   9F           SUBB    A,R7
   \   0000E7   40DE         JC      ??ZDP_SimpleDescMsg_6
    867              }
    868          
    869              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000E9   85..82       MOV     DPL,?V0 + 4
   \   0000EC   85..83       MOV     DPH,?V0 + 5
   \   0000EF   12....       LCALL   ?Subroutine38 & 0xFFFF
    870              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_39:
   \   0000F2   85..82       MOV     DPL,?V0 + 4
   \   0000F5   85..83       MOV     DPH,?V0 + 5
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6038         JZ      ??ZDP_SimpleDescMsg_7
    871              {
    872                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000FB   7B00         MOV     R3,#0x0
   \   0000FD   EC           MOV     A,R4
   \   0000FE   240A         ADD     A,#0xa
   \   000100   FC           MOV     R4,A
   \   000101   ED           MOV     A,R5
   \   000102   3400         ADDC    A,#0x0
   \   000104   FD           MOV     R5,A
   \   000105   8C..         MOV     ?V0 + 2,R4
   \   000107   8D..         MOV     ?V0 + 3,R5
   \                     ??ZDP_SimpleDescMsg_8:
   \   000109   85..82       MOV     DPL,?V0 + 4
   \   00010C   85..83       MOV     DPH,?V0 + 5
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   FC           MOV     R4,A
   \   000111   EB           MOV     A,R3
   \   000112   C3           CLR     C
   \   000113   9C           SUBB    A,R4
   \   000114   501D         JNC     ??ZDP_SimpleDescMsg_7
    873                {
    874                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000116   EB           MOV     A,R3
   \   000117   C3           CLR     C
   \   000118   33           RLC     A
   \   000119   FC           MOV     R4,A
   \   00011A   E4           CLR     A
   \   00011B   33           RLC     A
   \   00011C   FD           MOV     R5,A
   \   00011D   85..82       MOV     DPL,?V0 + 2
   \   000120   85..83       MOV     DPH,?V0 + 3
   \   000123   12....       LCALL   ?Subroutine47 & 0xFFFF
    875                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
    876                }
    877              }
    878            }
   \                     ??CrossCallReturnLabel_56:
   \   000126   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000129   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00012C   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00012F   80D8         SJMP    ??ZDP_SimpleDescMsg_8
    879          
    880            else
    881            {
    882              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   000131   E4           CLR     A
   \   000132   F0           MOVX    @DPTR,A
    883            }
    884          
    885            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000133                ; Setup parameters for call to function fillAndSend
   \   000133   75..04       MOV     ?V0 + 2,#0x4
   \   000136   75..80       MOV     ?V0 + 3,#-0x80
   \   000139   78..         MOV     R0,#?V0 + 2
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013E   EA           MOV     A,R2
   \   00013F   F9           MOV     R1,A
   \   000140   E5..         MOV     A,?V0 + 0
   \   000142   2402         ADD     A,#0x2
   \   000144   FC           MOV     R4,A
   \   000145   E5..         MOV     A,?V0 + 1
   \   000147   3400         ADDC    A,#0x0
   \   000149   FD           MOV     R5,A
   \   00014A   E5..         MOV     A,?V0 + 0
   \   00014C   240F         ADD     A,#0xf
   \   00014E   FA           MOV     R2,A
   \   00014F   E5..         MOV     A,?V0 + 1
   \   000151   3400         ADDC    A,#0x0
   \   000153   FB           MOV     R3,A
   \   000154   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   00015A                REQUIRE ?Subroutine5
   \   00015A                ; // Fall through to label ?Subroutine5
    886          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2C           ADD     A,R4
   \   000002   FF           MOV     R7,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3D           ADDC    A,R5
   \   000006   8F82         MOV     DPL,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   0B           INC     R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   85..82       MOV     DPL,?V0 + 8
   \   000003   85..83       MOV     DPH,?V0 + 9
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V0 + 2
   \   000009   FF           MOV     R7,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V0 + 3
   \   00000E   8F82         MOV     DPL,R7
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   22           RET
    887          
    888          /*********************************************************************
    889           * @fn          ZDP_EPRsp
    890           *
    891           * @brief       This builds and send an endpoint list. Used in
    892           *              Active_EP_rsp and Match_Desc_Rsp
    893           *              message.  This function sends unicast message to the
    894           *              requesting device.
    895           *
    896           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    897           * @param       dstAddr - destination address
    898           * @param       Status - message status (ZDP_SUCCESS or other)
    899           * @param       nwkAddr - Device's short address that this response describes
    900           * @param       Count - number of endpoint/interfaces in list
    901           * @param       pEPIntfList - Array of Endpoint/Interfaces
    902           * @param       SecurityEnable - Security Options
    903           *
    904           * @return      afStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    907                                  byte Status, uint16 nwkAddr, byte Count,
    908                                  uint8 *pEPList,
    909                                  byte SecurityEnable )
    910          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 2,R4
   \   000018   8D..         MOV     ?V0 + 3,R5
   \   00001A   7410         MOV     A,#0x10
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   \   000021   7411         MOV     A,#0x11
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000029   7413         MOV     A,#0x13
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
   \   000030   7414         MOV     A,#0x14
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine28 & 0xFFFF
    911            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_25:
   \   000038   12....       LCALL   ?Subroutine46 & 0xFFFF
    912            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_142:
   \   00003B   75..04       MOV     ?V0 + 0,#0x4
    913            byte txOptions;
    914          
    915            (void)SecurityEnable;  // Intentionally unreferenced parameter
    916          
    917            if ( MsgType == Match_Desc_rsp )
   \   00003E   7406         MOV     A,#0x6
   \   000040   6E           XRL     A,R6
   \   000041   7003         JNZ     ??ZDP_EPRsp_0
   \   000043   7480         MOV     A,#-0x80
   \   000045   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000046   7005         JNZ     ??ZDP_EPRsp_1
    918              txOptions = AF_MSG_ACK_REQUEST;
   \   000048   75..10       MOV     ?V0 + 1,#0x10
   \   00004B   8003         SJMP    ??ZDP_EPRsp_2
    919            else
    920              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
    921          
    922              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000050   ED           MOV     A,R5
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   12....       LCALL   ?Subroutine65 & 0xFFFF
    923            *pBuf++ = LO_UINT16( nwkAddr );
    924            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_292:
   \   000058   A3           INC     DPTR
    925          
    926            *pBuf++ = Count;   // Endpoint/Interface count
   \   000059   EC           MOV     A,R4
   \   00005A   12....       LCALL   ?Subroutine52 & 0xFFFF
    927          
    928            if ( Count )
   \                     ??CrossCallReturnLabel_64:
   \   00005D   6013         JZ      ??ZDP_EPRsp_3
    929            {
    930              len += Count;
   \   00005F   7404         MOV     A,#0x4
   \   000061   2C           ADD     A,R4
   \   000062   F5..         MOV     ?V0 + 0,A
    931              osal_memcpy( pBuf, pEPList, Count );
   \   000064                ; Setup parameters for call to function osal_memcpy
   \   000064   75..00       MOV     ?V0 + 6,#0x0
   \   000067   78..         MOV     R0,#?V0 + 4
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   12....       LCALL   ?Subroutine73 & 0xFFFF
    932            }
   \                     ??CrossCallReturnLabel_134:
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
    933          
    934            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000072   E5..         MOV     A,?V0 + 1
   \   000074   90....       MOV     DPTR,#ZDP_TxOptions
   \   000077   F0           MOVX    @DPTR,A
   \   000078                ; Setup parameters for call to function fillAndSend
   \   000078   8E..         MOV     ?V0 + 4,R6
   \   00007A   8F..         MOV     ?V0 + 5,R7
   \   00007C   78..         MOV     R0,#?V0 + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   A9..         MOV     R1,?V0 + 0
   \   000083   AC..         MOV     R4,?V0 + 2
   \   000085   AD..         MOV     R5,?V0 + 3
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   AA82         MOV     R2,DPL
   \   00008E   AB83         MOV     R3,DPH
   \   000090   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   E4           CLR     A
   \   000097   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   7F07         MOV     R7,#0x7
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   7D00         MOV     R5,#0x0
   \   000002                REQUIRE ??Subroutine102_0
   \   000002                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine103_0
   \   000003                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine127_0
   \   000002                ; // Fall through to label ??Subroutine127_0
    936          
    937          /*********************************************************************
    938           * @fn          ZDP_UserDescRsp
    939           *
    940           * @brief       Build and send the User Decriptor Response.
    941           *
    942           *
    943           * @param       dstAddr - destination address
    944           * @param       nwkAddrOfInterest -
    945           * @param       userDesc -
    946           * @param       SecurityEnable - Security Options
    947           *
    948           * @return      ZStatus_t
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    951                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    952                          byte SecurityEnable )
    953          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   7413         MOV     A,#0x13
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00001E   88..         MOV     ?V0 + 8,R0
   \   000020   89..         MOV     ?V0 + 9,R1
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   000022   12....       LCALL   ?Subroutine11 & 0xFFFF
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    956          
    957            (void)SecurityEnable;  // Intentionally unreferenced parameter
    958          
    959            len += userDesc->len;
   \                     ??CrossCallReturnLabel_190:
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2404         ADD     A,#0x4
   \   00002C   F5..         MOV     ?V0 + 2,A
    960          
    961            *pBuf++ = ZSUCCESS;
   \   00002E   E4           CLR     A
   \   00002F   85..82       MOV     DPL,?V0 + 0
   \   000032   85..83       MOV     DPH,?V0 + 1
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
    962          
    963            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000037   EC           MOV     A,R4
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
    964            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   00003A   ED           MOV     A,R5
   \   00003B   12....       LCALL   ?Subroutine55 & 0xFFFF
    965          
    966            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_73:
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   85..82       MOV     DPL,?V0 + 0
   \   000042   85..83       MOV     DPH,?V0 + 1
   \   000045   12....       LCALL   ?Subroutine55 & 0xFFFF
    967            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_74:
   \   000048   A3           INC     DPTR
   \   000049   A982         MOV     R1,DPL
   \   00004B   AA83         MOV     R2,DPH
   \   00004D   89..         MOV     ?V0 + 4,R1
   \   00004F   8A..         MOV     ?V0 + 5,R2
   \   000051   75..00       MOV     ?V0 + 6,#0x0
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   85..82       MOV     DPL,?V0 + 8
   \   00005C   85..83       MOV     DPH,?V0 + 9
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FC           MOV     R4,A
   \   000061   7D00         MOV     R5,#0x0
   \   000063   AA..         MOV     R2,?V0 + 0
   \   000065   AB..         MOV     R3,?V0 + 1
   \   000067   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
    968          
    969            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00006D                ; Setup parameters for call to function fillAndSend
   \   00006D   75..11       MOV     ?V0 + 0,#0x11
   \   000070   75..80       MOV     ?V0 + 1,#-0x80
   \   000073   78..         MOV     R0,#?V0 + 0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   A9..         MOV     R1,?V0 + 2
   \   00007A   EE           MOV     A,R6
   \   00007B   FC           MOV     R4,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   7401         MOV     A,#0x1
   \   00008F   02....       LJMP    ?Subroutine3 & 0xFFFF
    970          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   8583..       MOV     ?V0 + 1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
    971          
    972          /*********************************************************************
    973           * @fn          ZDP_ServerDiscRsp
    974           *
    975           * @brief       Build and send the Server_Discovery_rsp response.
    976           *
    977           * @param       transID - Transaction sequence number of request.
    978           * @param       dstAddr - Network Destination Address.
    979           * @param       status - Status of response to request.
    980           * @param       aoi - Network Address of Interest of request.
    981           * @param       serverMask - Bit map of service(s) being sought.
    982           * @param       SecurityEnable - Security Options
    983           *
    984           * @return      ZStatus_t
    985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    986          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    987                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    988          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
   \   000014   740D         MOV     A,#0xd
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine124_0 & 0xFFFF
    989            const byte len = 1  + 2;  // status + aoi + mask.
    990            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_266:
   \   00001C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FC           MOV     R4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FD           MOV     R5,A
   \   000024   8C82         MOV     DPL,R4
   \   000026   8D83         MOV     DPH,R5
    991            ZStatus_t stat;
    992          
    993            // Intentionally unreferenced parameters
    994            (void)aoi;
    995            (void)SecurityEnable;
    996          
    997            *pBuf++ = status;
   \   000028   EE           MOV     A,R6
   \   000029   12....       LCALL   ?Subroutine65 & 0xFFFF
    998          
    999            *pBuf++ = LO_UINT16( serverMask );
   1000            *pBuf++ = HI_UINT16( serverMask );
   1001          
   1002            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_293:
   \   00002C   7410         MOV     A,#0x10
   \   00002E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000031   F0           MOVX    @DPTR,A
   1003            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000032                ; Setup parameters for call to function fillAndSend
   \   000032   75..15       MOV     ?V0 + 0,#0x15
   \   000035   75..80       MOV     ?V0 + 1,#-0x80
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7903         MOV     R1,#0x3
   \   00003F   EA           MOV     A,R2
   \   000040   FC           MOV     R4,A
   \   000041   EB           MOV     A,R3
   \   000042   FD           MOV     R5,A
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   1004            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000052   E4           CLR     A
   \   000053   90....       MOV     DPTR,#ZDP_TxOptions
   \   000056   F0           MOVX    @DPTR,A
   1005          
   1006            return ( stat );
   \   000057                REQUIRE ?Subroutine9
   \   000057                ; // Fall through to label ?Subroutine9
   1007          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine94_0 & 0xFFFF
   1008          
   1009          /*********************************************************************
   1010           * @fn          ZDP_GenericRsp
   1011           *
   1012           * @brief       Sends a response message with only the parameter status
   1013           *              byte and the addr of interest for data.
   1014           *              This function sends unicast message to the
   1015           *              requesting device.
   1016           *
   1017           * @param       dstAddr - destination address
   1018           * @param       status  - generic status for response
   1019           * @param       aoi     - address of interest
   1020           * @param       dstAddr - destination address
   1021           * @param       rspId   - response cluster ID
   1022           * @param       SecurityEnable - Security Options
   1023           *
   1024           * @return      afStatus_t
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1027                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1028          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
   \   000014   740B         MOV     A,#0xb
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   00001C   740D         MOV     A,#0xd
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1029            uint8 len;
   1030          
   1031            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1032          
   1033            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_183:
   \   000024   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   1034            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000029   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00002C   A3           INC     DPTR
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   1035            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   00002F   12....       LCALL   ?Subroutine32 & 0xFFFF
   1036          
   1037            // Length byte
   1038            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_33:
   \   000032   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   1039            len = 4;
   1040          
   1041            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000039                ; Setup parameters for call to function fillAndSend
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7904         MOV     R1,#0x4
   \   000040   EA           MOV     A,R2
   \   000041   FC           MOV     R4,A
   \   000042   EB           MOV     A,R3
   \   000043   FD           MOV     R5,A
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   80..         SJMP    ?Subroutine9
   1042          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8C82         MOV     DPL,R4
   \   00000B   22           RET
   1043          
   1044          /*********************************************************************
   1045           * Binding
   1046           */
   1047          /*********************************************************************
   1048           * @fn          ZDP_EndDeviceBindReq
   1049           *
   1050           * @brief       This builds and sends a End_Device_Bind_req message.
   1051           *              This function sends a unicast message.
   1052           *
   1053           * @param       dstAddr - destination address
   1054           * @param       LocalCoordinator - short address of local coordinator
   1055           * @param       epIntf - Endpoint/Interface of Simple Desc
   1056           * @param       ProfileID - Profile ID
   1057           *
   1058           *   The Input cluster list is the opposite of what you would think.
   1059           *   This is the output cluster list of this device
   1060           * @param       NumInClusters - number of input clusters
   1061           * @param       InClusterList - input cluster ID list
   1062           *
   1063           *   The Output cluster list is the opposite of what you would think.
   1064           *   This is the input cluster list of this device
   1065           * @param       NumOutClusters - number of output clusters
   1066           * @param       OutClusterList - output cluster ID list
   1067           *
   1068           * @param       SecurityEnable - Security Options
   1069           *
   1070           * @return      afStatus_t
   1071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1073                                           uint16 LocalCoordinator,
   1074                                           byte endPoint,
   1075                                           uint16 ProfileID,
   1076                                           byte NumInClusters, cId_t *InClusterList,
   1077                                           byte NumOutClusters, cId_t *OutClusterList,
   1078                                           byte SecurityEnable )
   1079          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 14,R2
   \   000007   8B..         MOV     ?V0 + 15,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   \   00000D   89..         MOV     ?V0 + 7,R1
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 2,A
   \   00001F   741B         MOV     A,#0x1b
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 12,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 13,A
   \   00002B   741D         MOV     A,#0x1d
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 3,A
   \   000033   741E         MOV     A,#0x1e
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 10,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 11,A
   1080            uint8 *pBuf = ZDP_TmpBuf;
   \   00003F   12....       LCALL   ?Subroutine29 & 0xFFFF
   1081            uint8 i, len;
   1082            uint8 *ieeeAddr;
   1083          
   1084            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1085          
   1086            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1087            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1088            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \                     ??CrossCallReturnLabel_251:
   \   000042   E5..         MOV     A,?V0 + 3
   \   000044   25..         ADD     A,?V0 + 2
   \   000046   C3           CLR     C
   \   000047   33           RLC     A
   \   000048   240F         ADD     A,#0xf
   \   00004A   F5..         MOV     ?V0 + 6,A
   1089          
   1090            if ( len >= ZDP_BUF_SZ-1 )
   \   00004C   C3           CLR     C
   \   00004D   944F         SUBB    A,#0x4f
   \   00004F   4005         JC      ??ZDP_EndDeviceBindReq_0
   1091            {
   1092              return afStatus_MEM_FAIL;
   \   000051   7910         MOV     R1,#0x10
   \   000053   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1093            }
   1094          
   1095            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000056                ; Setup parameters for call to function NLME_GetShortAddr
   \   000056   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000059   EA           MOV     A,R2
   \   00005A   65..         XRL     A,?V0 + 4
   \   00005C   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00005E   EB           MOV     A,R3
   \   00005F   65..         XRL     A,?V0 + 5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000061   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1096            {
   1097              return afStatus_INVALID_PARAMETER;
   \   000063   7902         MOV     R1,#0x2
   \   000065   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1098            }
   1099          
   1100            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   1101            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000070   E5..         MOV     A,?V0 + 5
   \   000072   12....       LCALL   ?Subroutine60 & 0xFFFF
   1102          
   1103            ieeeAddr = NLME_GetExtAddr();
   1104            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \                     ??CrossCallReturnLabel_84:
   \   000075                ; Setup parameters for call to function sAddrExtCpy
   \   000075                ; Setup parameters for call to function NLME_GetExtAddr
   \   000075   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000078   EA           MOV     A,R2
   \   000079   FC           MOV     R4,A
   \   00007A   EB           MOV     A,R3
   \   00007B   FD           MOV     R5,A
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   ??sAddrExtCpy?relay
   \   000083   8A..         MOV     ?V0 + 4,R2
   \   000085   8B..         MOV     ?V0 + 5,R3
   \   000087   AE..         MOV     R6,?V0 + 4
   \   000089   AF..         MOV     R7,?V0 + 5
   1105          
   1106            *pBuf++ = endPoint;
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   E5..         MOV     A,?V0 + 7
   \   000091   12....       LCALL   ?Subroutine54 & 0xFFFF
   1107          
   1108            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1109            *pBuf++ = HI_UINT16( ProfileID );
   1110          
   1111            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_71:
   \   000094   12....       LCALL   ?Subroutine60 & 0xFFFF
   1112            for ( i = 0; i < NumInClusters; ++i )
   \                     ??CrossCallReturnLabel_85:
   \   000097   7C00         MOV     R4,#0x0
   \   000099   8022         SJMP    ??CrossCallReturnLabel_46
   1113            {
   1114              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_4:
   \   00009B   EC           MOV     A,R4
   \   00009C   C3           CLR     C
   \   00009D   33           RLC     A
   \   00009E   FA           MOV     R2,A
   \   00009F   E4           CLR     A
   \   0000A0   33           RLC     A
   \   0000A1   FB           MOV     R3,A
   \   0000A2   E5..         MOV     A,?V0 + 12
   \   0000A4   2A           ADD     A,R2
   \   0000A5   FA           MOV     R2,A
   \   0000A6   E5..         MOV     A,?V0 + 13
   \   0000A8   3B           ADDC    A,R3
   \   0000A9   FB           MOV     R3,A
   \   0000AA   8A82         MOV     DPL,R2
   \   0000AC   8B83         MOV     DPH,R3
   \   0000AE   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0000B1   E8           MOV     A,R0
   \   0000B2   FE           MOV     R6,A
   \   0000B3   E9           MOV     A,R1
   \   0000B4   FF           MOV     R7,A
   1115              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000B5   8A82         MOV     DPL,R2
   \   0000B7   8B83         MOV     DPH,R3
   \   0000B9   A3           INC     DPTR
   \   0000BA   12....       LCALL   ?Subroutine41 & 0xFFFF
   1116            }
   \                     ??CrossCallReturnLabel_46:
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   A3           INC     DPTR
   \   0000C2   A882         MOV     R0,DPL
   \   0000C4   A983         MOV     R1,DPH
   \   0000C6   EC           MOV     A,R4
   \   0000C7   C3           CLR     C
   \   0000C8   95..         SUBB    A,?V0 + 2
   \   0000CA   40CF         JC      ??ZDP_EndDeviceBindReq_4
   1117          
   1118            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   E5..         MOV     A,?V0 + 3
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   E8           MOV     A,R0
   \   0000D4   FE           MOV     R6,A
   \   0000D5   E9           MOV     A,R1
   \   0000D6   FF           MOV     R7,A
   1119            for ( i = 0; i < NumOutClusters; ++i )
   \   0000D7   7C00         MOV     R4,#0x0
   \   0000D9   8014         SJMP    ??CrossCallReturnLabel_47
   1120            {
   1121              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000DB   EC           MOV     A,R4
   \   0000DC   C3           CLR     C
   \   0000DD   33           RLC     A
   \   0000DE   F8           MOV     R0,A
   \   0000DF   E4           CLR     A
   \   0000E0   33           RLC     A
   \   0000E1   F9           MOV     R1,A
   \   0000E2   E5..         MOV     A,?V0 + 10
   \   0000E4   28           ADD     A,R0
   \   0000E5   F8           MOV     R0,A
   \   0000E6   E5..         MOV     A,?V0 + 11
   \   0000E8   39           ADDC    A,R1
   \   0000E9   12....       LCALL   ?Subroutine26 & 0xFFFF
   1122              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1123            }
   \                     ??CrossCallReturnLabel_20:
   \   0000EC   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000EF   EC           MOV     A,R4
   \   0000F0   C3           CLR     C
   \   0000F1   95..         SUBB    A,?V0 + 3
   \   0000F3   40E6         JC      ??ZDP_EndDeviceBindReq_5
   1124          
   1125            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   0000F5                ; Setup parameters for call to function fillAndSend
   \   0000F5   75..20       MOV     ?V0 + 0,#0x20
   \   0000F8   75..00       MOV     ?V0 + 1,#0x0
   \   0000FB   78..         MOV     R0,#?V0 + 0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   A9..         MOV     R1,?V0 + 6
   \   000102   AC..         MOV     R4,?V0 + 14
   \   000104   AD..         MOV     R5,?V0 + 15
   \   000106   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00010C                REQUIRE ?Subroutine6
   \   00010C                ; // Fall through to label ?Subroutine6
   1126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   0C           INC     R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E5..         MOV     A,?V0 + 2
   \   00000C   22           RET
   1127          
   1128          /*********************************************************************
   1129           * @fn          ZDP_BindUnbindReq
   1130           *
   1131           * @brief       This builds and send a Bind_req or Unbind_req message
   1132           *              Depending on the ClusterID. This function
   1133           *              sends a unicast message to the local coordinator.
   1134           *
   1135           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1136           * @param       dstAddr - destination address of the message
   1137           * @param       SourceAddr - source 64 bit address of the binding
   1138           * @param       SrcEPIntf - Source endpoint/interface
   1139           * @param       ClusterID - Binding cluster ID
   1140           * @param       DestinationAddr - destination 64 bit addr of binding
   1141           * @param       DstEPIntf - destination endpoint/interface
   1142           * @param       SecurityEnable - Security Options
   1143           *
   1144           * @return      afStatus_t
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1147                                        uint8 *SourceAddr, byte SrcEndPoint,
   1148                                        cId_t ClusterID,
   1149                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1150                                        byte SecurityEnable )
   1151          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 12,R4
   \   00000B   8D..         MOV     ?V0 + 13,R5
   \   00000D   89..         MOV     ?V0 + 8,R1
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FC           MOV     R4,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000021   741A         MOV     A,#0x1a
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000029   741C         MOV     A,#0x1c
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 3,A
   1152            uint8 *pBuf = ZDP_TmpBuf;
   \   000031   12....       LCALL   ?Subroutine46 & 0xFFFF
   1153            byte len;
   1154          
   1155            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1156          
   1157            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1158            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_143:
   \   000034   75..0C       MOV     ?V0 + 2,#0xc
   1159            if ( destinationAddr->addrMode == Addr64Bit )
   \   000037   E5..         MOV     A,?V0 + 4
   \   000039   2408         ADD     A,#0x8
   \   00003B   F5..         MOV     ?V0 + 6,A
   \   00003D   E5..         MOV     A,?V0 + 5
   \   00003F   3400         ADDC    A,#0x0
   \   000041   F5..         MOV     ?V0 + 7,A
   \   000043   85..82       MOV     DPL,?V0 + 6
   \   000046   F583         MOV     DPH,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 9,A
   \   00004B   7403         MOV     A,#0x3
   \   00004D   65..         XRL     A,?V0 + 9
   \   00004F   7005         JNZ     ??ZDP_BindUnbindReq_0
   1160              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000051   75..15       MOV     ?V0 + 2,#0x15
   \   000054   8009         SJMP    ??ZDP_BindUnbindReq_1
   1161            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000056   7401         MOV     A,#0x1
   \   000058   65..         XRL     A,?V0 + 9
   \   00005A   7003         JNZ     ??ZDP_BindUnbindReq_1
   1162              len += sizeof ( uint16 );
   \   00005C   75..0E       MOV     ?V0 + 2,#0xe
   1163          
   1164            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00005F                ; Setup parameters for call to function sAddrExtCpy
   \   00005F   12....       LCALL   ?Subroutine75 & 0xFFFF
   1165            *pBuf++ = SrcEndPoint;
   \                     ??CrossCallReturnLabel_103:
   \   000062   E5..         MOV     A,?V0 + 8
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   1166          
   1167            *pBuf++ = LO_UINT16( ClusterID );
   \   000066   EE           MOV     A,R6
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   1168          
   1169            *pBuf++ = HI_UINT16( ClusterID );
   \   000069   EF           MOV     A,R7
   \   00006A   12....       LCALL   ?Subroutine52 & 0xFFFF
   1170            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_65:
   \   00006D   85..82       MOV     DPL,?V0 + 6
   \   000070   85..83       MOV     DPH,?V0 + 7
   \   000073   12....       LCALL   ?Subroutine44 & 0xFFFF
   1171            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_50:
   \   000076   85..82       MOV     DPL,?V0 + 6
   \   000079   85..83       MOV     DPH,?V0 + 7
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FC           MOV     R4,A
   \   00007E   7403         MOV     A,#0x3
   \   000080   6C           XRL     A,R4
   \   000081   700B         JNZ     ??ZDP_BindUnbindReq_2
   1172            {
   1173              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1174              *pBuf = DstEndPoint;
   \   000083                ; Setup parameters for call to function sAddrExtCpy
   \   000083   AC..         MOV     R4,?V0 + 4
   \   000085   AD..         MOV     R5,?V0 + 5
   \   000087   12....       LCALL   ?Subroutine75 & 0xFFFF
   1175            }
   \                     ??CrossCallReturnLabel_104:
   \   00008A   E5..         MOV     A,?V0 + 3
   \   00008C   8017         SJMP    ??CrossCallReturnLabel_147
   1176            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   00008E   7401         MOV     A,#0x1
   \   000090   6C           XRL     A,R4
   \   000091   7013         JNZ     ??ZDP_BindUnbindReq_3
   1177            {
   1178              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000093   85..82       MOV     DPL,?V0 + 4
   \   000096   85..83       MOV     DPH,?V0 + 5
   \   000099   12....       LCALL   ?Subroutine44 & 0xFFFF
   1179              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_51:
   \   00009C   85..82       MOV     DPL,?V0 + 4
   \   00009F   85..83       MOV     DPH,?V0 + 5
   \   0000A2   12....       LCALL   ?Subroutine85 & 0xFFFF
   1180            }
   \                     ??CrossCallReturnLabel_147:
   \   0000A5   F0           MOVX    @DPTR,A
   1181          
   1182            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   0000A6   7410         MOV     A,#0x10
   \   0000A8   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC                ; Setup parameters for call to function fillAndSend
   \   0000AC   78..         MOV     R0,#?V0 + 0
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   A9..         MOV     R1,?V0 + 2
   \   0000B3   AC..         MOV     R4,?V0 + 12
   \   0000B5   AD..         MOV     R5,?V0 + 13
   \   0000B7   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   E4           CLR     A
   \   0000BE   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   02....       LJMP    ??Subroutine99_0 & 0xFFFF
   1183          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine104_0
   \   000001                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET
   1184          
   1185          /*********************************************************************
   1186           * Network Management
   1187           */
   1188          
   1189          /*********************************************************************
   1190           * @fn          ZDP_MgmtNwkDiscReq
   1191           *
   1192           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1193           *              function sends a unicast message.
   1194           *
   1195           * @param       dstAddr - destination address of the message
   1196           * @param       ScanChannels - 32 bit address bit map
   1197           * @param       StartIndex - Starting index within the reporting network
   1198           *                           list
   1199           * @param       SecurityEnable - Security Options
   1200           *
   1201           * @return      afStatus_t
   1202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1203          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1204                                         uint32 ScanChannels,
   1205                                         byte ScanDuration,
   1206                                         byte StartIndex,
   1207                                         byte SecurityEnable )
   1208          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   8C..         MOV     ?V0 + 1,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
   1209            uint8 *pBuf = ZDP_TmpBuf;
   1210            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1211          
   1212            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1213          
   1214            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000017                ; Setup parameters for call to function osal_buffer_uint32
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001C   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00001F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   1215          
   1216            *pBuf++ = ScanDuration;
   \   000026   E5..         MOV     A,?V0 + 0
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   1217            *pBuf = StartIndex;
   \   00002A   E5..         MOV     A,?V0 + 1
   \   00002C   F0           MOVX    @DPTR,A
   1218          
   1219            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00002D                ; Setup parameters for call to function fillAndSend
   \   00002D   75..30       MOV     ?V0 + 2,#0x30
   \   000030   75..00       MOV     ?V0 + 3,#0x0
   \   000033   78..         MOV     R0,#?V0 + 2
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7906         MOV     R1,#0x6
   \   00003A   EE           MOV     A,R6
   \   00003B   FC           MOV     R4,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FD           MOV     R5,A
   \   00003E   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000041   02....       LJMP    ?Subroutine0 & 0xFFFF
   1220          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??osal_buffer_uint32?relay
   \   00000B   7404         MOV     A,#0x4
   \   00000D   22           RET
   1221          
   1222          /*********************************************************************
   1223           * @fn          ZDP_MgmtDirectJoinReq
   1224           *
   1225           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1226           *              function sends a unicast message.
   1227           *
   1228           * @param       dstAddr - destination address of the message
   1229           * @param       deviceAddr - 64 bit IEEE Address
   1230           * @param       SecurityEnable - Security Options
   1231           *
   1232           * @return      afStatus_t
   1233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1234          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1235                                         uint8 *deviceAddr,
   1236                                         byte capInfo,
   1237                                         byte SecurityEnable )
   1238          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   1239            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1240          
   1241            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   12....       LCALL   ?Subroutine24 & 0xFFFF
   1242            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \                     ??CrossCallReturnLabel_17:
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   F0           MOVX    @DPTR,A
   1243          
   1244            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000018                ; Setup parameters for call to function fillAndSend
   \   000018   75..35       MOV     ?V0 + 2,#0x35
   \   00001B                REQUIRE ?Subroutine7
   \   00001B                ; // Fall through to label ?Subroutine7
   1245          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   75..00       MOV     ?V0 + 3,#0x0
   \   000003   78..         MOV     R0,#?V0 + 2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000011   12....       LCALL   ?DEALLOC_XSTACK8
   \   000014   7F04         MOV     R7,#0x4
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
   1246          
   1247          /*********************************************************************
   1248           * @fn          ZDP_MgmtPermitJoinReq
   1249           *
   1250           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1251           *
   1252           * @param       dstAddr - destination address of the message
   1253           * @param       duration - Permit duration
   1254           * @param       TcSignificance - Trust Center Significance
   1255           *
   1256           * @return      afStatus_t
   1257           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1258          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1259                                            byte TcSignificance, byte SecurityEnable )
   1260          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1261            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1262          
   1263            // Build buffer
   1264            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine33 & 0xFFFF
   1265            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_117:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1266          
   1267            // Send the message
   1268            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1269                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0 + 0,#0x36
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
   1270          }
   1271          
   1272          /*********************************************************************
   1273           * @fn          ZDP_MgmtLeaveReq
   1274           *
   1275           * @brief       This builds and send a Mgmt_Leave_req message.
   1276           *
   1277           * @param       dstAddr - destination address of the message
   1278           *              IEEEAddr - IEEE adddress of device that is removed
   1279           *              RemoveChildren - set to 1 to remove the children of the
   1280           *                                device as well. 0 otherwise.
   1281           *              Rejoin - set to 1 if the removed device should rejoin
   1282                                   afterwards. 0 otherwise.
   1283           *
   1284           * @return      afStatus_t
   1285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1286          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1287                           uint8 Rejoin, uint8 SecurityEnable )
   1288          
   1289          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   1290            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1291          
   1292            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000013                ; Setup parameters for call to function sAddrExtCpy
   \   000013   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000016   12....       LCALL   ??sAddrExtCpy?relay
   1293            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   2408         ADD     A,#0x8
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
   1294          
   1295            if ( RemoveChildren == TRUE )
   \   000027   7401         MOV     A,#0x1
   \   000029   65..         XRL     A,?V0 + 0
   \   00002B   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1296            {
   1297              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00002D   7440         MOV     A,#0x40
   \   00002F   F0           MOVX    @DPTR,A
   1298            }
   1299            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000030   7401         MOV     A,#0x1
   \   000032   65..         XRL     A,?V0 + 1
   \   000034   7004         JNZ     ??ZDP_MgmtLeaveReq_1
   1300            {
   1301              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000036   E0           MOVX    A,@DPTR
   \   000037   D2E7         SETB    0xE0 /* A   */.7
   \   000039   F0           MOVX    @DPTR,A
   1302            }
   1303          
   1304            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..34       MOV     ?V0 + 2,#0x34
   \   00003D   02....       LJMP    ?Subroutine7 & 0xFFFF
   1305          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
   1306          
   1307          /*********************************************************************
   1308           * @fn          ZDP_MgmtNwkUpdateReq
   1309           *
   1310           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1311           *              function sends a unicast or broadcast message.
   1312           *
   1313           * @param       dstAddr - destination address of the message
   1314           * @param       ChannelMask - 32 bit address bit map
   1315           * @param       ScanDuration - length of time to spend scanning each channel
   1316           * @param       ScanCount - number of energy scans to be conducted
   1317           * @param       NwkUpdateId - NWk Update Id value
   1318           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1319           *                               bit set in its Node Descriptor
   1320           *
   1321           * @return      afStatus_t
   1322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1323          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1324                                           uint32 ChannelMask,
   1325                                           uint8 ScanDuration,
   1326                                           uint8 ScanCount,
   1327                                           uint8 NwkUpdateId,
   1328                                           uint16 NwkManagerAddr )
   1329          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 8,R2
   \   000007   8B..         MOV     ?V0 + 9,R3
   \   000009   89..         MOV     ?V0 + 4,R1
   \   00000B   8C..         MOV     ?V0 + 6,R4
   \   00000D   8D..         MOV     ?V0 + 5,R5
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   7416         MOV     A,#0x16
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1330            uint8 *pBuf = ZDP_TmpBuf;
   1331            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \                     ??CrossCallReturnLabel_246:
   \   000021   75..05       MOV     ?V0 + 7,#0x5
   1332          
   1333            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000024                ; Setup parameters for call to function osal_buffer_uint32
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000029   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   8A..         MOV     ?V0 + 0,R2
   \   000031   8B..         MOV     ?V0 + 1,R3
   \   000033   A8..         MOV     R0,?V0 + 0
   \   000035   A9..         MOV     R1,?V0 + 1
   1334          
   1335            *pBuf++ = ScanDuration;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E5..         MOV     A,?V0 + 4
   \   00003D   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1336          
   1337            if ( ScanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_192:
   \   000040   A3           INC     DPTR
   \   000041   AB83         MOV     R3,DPH
   \   000043   C3           CLR     C
   \   000044   9406         SUBB    A,#0x6
   \   000046   500B         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1338            {
   1339              // Request is to scan over channelMask
   1340              len += sizeof( uint8 );
   \   000048   75..06       MOV     ?V0 + 7,#0x6
   1341          
   1342              *pBuf++ = ScanCount;
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   E5..         MOV     A,?V0 + 6
   \   000051   802A         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1343            }
   1344            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000053   74FE         MOV     A,#-0x2
   \   000055   65..         XRL     A,?V0 + 4
   \   000057   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000059   74FF         MOV     A,#-0x1
   \   00005B   65..         XRL     A,?V0 + 4
   \   00005D   701F         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1345            {
   1346              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1347              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   00005F   75..06       MOV     ?V0 + 7,#0x6
   1348          
   1349              *pBuf++ = NwkUpdateId;
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   E5..         MOV     A,?V0 + 5
   \   000068   F0           MOVX    @DPTR,A
   \   000069   08           INC     R0
   \   00006A   EB           MOV     A,R3
   \   00006B   F9           MOV     R1,A
   1350          
   1351              if ( ScanDuration == 0xFF )
   \   00006C   74FF         MOV     A,#-0x1
   \   00006E   65..         XRL     A,?V0 + 4
   \   000070   700C         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1352              {
   1353                len += sizeof( uint16 );
   \   000072   75..08       MOV     ?V0 + 7,#0x8
   1354          
   1355                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   000075   EE           MOV     A,R6
   \   000076   8882         MOV     DPL,R0
   \   000078   8983         MOV     DPH,R1
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   1356                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   00007C   EF           MOV     A,R7
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00007D   F0           MOVX    @DPTR,A
   1357              }
   1358            }
   1359          
   1360            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   00007E                ; Setup parameters for call to function fillAndSend
   \   00007E   75..38       MOV     ?V0 + 0,#0x38
   \   000081   75..00       MOV     ?V0 + 1,#0x0
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   A9..         MOV     R1,?V0 + 7
   \   00008B   AC..         MOV     R4,?V0 + 8
   \   00008D   AD..         MOV     R5,?V0 + 9
   \   00008F   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000092   02....       LJMP    ?Subroutine3 & 0xFFFF
   1361          }
   1362          
   1363          
   1364          /*********************************************************************
   1365           * Network Management Responses
   1366           */
   1367          
   1368          /*********************************************************************
   1369           * @fn          ZDP_MgmtNwkDiscRsp
   1370           *
   1371           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1372           *              function sends a unicast message.
   1373           *
   1374           * @param       dstAddr - destination address of the message
   1375           * @param       Status - message status (ZDP_SUCCESS or other)
   1376           * @param       NetworkCount - Total number of networks found
   1377           * @param       StartIndex - Starting index within the reporting network
   1378           *                           list
   1379           * @param       NetworkListCount - number of network lists included
   1380           *                                 in this message
   1381           * @param       NetworkList - List of network descriptors
   1382           * @param       SecurityEnable - Security Options
   1383           *
   1384           * @return      afStatus_t
   1385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine98_0
   \   000002                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1386          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1387                                      byte Status,
   1388                                      byte NetworkCount,
   1389                                      byte StartIndex,
   1390                                      byte NetworkListCount,
   1391                                      networkDesc_t *NetworkList,
   1392                                      byte SecurityEnable )
   1393          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 12,R2
   \   000014   8B..         MOV     ?V0 + 13,R3
   \   000016   8C..         MOV     ?V0 + 10,R4
   \   000018   8D..         MOV     ?V0 + 9,R5
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 4,A
   \   000022   7418         MOV     A,#0x18
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 5,A
   \   00002A   7419         MOV     A,#0x19
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   1394            uint8 *buf;
   1395            uint8 *pBuf;
   1396            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1397            byte idx;
   1398          
   1399            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1400          
   1401            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \                     ??CrossCallReturnLabel_126:
   \   000032   75F00C       MOV     B,#0xc
   \   000035   E5..         MOV     A,?V0 + 5
   \   000037   A4           MUL     AB
   \   000038   2404         ADD     A,#0x4
   \   00003A   F5..         MOV     ?V0 + 8,A
   1402          
   1403            buf = osal_mem_alloc( len+1 );
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   F5..         MOV     ?V0 + 0,A
   \   00003E   7401         MOV     A,#0x1
   \   000040   25..         ADD     A,?V0 + 0
   \   000042   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000045   8A..         MOV     ?V0 + 0,R2
   \   000047   8B..         MOV     ?V0 + 1,R3
   1404            if ( buf == NULL )
   \   000049   EA           MOV     A,R2
   \   00004A   7001         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   \   00004C   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00004D   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_1
   1405            {
   1406              return afStatus_MEM_FAIL;
   \   00004F   7910         MOV     R1,#0x10
   \   000051   02....       LJMP    ??CrossCallReturnLabel_166 & 0xFFFF
   1407            }
   1408          
   1409            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   A3           INC     DPTR
   \   000059   8582..       MOV     ?V0 + 6,DPL
   \   00005C   8583..       MOV     ?V0 + 7,DPH
   1410          
   1411            *pBuf++ = Status;
   \   00005F   E5..         MOV     A,?V0 + 10
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   1412            *pBuf++ = NetworkCount;
   \   000063   E5..         MOV     A,?V0 + 9
   \   000065   12....       LCALL   ?Subroutine50 & 0xFFFF
   1413            *pBuf++ = StartIndex;
   1414            *pBuf++ = NetworkListCount;
   1415          
   1416            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??CrossCallReturnLabel_62:
   \   000068   8019         SJMP    ??ZDP_MgmtNwkDiscRsp_2
   1417            {
   1418              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1419              pBuf += Z_EXTADDR_LEN;
   1420          
   1421              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1422              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1423              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1424              *pBuf    = NetworkList->beaconOrder;                   // Beacon Order
   1425              *pBuf++ |= (byte)(NetworkList->superFrameOrder << 4);  // Superframe Order
   1426          
   1427              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1428              {
   1429                *pBuf++ = TRUE;                         // Permit Joining
   1430              }
   1431              else
   1432              {
   1433                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   00006A   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   0E           INC     R6
   \   000071   E9           MOV     A,R1
   \   000072   FF           MOV     R7,A
   1434              }
   1435          
   1436              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000073   E5..         MOV     A,?V0 + 2
   \   000075   2416         ADD     A,#0x16
   \   000077   F582         MOV     DPL,A
   \   000079   E5..         MOV     A,?V0 + 3
   \   00007B   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00007E   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000081   05..         INC     ?V0 + 4
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000083   E5..         MOV     A,?V0 + 4
   \   000085   C3           CLR     C
   \   000086   95..         SUBB    A,?V0 + 5
   \   000088   4003         JC      $+5
   \   00008A   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   \   00008D                ; Setup parameters for call to function sAddrExtCpy
   \   00008D   E5..         MOV     A,?V0 + 2
   \   00008F   240D         ADD     A,#0xd
   \   000091   FC           MOV     R4,A
   \   000092   E5..         MOV     A,?V0 + 3
   \   000094   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000097   EE           MOV     A,R6
   \   000098   2408         ADD     A,#0x8
   \   00009A   FE           MOV     R6,A
   \   00009B   EF           MOV     A,R7
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   FF           MOV     R7,A
   \   00009F   85..82       MOV     DPL,?V0 + 2
   \   0000A2   85..83       MOV     DPH,?V0 + 3
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000AA   85..82       MOV     DPL,?V0 + 2
   \   0000AD   85..83       MOV     DPH,?V0 + 3
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000B8   EE           MOV     A,R6
   \   0000B9   F8           MOV     R0,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   0E           INC     R6
   \   0000BE   AF83         MOV     R7,DPH
   \   0000C0   85..82       MOV     DPL,?V0 + 2
   \   0000C3   85..83       MOV     DPH,?V0 + 3
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000CC   85..82       MOV     DPL,?V0 + 2
   \   0000CF   85..83       MOV     DPH,?V0 + 3
   \   0000D2   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000D5   08           INC     R0
   \   0000D6   EF           MOV     A,R7
   \   0000D7   F9           MOV     R1,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   0E           INC     R6
   \   0000DA   AF83         MOV     R7,DPH
   \   0000DC   85..82       MOV     DPL,?V0 + 2
   \   0000DF   85..83       MOV     DPH,?V0 + 3
   \   0000E2   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   A983         MOV     R1,DPH
   \   0000EC   85..82       MOV     DPL,?V0 + 2
   \   0000EF   85..83       MOV     DPH,?V0 + 3
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   64FE         XRL     A,#0xfe
   \   0000FE   7004         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   64FF         XRL     A,#0xff
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   000104   7003         JNZ     $+5
   \   000106   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   000109   7401         MOV     A,#0x1
   \   00010B   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1437            }
   1438          
   1439            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   00010E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000111   E5..         MOV     A,?V0 + 6
   \   000113   F0           MOVX    @DPTR,A
   \   000114   A3           INC     DPTR
   \   000115   E5..         MOV     A,?V0 + 7
   \   000117   F0           MOVX    @DPTR,A
   \   000118                ; Setup parameters for call to function fillAndSend
   \   000118   75..30       MOV     ?V0 + 2,#0x30
   \   00011B   75..80       MOV     ?V0 + 3,#-0x80
   \   00011E   78..         MOV     R0,#?V0 + 2
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   A9..         MOV     R1,?V0 + 8
   \   000125   AC..         MOV     R4,?V0 + 12
   \   000127   AD..         MOV     R5,?V0 + 13
   \   000129   7402         MOV     A,#0x2
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   AA82         MOV     R2,DPL
   \   000130   AB83         MOV     R3,DPH
   \   000132   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000135   12....       LCALL   ?DEALLOC_XSTACK8
   \   000138   E9           MOV     A,R1
   \   000139   FE           MOV     R6,A
   \   00013A                ; Setup parameters for call to function osal_mem_free
   \   00013A   AA..         MOV     R2,?V0 + 0
   \   00013C   AB..         MOV     R3,?V0 + 1
   \   00013E   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000141   02....       LJMP    ?Subroutine4 & 0xFFFF
   1440          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine107_0
   \   000004                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ??sAddrExtCpy?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   EE           MOV     A,R6
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V0 + 4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine109_0
   \   000002                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002   3400         ADDC    A,#0x0
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_alloc?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ??osal_mem_free?relay
   \   000003   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000006   74..         MOV     A,#((ZDP_Buf + 1) & 0xff)
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74..         MOV     A,#(((ZDP_Buf + 1) >> 8) & 0xff)
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET
   1441          
   1442          /*********************************************************************
   1443           * @fn          ZDP_MgmtLqiRsp
   1444           *
   1445           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1446           *              function sends a unicast message.
   1447           *
   1448           * @param       dstAddr - destination address of the message
   1449           * @param       Status - message status (ZDP_SUCCESS or other)
   1450           * @param       NeighborLqiEntries - Total number of entries found
   1451           * @param       StartIndex - Starting index within the reporting list
   1452           * @param       NeighborLqiCount - number of lists included
   1453           *                                 in this message
   1454           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1455           *                is the list to be sent, not the entire list
   1456           * @param       SecurityEnable - true if secure
   1457           *
   1458           * @return      ZStatus_t
   1459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1460          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1461                                    byte Status,
   1462                                    byte NeighborLqiEntries,
   1463                                    byte StartIndex,
   1464                                    byte NeighborLqiCount,
   1465                                    ZDP_MgmtLqiItem_t* NeighborList,
   1466                                    byte SecurityEnable )
   1467          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 8,R2
   \   000014   8B..         MOV     ?V0 + 9,R3
   \   000016   8D..         MOV     ?V0 + 14,R5
   \   000018   7418         MOV     A,#0x18
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 4,A
   \   000020   7419         MOV     A,#0x19
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 5,A
   \   000028   741A         MOV     A,#0x1a
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1468            ZDP_MgmtLqiItem_t* list = NeighborList;
   1469            uint8 *buf, *pBuf;
   1470            byte len, x;
   1471          
   1472            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1473          
   1474            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_185:
   \   000030   EC           MOV     A,R4
   \   000031   6022         JZ      ??ZDP_MgmtLqiRsp_0
   1475            {
   1476              ZDP_TmpBuf[0] = Status;
   \   000033   12....       LCALL   ?Subroutine34 & 0xFFFF
   1477              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1478            }
   \                     ??CrossCallReturnLabel_152:
   \   000036   EC           MOV     A,R4
   \   000037   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7901         MOV     R1,#0x1
   \   00003F   AC..         MOV     R4,?V0 + 8
   \   000041   AD..         MOV     R5,?V0 + 9
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   02....       LJMP    ??CrossCallReturnLabel_164 & 0xFFFF
   1479          
   1480            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1481            //  neighbor LQI data.
   1482            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000055   75F016       MOV     B,#0x16
   \   000058   E5..         MOV     A,?V0 + 5
   \   00005A   A4           MUL     AB
   \   00005B   2404         ADD     A,#0x4
   \   00005D   F5..         MOV     ?V0 + 12,A
   1483          
   1484            buf = osal_mem_alloc( len+1 );
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   F5..         MOV     ?V0 + 2,A
   \   000061   7401         MOV     A,#0x1
   \   000063   25..         ADD     A,?V0 + 2
   \   000065   12....       LCALL   ?Subroutine70 & 0xFFFF
   1485            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_96:
   \   000068   7001         JNZ     ??ZDP_MgmtLqiRsp_1
   \   00006A   EB           MOV     A,R3
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00006B   7005         JNZ     ??ZDP_MgmtLqiRsp_2
   1486            {
   1487              return afStatus_MEM_FAIL;
   \   00006D   7910         MOV     R1,#0x10
   \   00006F   02....       LJMP    ??CrossCallReturnLabel_164 & 0xFFFF
   1488            }
   1489          
   1490            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   8582..       MOV     ?V0 + 6,DPL
   \   00007A   8583..       MOV     ?V0 + 7,DPH
   1491          
   1492            *pBuf++ = Status;
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   1493            *pBuf++ = NeighborLqiEntries;
   \   000080   E5..         MOV     A,?V0 + 14
   \   000082   12....       LCALL   ?Subroutine50 & 0xFFFF
   1494            *pBuf++ = StartIndex;
   1495            *pBuf++ = NeighborLqiCount;
   1496          
   1497            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_63:
   \   000085   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1498            {
   1499              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   000088                ; Setup parameters for call to function sAddrExtCpy
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   2402         ADD     A,#0x2
   \   00008C   FC           MOV     R4,A
   \   00008D   E5..         MOV     A,?V0 + 1
   \   00008F   12....       LCALL   ?Subroutine69 & 0xFFFF
   1500              pBuf += Z_EXTADDR_LEN;
   1501          
   1502              // EXTADDR
   1503              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??CrossCallReturnLabel_95:
   \   000092                ; Setup parameters for call to function sAddrExtCpy
   \   000092   E5..         MOV     A,?V0 + 0
   \   000094   240A         ADD     A,#0xa
   \   000096   FC           MOV     R4,A
   \   000097   E5..         MOV     A,?V0 + 1
   \   000099   3400         ADDC    A,#0x0
   \   00009B   FD           MOV     R5,A
   \   00009C   EE           MOV     A,R6
   \   00009D   2408         ADD     A,#0x8
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   3400         ADDC    A,#0x0
   \   0000A3   FB           MOV     R3,A
   \   0000A4   12....       LCALL   ??sAddrExtCpy?relay
   \   0000A7   8A..         MOV     ?V0 + 10,R2
   \   0000A9   8B..         MOV     ?V0 + 11,R3
   \   0000AB   AE..         MOV     R6,?V0 + 10
   \   0000AD   AF..         MOV     R7,?V0 + 11
   1504          
   1505              // NWKADDR
   1506              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000AF   E5..         MOV     A,?V0 + 0
   \   0000B1   2412         ADD     A,#0x12
   \   0000B3   F8           MOV     R0,A
   \   0000B4   E5..         MOV     A,?V0 + 1
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   12....       LCALL   ?Subroutine26 & 0xFFFF
   1507              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   0000BB   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1508          
   1509              // DEVICETYPE
   1510              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_178:
   \   0000BE   2414         ADD     A,#0x14
   \   0000C0   F582         MOV     DPL,A
   \   0000C2   E5..         MOV     A,?V0 + 1
   \   0000C4   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   0000C7   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1511          
   1512              // RXONIDLE
   1513              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_171:
   \   0000CA   E5..         MOV     A,?V0 + 0
   \   0000CC   2415         ADD     A,#0x15
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   E5..         MOV     A,?V0 + 1
   \   0000D2   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000D5   33           RLC     A
   \   0000D6   33           RLC     A
   \   0000D7   54FC         ANL     A,#0xfc
   \   0000D9   FA           MOV     R2,A
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   4A           ORL     A,R2
   \   0000E0   F0           MOVX    @DPTR,A
   1514          
   1515              // RELATIONSHIP
   1516              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000E1   EE           MOV     A,R6
   \   0000E2   F8           MOV     R0,A
   \   0000E3   EF           MOV     A,R7
   \   0000E4   F9           MOV     R1,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   0E           INC     R6
   \   0000E7   AF83         MOV     R7,DPH
   \   0000E9   E5..         MOV     A,?V0 + 0
   \   0000EB   2416         ADD     A,#0x16
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E5..         MOV     A,?V0 + 1
   \   0000F1   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   0000F4   12....       LCALL   ??Subroutine107_0 & 0xFFFF
   1517          
   1518              // PERMITJOINING
   1519              *pBuf++ = (uint8)(list->permit);
   \                     ??CrossCallReturnLabel_161:
   \   0000F7   E5..         MOV     A,?V0 + 0
   \   0000F9   2417         ADD     A,#0x17
   \   0000FB   12....       LCALL   ?Subroutine14 & 0xFFFF
   1520          
   1521              // DEPTH
   1522              *pBuf++ = list->depth;
   1523          
   1524              // LQI
   1525              *pBuf++ = list->lqi;
   1526          
   1527              list++; // next list entry
   1528            }
   \                     ??CrossCallReturnLabel_175:
   \   0000FE   2418         ADD     A,#0x18
   \   000100   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000103   2419         ADD     A,#0x19
   \   000105   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000108   241A         ADD     A,#0x1a
   \   00010A   F5..         MOV     ?V0 + 0,A
   \   00010C   E5..         MOV     A,?V0 + 1
   \   00010E   3400         ADDC    A,#0x0
   \   000110   F5..         MOV     ?V0 + 1,A
   \   000112   05..         INC     ?V0 + 4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000114   E5..         MOV     A,?V0 + 4
   \   000116   C3           CLR     C
   \   000117   95..         SUBB    A,?V0 + 5
   \   000119   5003         JNC     $+5
   \   00011B   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1529          
   1530            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   00011E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000121   E5..         MOV     A,?V0 + 6
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
   \   000125   E5..         MOV     A,?V0 + 7
   \   000127   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012D   A9..         MOV     R1,?V0 + 12
   \   00012F   AC..         MOV     R4,?V0 + 8
   \   000131   AD..         MOV     R5,?V0 + 9
   \   000133   7402         MOV     A,#0x2
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   AA82         MOV     R2,DPL
   \   00013A   AB83         MOV     R3,DPH
   \   00013C   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000145   7401         MOV     A,#0x1
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A   7F0F         MOV     R7,#0xf
   \   00014C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1531          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV     ?V0 + 0,#0x31
   \   000004   75..80       MOV     ?V0 + 1,#-0x80
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E9           MOV     A,R1
   \   000001   FE           MOV     R6,A
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002                ; Setup parameters for call to function osal_mem_free
   \   000002   AA..         MOV     R2,?V0 + 2
   \   000004   AB..         MOV     R3,?V0 + 3
   \   000006                REQUIRE ??Subroutine108_0
   \   000006                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008                REQUIRE ??Subroutine111_0
   \   000008                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET
   1532          
   1533          /*********************************************************************
   1534           * @fn          ZDP_MgmtRtgRsp
   1535           *
   1536           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1537           *              function sends a unicast message.
   1538           *
   1539           * @param       dstAddr - destination address of the message
   1540           * @param       Status - message status (ZDP_SUCCESS or other)
   1541           * @param       RoutingTableEntries - Total number of entries
   1542           * @param       StartIndex - Starting index within the reporting list
   1543           * @param       RoutingTableListCount - number of entries included
   1544           *                                      in this message
   1545           * @param       RoutingTableList - List of Routing Table entries
   1546           * @param       SecurityEnable - true to enable security for this message
   1547           *
   1548           * @return      ZStatus_t
   1549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1550          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1551                                      byte Status,
   1552                                      byte RoutingTableEntries,
   1553                                      byte StartIndex,
   1554                                      byte RoutingListCount,
   1555                                      rtgItem_t *RoutingTableList,
   1556                                      byte SecurityEnable )
   1557          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 6,R2
   \   000014   8B..         MOV     ?V0 + 7,R3
   \   000016   8C..         MOV     ?V0 + 1,R4
   \   000018   8D..         MOV     ?V0 + 0,R5
   \   00001A   7415         MOV     A,#0x15
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 10,A
   \   000022   7416         MOV     A,#0x16
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 5,A
   \   00002A   7417         MOV     A,#0x17
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   1558            uint8 *buf;
   1559            uint8 *pBuf;
   1560            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1561            byte len = 1 + 1 + 1 + 1;
   1562            byte x;
   1563          
   1564            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1565          
   1566            // Add an array for Routing List data
   1567            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \                     ??CrossCallReturnLabel_128:
   \   000032   75F005       MOV     B,#0x5
   \   000035   E5..         MOV     A,?V0 + 5
   \   000037   A4           MUL     AB
   \   000038   2404         ADD     A,#0x4
   \   00003A   F5..         MOV     ?V0 + 4,A
   1568          
   1569            buf = osal_mem_alloc( (short)(len+1) );
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00003F   AE..         MOV     R6,?V0 + 8
   \   000041   AF..         MOV     R7,?V0 + 9
   1570            if ( buf == NULL )
   \   000043   EE           MOV     A,R6
   \   000044   7001         JNZ     ??ZDP_MgmtRtgRsp_0
   \   000046   EF           MOV     A,R7
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000047   7005         JNZ     ??ZDP_MgmtRtgRsp_1
   1571            {
   1572              return afStatus_MEM_FAIL;
   \   000049   7910         MOV     R1,#0x10
   \   00004B   02....       LJMP    ??ZDP_MgmtRtgRsp_2 & 0xFFFF
   1573            }
   1574          
   1575            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   1576          
   1577            *pBuf++ = Status;
   \   000057   E5..         MOV     A,?V0 + 1
   \   000059   12....       LCALL   ?Subroutine59 & 0xFFFF
   1578            *pBuf++ = RoutingTableEntries;
   1579            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_81:
   \   00005C   E5..         MOV     A,?V0 + 10
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   1580            *pBuf++ = RoutingListCount;
   \   000060   E5..         MOV     A,?V0 + 5
   \   000062   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1581          
   1582            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??CrossCallReturnLabel_193:
   \   000065   75..00       MOV     ?V0 + 8,#0x0
   \   000068   8031         SJMP    ??ZDP_MgmtRtgRsp_3
   1583            {
   1584              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   00006A   85..82       MOV     DPL,?V0 + 2
   \   00006D   85..83       MOV     DPH,?V0 + 3
   \   000070   12....       LCALL   ?Subroutine23 & 0xFFFF
   1585              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_15:
   \   000073   12....       LCALL   ?Subroutine37 & 0xFFFF
   1586              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_204:
   \   000076   85..82       MOV     DPL,?V0 + 2
   \   000079   85..83       MOV     DPH,?V0 + 3
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine37 & 0xFFFF
   1587              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??CrossCallReturnLabel_205:
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   2402         ADD     A,#0x2
   \   000087   FC           MOV     R4,A
   \   000088   E5..         MOV     A,?V0 + 3
   \   00008A   12....       LCALL   ?Subroutine17 & 0xFFFF
   1588              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   1589              RoutingTableList++;    // Move to next list entry
   \                     ??CrossCallReturnLabel_7:
   \   00008D   E5..         MOV     A,?V0 + 2
   \   00008F   2406         ADD     A,#0x6
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   E5..         MOV     A,?V0 + 3
   \   000095   3400         ADDC    A,#0x0
   \   000097   F5..         MOV     ?V0 + 3,A
   1590            }
   \   000099   05..         INC     ?V0 + 8
   \                     ??ZDP_MgmtRtgRsp_3:
   \   00009B   E5..         MOV     A,?V0 + 8
   \   00009D   C3           CLR     C
   \   00009E   95..         SUBB    A,?V0 + 5
   \   0000A0   40C8         JC      ??ZDP_MgmtRtgRsp_4
   1591          
   1592            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000A2   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000A5   EA           MOV     A,R2
   \   0000A6   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   0000A9                ; Setup parameters for call to function fillAndSend
   \   0000A9   75..32       MOV     ?V0 + 2,#0x32
   \   0000AC   75..80       MOV     ?V0 + 3,#-0x80
   \   0000AF   78..         MOV     R0,#?V0 + 2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   A9..         MOV     R1,?V0 + 4
   \   0000B6   AC..         MOV     R4,?V0 + 6
   \   0000B8   AD..         MOV     R5,?V0 + 7
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   AA82         MOV     R2,DPL
   \   0000C1   AB83         MOV     R3,DPH
   \   0000C3   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C9   E9           MOV     A,R1
   \   0000CA   F5..         MOV     ?V0 + 2,A
   \   0000CC                ; Setup parameters for call to function osal_mem_free
   \   0000CC   EE           MOV     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   FB           MOV     R3,A
   \   0000D0   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000D3   A9..         MOV     R1,?V0 + 2
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   02....       LJMP    ?Subroutine5 & 0xFFFF
   1593          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine114_0
   \   000001                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F5..         MOV     ?V0 + 8,A
   \   000002   7401         MOV     A,#0x1
   \   000004   25..         ADD     A,?V0 + 8
   \   000006   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000009   8A..         MOV     ?V0 + 8,R2
   \   00000B   8B..         MOV     ?V0 + 9,R3
   \   00000D   22           RET
   1594          
   1595          /*********************************************************************
   1596           * @fn          ZDP_MgmtBindRsp
   1597           *
   1598           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1599           *              function sends a unicast message.
   1600           *
   1601           * @param       dstAddr - destination address of the message
   1602           * @param       Status - message status (ZDP_SUCCESS or other)
   1603           * @param       BindingTableEntries - Total number of entries
   1604           * @param       StartIndex - Starting index within the reporting list
   1605           * @param       BindingTableListCount - number of entries included
   1606           *                                 in this message
   1607           * @param       BindingTableList - List of Binding Table entries
   1608           * @param       SecurityEnable - Security Options
   1609           *
   1610           * @return      ZStatus_t
   1611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1612          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1613                                      byte Status,
   1614                                      byte BindingTableEntries,
   1615                                      byte StartIndex,
   1616                                      byte BindingTableListCount,
   1617                                      apsBindingItem_t *BindingTableList,
   1618                                      byte SecurityEnable )
   1619          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 12,R2
   \   000014   8B..         MOV     ?V0 + 13,R3
   \   000016   8C..         MOV     ?V0 + 10,R4
   \   000018   8D..         MOV     ?V0 + 5,R5
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 0,A
   \   000022   7418         MOV     A,#0x18
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 4,A
   \   00002A   7419         MOV     A,#0x19
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1620            uint8 *buf;
   1621            uint8 *pBuf;
   1622            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1623            uint8 len;    // Actual length varies due to different addrMode
   1624            uint8 x;
   1625            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1626            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1627          
   1628            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1629          
   1630            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1631            maxLen = 1 + 1 + 1 + 1;
   1632            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1633            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \                     ??CrossCallReturnLabel_247:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   75F015       MOV     B,#0x15
   \   000035   E5..         MOV     A,?V0 + 4
   \   000037   A4           MUL     AB
   \   000038   2404         ADD     A,#0x4
   \   00003A   F8           MOV     R0,A
   \   00003B   7401         MOV     A,#0x1
   \   00003D   28           ADD     A,R0
   \   00003E   12....       LCALL   ?Subroutine70 & 0xFFFF
   1634          
   1635            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_97:
   \   000041   7001         JNZ     ??ZDP_MgmtBindRsp_0
   \   000043   EB           MOV     A,R3
   \                     ??ZDP_MgmtBindRsp_0:
   \   000044   7005         JNZ     ??ZDP_MgmtBindRsp_1
   1636            {
   1637              return afStatus_MEM_FAIL;
   \   000046   7910         MOV     R1,#0x10
   \   000048   02....       LJMP    ??CrossCallReturnLabel_165 & 0xFFFF
   1638            }
   1639          
   1640            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   A3           INC     DPTR
   \   000050   8582..       MOV     ?V0 + 6,DPL
   \   000053   8583..       MOV     ?V0 + 7,DPH
   1641          
   1642            *pBuf++ = Status;
   \   000056   E5..         MOV     A,?V0 + 10
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   1643            *pBuf++ = BindingTableEntries;
   \   00005A   E5..         MOV     A,?V0 + 5
   \   00005C   12....       LCALL   ?Subroutine59 & 0xFFFF
   1644            *pBuf++ = StartIndex;
   1645            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_82:
   \   00005F   E5..         MOV     A,?V0 + 4
   \   000061   12....       LCALL   ?Subroutine52 & 0xFFFF
   1646          
   1647            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1648            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1649            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1650            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1651          
   1652            len = 1 + 1 + 1 + 1;
   \                     ??CrossCallReturnLabel_66:
   \   000064   75..04       MOV     ?V0 + 0,#0x4
   1653            for ( x = 0; x < BindingTableListCount; x++ )
   \   000067   75..00       MOV     ?V0 + 1,#0x0
   \   00006A   8023         SJMP    ??ZDP_MgmtBindRsp_2
   1654            {
   1655              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1656              *pBuf++ = BindingTableList->srcEP;
   1657          
   1658              // Cluster ID
   1659              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1660              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1661          
   1662              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1663              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1664              {
   1665                len += extZdpBindEntrySize;
   1666                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1667                *pBuf++ = BindingTableList->dstEP;
   1668              }
   1669              else
   1670              {
   1671                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   00006C   740E         MOV     A,#0xe
   \   00006E   25..         ADD     A,?V0 + 0
   \   000070   F5..         MOV     ?V0 + 0,A
   1672                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   12....       LCALL   ?Subroutine44 & 0xFFFF
   1673                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_52:
   \   000079   8C82         MOV     DPL,R4
   \   00007B   8D83         MOV     DPH,R5
   \   00007D   12....       LCALL   ?Subroutine85 & 0xFFFF
   1674              }
   \                     ??CrossCallReturnLabel_148:
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   0A           INC     R2
   \                     ??ZDP_MgmtBindRsp_4:
   \   000083   AB83         MOV     R3,DPH
   1675              BindingTableList++;    // Move to next list entry
   \   000085   EE           MOV     A,R6
   \   000086   2415         ADD     A,#0x15
   \   000088   FE           MOV     R6,A
   \   000089   EF           MOV     A,R7
   \   00008A   3400         ADDC    A,#0x0
   \   00008C   FF           MOV     R7,A
   \   00008D   05..         INC     ?V0 + 1
   \                     ??ZDP_MgmtBindRsp_2:
   \   00008F   E5..         MOV     A,?V0 + 1
   \   000091   C3           CLR     C
   \   000092   95..         SUBB    A,?V0 + 4
   \   000094   5055         JNC     ??ZDP_MgmtBindRsp_5
   \   000096                ; Setup parameters for call to function sAddrExtCpy
   \   000096   EE           MOV     A,R6
   \   000097   FC           MOV     R4,A
   \   000098   EF           MOV     A,R7
   \   000099   FD           MOV     R5,A
   \   00009A   12....       LCALL   ??sAddrExtCpy?relay
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000AC   AB83         MOV     R3,DPH
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2409         ADD     A,#0x9
   \   0000B1   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0000B4   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   A3           INC     DPTR
   \   0000BC   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000BF   2413         ADD     A,#0x13
   \   0000C1   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0000C4   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000C7   240B         ADD     A,#0xb
   \   0000C9   FC           MOV     R4,A
   \   0000CA   EF           MOV     A,R7
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   FD           MOV     R5,A
   \   0000CE   8882         MOV     DPL,R0
   \   0000D0   8983         MOV     DPH,R1
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6403         XRL     A,#0x3
   \   0000D5   7095         JNZ     ??ZDP_MgmtBindRsp_3
   \   0000D7   7415         MOV     A,#0x15
   \   0000D9   25..         ADD     A,?V0 + 0
   \   0000DB   F5..         MOV     ?V0 + 0,A
   \   0000DD                ; Setup parameters for call to function sAddrExtCpy
   \   0000DD   12....       LCALL   ??sAddrExtCpy?relay
   \   0000E0   EE           MOV     A,R6
   \   0000E1   2414         ADD     A,#0x14
   \   0000E3   12....       LCALL   ?Subroutine71 & 0xFFFF
   1676            }
   \                     ??CrossCallReturnLabel_286:
   \   0000E6   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000E9   8098         SJMP    ??ZDP_MgmtBindRsp_4
   1677          
   1678            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_5:
   \   0000EB   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000EE   E5..         MOV     A,?V0 + 6
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E5..         MOV     A,?V0 + 7
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5                ; Setup parameters for call to function fillAndSend
   \   0000F5   75..33       MOV     ?V0 + 6,#0x33
   \   0000F8   75..80       MOV     ?V0 + 7,#-0x80
   \   0000FB   78..         MOV     R0,#?V0 + 6
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   A9..         MOV     R1,?V0 + 0
   \   000102   AC..         MOV     R4,?V0 + 12
   \   000104   AD..         MOV     R5,?V0 + 13
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   AA82         MOV     R2,DPL
   \   00010D   AB83         MOV     R3,DPH
   \   00010F   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000112   12....       LCALL   ?DEALLOC_XSTACK8
   \   000115   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000118   02....       LJMP    ?Subroutine4 & 0xFFFF
   1679          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   AA82         MOV     R2,DPL
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine126_0
   \   000002                ; // Fall through to label ??Subroutine126_0
   1680          
   1681          /*********************************************************************
   1682           * @fn          ZDP_MgmtNwkUpdateNotify
   1683           *
   1684           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1685           *              function sends a unicast message.
   1686           *
   1687           * @param       dstAddr - destination address of the message
   1688           * @param       status - message status (ZDP_SUCCESS or other)
   1689           * @param       scannedChannels - List of channels scanned by the request
   1690           * @param       totalTransmissions - Total transmissions
   1691           * @param       transmissionFailures - Sum of transmission failures
   1692           * @param       listCount - Number of records contained in the energyValues list
   1693           * @param       energyValues - List of descriptors, one for each of ListCount,
   1694           *                             of the enegry detect descriptors
   1695           * @param       txOptions - Transmit options
   1696           * @param       securityEnable - Security options
   1697           *
   1698           * @return      afStatus_t
   1699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1700          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1701                                              uint8 status, uint32 scannedChannels,
   1702                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1703                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1704                                              uint8 securityEnable )
   1705          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00001B   8C..         MOV     ?V0 + 13,R4
   \   00001D   8D..         MOV     ?V0 + 2,R5
   \   00001F   741B         MOV     A,#0x1b
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?L_MOV_X
   \   000029   741F         MOV     A,#0x1f
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000031   7421         MOV     A,#0x21
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000039   7423         MOV     A,#0x23
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 14,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F5..         MOV     ?V0 + 15,A
   \   000045   7425         MOV     A,#0x25
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0 + 12,A
   1706            uint8 *buf;
   1707            uint8 *pBuf;
   1708            uint8 len;
   1709          
   1710            (void)securityEnable;  // Intentionally unreferenced parameter
   1711          
   1712            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1713            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00004D   740A         MOV     A,#0xa
   \   00004F   25..         ADD     A,?V0 + 2
   \   000051   F5..         MOV     ?V0 + 3,A
   1714          
   1715            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL   ?Subroutine72 & 0xFFFF
   1716            if ( buf == NULL )
   \                     ??CrossCallReturnLabel_99:
   \   000056   EA           MOV     A,R2
   \   000057   7001         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   \   000059   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00005A   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_1
   1717            {
   1718              return afStatus_MEM_FAIL;
   \   00005C   7910         MOV     R1,#0x10
   \   00005E   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_2 & 0xFFFF
   1719            }
   1720          
   1721            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   8582..       MOV     ?V0 + 10,DPL
   \   000069   8583..       MOV     ?V0 + 11,DPH
   1722          
   1723            *pBuf++ = status;
   \   00006C   E5..         MOV     A,?V0 + 13
   \   00006E   12....       LCALL   ?Subroutine52 & 0xFFFF
   1724          
   1725            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_67:
   \   000071                ; Setup parameters for call to function osal_buffer_uint32
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000076   12....       LCALL   ??osal_buffer_uint32?relay
   \   000079   7404         MOV     A,#0x4
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   1726          
   1727            *pBuf++ = LO_UINT16( totalTransmissions );
   \   00007E   EE           MOV     A,R6
   \   00007F   8A82         MOV     DPL,R2
   \   000081   8B83         MOV     DPH,R3
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   1728            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000085   EF           MOV     A,R7
   \   000086   12....       LCALL   ?Subroutine54 & 0xFFFF
   1729          
   1730            *pBuf++ = LO_UINT16( transmissionFailures );
   1731            *pBuf++ = HI_UINT16( transmissionFailures );
   1732          
   1733            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_72:
   \   000089   12....       LCALL   ?Subroutine52 & 0xFFFF
   1734          
   1735            if ( listCount > 0 )
   \                     ??CrossCallReturnLabel_68:
   \   00008C   6016         JZ      ??ZDP_MgmtNwkUpdateNotify_3
   1736              osal_memcpy( pBuf, energyValues, listCount );
   \   00008E                ; Setup parameters for call to function osal_memcpy
   \   00008E   85....       MOV     ?V0 + 4,?V0 + 14
   \   000091   85....       MOV     ?V0 + 5,?V0 + 15
   \   000094   75..00       MOV     ?V0 + 6,#0x0
   \   000097   78..         MOV     R0,#?V0 + 4
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009C   AC..         MOV     R4,?V0 + 2
   \   00009E   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   1737          
   1738            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   0000A4   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000A7   E5..         MOV     A,?V0 + 10
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E5..         MOV     A,?V0 + 11
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   E5..         MOV     A,?V0 + 12
   \   0000B0   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4                ; Setup parameters for call to function fillAndSend
   \   0000B4   75..38       MOV     ?V0 + 0,#0x38
   \   0000B7   75..80       MOV     ?V0 + 1,#-0x80
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   A9..         MOV     R1,?V0 + 3
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FC           MOV     R4,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FD           MOV     R5,A
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   AA82         MOV     R2,DPL
   \   0000D2   AB83         MOV     R3,DPH
   \   0000D4   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV     A,R1
   \   0000DB   FE           MOV     R6,A
   \   0000DC                ; Setup parameters for call to function osal_mem_free
   \   0000DC   AA..         MOV     R2,?V0 + 8
   \   0000DE   AB..         MOV     R3,?V0 + 9
   \   0000E0   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000E3   E4           CLR     A
   \   0000E4   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000E7   F0           MOVX    @DPTR,A
   \   0000E8   EE           MOV     A,R6
   \   0000E9   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   0000EA   7403         MOV     A,#0x3
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF   02....       LJMP    ?Subroutine6 & 0xFFFF
   1739          }
   1740          
   1741          /*********************************************************************
   1742           * Functions to register for ZDO Over-the-air messages
   1743           */
   1744          
   1745          /*********************************************************************
   1746           * @fn          ZDO_RegisterForZDOMsg
   1747           *
   1748           * @brief       Call this function to register of an incoming over
   1749           *              the air ZDO message - probably a response message
   1750           *              but requests can also be received.
   1751           *              Messages are delivered to the task with ZDO_CB_MSG
   1752           *              as the message ID.
   1753           *
   1754           * @param       taskID - Where you would like the message delivered
   1755           * @param       clusterID - What message?
   1756           *
   1757           * @return      ZSuccess - successful, ZMemError if not
   1758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1759          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1760          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   1761            ZDO_MsgCB_t *pList;
   1762            ZDO_MsgCB_t *pLast;
   1763            ZDO_MsgCB_t *pNew;
   1764          
   1765            // Look for duplicate
   1766            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   800C         SJMP    ??ZDO_RegisterForZDOMsg_0
   1767            while ( pList )
   1768            {
   1769              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1770                return ( ZSuccess );
   1771              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000016   E8           MOV     A,R0
   \   000017   FE           MOV     R6,A
   \   000018   E9           MOV     A,R1
   \   000019   FF           MOV     R7,A
   1772              pList = (ZDO_MsgCB_t *)pList->next;
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   7001         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   000026   E9           MOV     A,R1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000027   6021         JZ      ??ZDO_RegisterForZDOMsg_3
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   65..         XRL     A,?V0 + 2
   \   000032   70E2         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   65..         XRL     A,?V0 + 0
   \   00003E   7004         JNZ     ??ZDO_RegisterForZDOMsg_4
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   65..         XRL     A,?V0 + 1
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000044   70D0         JNZ     ??ZDO_RegisterForZDOMsg_1
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000046   7900         MOV     R1,#0x0
   \   000048   804A         SJMP    ??ZDO_RegisterForZDOMsg_6
   1773            }
   1774          
   1775            // Add to the list
   1776            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00004A                ; Setup parameters for call to function osal_mem_alloc
   \   00004A   7A05         MOV     R2,#0x5
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??osal_mem_alloc?relay
   \   000051   8A..         MOV     ?V0 + 4,R2
   \   000053   8B..         MOV     ?V0 + 5,R3
   \   000055   A8..         MOV     R0,?V0 + 4
   \   000057   A9..         MOV     R1,?V0 + 5
   1777            if ( pNew )
   \   000059   E8           MOV     A,R0
   \   00005A   7001         JNZ     ??ZDO_RegisterForZDOMsg_7
   \   00005C   E9           MOV     A,R1
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   00005D   6033         JZ      ??ZDO_RegisterForZDOMsg_8
   1778            {
   1779              pNew->taskID = taskID;
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   12....       LCALL   ?Subroutine61 & 0xFFFF
   1780              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_87:
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E5..         MOV     A,?V0 + 0
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   E5..         MOV     A,?V0 + 1
   \   000073   12....       LCALL   ?Subroutine61 & 0xFFFF
   1781              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_88:
   \   000076   E4           CLR     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   F0           MOVX    @DPTR,A
   1782              if ( zdoMsgCBs )
   \   00007A   90....       MOV     DPTR,#zdoMsgCBs
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   7002         JNZ     ??ZDO_RegisterForZDOMsg_9
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \                     ??ZDO_RegisterForZDOMsg_9:
   \   000082   6009         JZ      ??ZDO_RegisterForZDOMsg_10
   1783              {
   1784                pLast->next = pNew;
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   1785              }
   \                     ??ZDO_RegisterForZDOMsg_11:
   \   000088   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00008B   80B9         SJMP    ??ZDO_RegisterForZDOMsg_5
   1786              else
   1787                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_10:
   \   00008D   90....       MOV     DPTR,#zdoMsgCBs
   \   000090   80F6         SJMP    ??ZDO_RegisterForZDOMsg_11
   1788              return ( ZSuccess );
   1789            }
   1790            else
   1791              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_8:
   \   000092   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000094   02....       LJMP    ?Subroutine1 & 0xFFFF
   1792          }
   1793          
   1794          /*********************************************************************
   1795           * @fn          ZDO_RemoveRegisteredCB
   1796           *
   1797           * @brief       Call this function if you don't want to receive the
   1798           *              incoming message.
   1799           *
   1800           * @param       taskID - Where the messages are being delivered.
   1801           * @param       clusterID - What message?
   1802           *
   1803           * @return      ZSuccess - successful, ZFailure if not found
   1804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1805          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1806          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1807            ZDO_MsgCB_t *pList;
   1808            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1809          
   1810            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1811            while ( pList )
   1812            {
   1813              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1814              {
   1815                if ( pLast )
   1816                {
   1817                  // remove this one from the linked list
   1818                  pLast->next = pList->next;
   1819                }
   1820                else if ( pList->next )
   1821                {
   1822                  // remove the first one from the linked list
   1823                  zdoMsgCBs = pList->next;
   1824                }
   1825                else
   1826                {
   1827                  // remove the only item from the list
   1828                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1829                }
   1830                osal_mem_free( pList );
   1831                return ( ZSuccess );
   1832              }
   1833              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1834              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00001B   7001         JNZ     ??ZDO_RemoveRegisteredCB_2
   \   00001D   E9           MOV     A,R1
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00001E   6049         JZ      ??ZDO_RemoveRegisteredCB_3
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6E           XRL     A,R6
   \   000028   70E6         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6A           XRL     A,R2
   \   000033   7003         JNZ     ??ZDO_RemoveRegisteredCB_4
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000038   70D6         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000041   EC           MOV     A,R4
   \   000042   7001         JNZ     ??ZDO_RemoveRegisteredCB_5
   \   000044   ED           MOV     A,R5
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000045   600A         JZ      ??ZDO_RemoveRegisteredCB_6
   \   000047   8C82         MOV     DPL,R4
   \   000049   8D83         MOV     DPH,R5
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00004B   EA           MOV     A,R2
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   EB           MOV     A,R3
   \   00004F   800C         SJMP    ??ZDO_RemoveRegisteredCB_8
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000051   EA           MOV     A,R2
   \   000052   7001         JNZ     ??ZDO_RemoveRegisteredCB_9
   \   000054   EB           MOV     A,R3
   \                     ??ZDO_RemoveRegisteredCB_9:
   \   000055   90....       MOV     DPTR,#zdoMsgCBs
   \   000058   70F1         JNZ     ??ZDO_RemoveRegisteredCB_7
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E                ; Setup parameters for call to function osal_mem_free
   \   00005E   E8           MOV     A,R0
   \   00005F   FA           MOV     R2,A
   \   000060   E9           MOV     A,R1
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??osal_mem_free?relay
   \   000065   7900         MOV     R1,#0x0
   \   000067   8002         SJMP    ??ZDO_RemoveRegisteredCB_10
   1835            }
   1836          
   1837            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000069   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_10:
   \   00006B   7F01         MOV     R7,#0x1
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1838          }
   1839          
   1840          /*********************************************************************
   1841           * @fn          ZDO_SendMsgCBs
   1842           *
   1843           * @brief       This function sends messages to registered tasks.
   1844           *              Local to ZDO and shouldn't be called outside of ZDO.
   1845           *
   1846           * @param       inMsg - incoming message
   1847           *
   1848           * @return      TRUE if sent to at least 1 task, FALSE if not
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1851          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   1852            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0 + 4,#0x0
   1853            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000012   EA           MOV     A,R2
   \   000013   2410         ADD     A,#0x10
   \   000015   F5..         MOV     ?V0 + 8,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 9,A
   \   00001C   02....       LJMP    ??CrossCallReturnLabel_188 & 0xFFFF
   1854            while ( pList )
   1855            {
   1856              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   85..82       MOV     DPL,?V0 + 0
   \   000022   85..83       MOV     DPH,?V0 + 1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00002B   E5..         MOV     A,?V0 + 2
   \   00002D   240C         ADD     A,#0xc
   \   00002F   F582         MOV     DPL,A
   \   000031   E5..         MOV     A,?V0 + 3
   \   000033   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_SendMsgCBs_1
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_1:
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??ZDO_SendMsgCBs_2 & 0xFFFF
   1857              {
   1858                zdoIncomingMsg_t *msgPtr;
   1859          
   1860                // Send the address to the task
   1861                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000041                ; Setup parameters for call to function osal_msg_allocate
   \   000041   85..82       MOV     DPL,?V0 + 8
   \   000044   85..83       MOV     DPH,?V0 + 9
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   7415         MOV     A,#0x15
   \   00004B   28           ADD     A,R0
   \   00004C   FA           MOV     R2,A
   \   00004D   E4           CLR     A
   \   00004E   3400         ADDC    A,#0x0
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??osal_msg_allocate?relay
   \   000054   8A..         MOV     ?V0 + 6,R2
   \   000056   8B..         MOV     ?V0 + 7,R3
   \   000058   AE..         MOV     R6,?V0 + 6
   \   00005A   AF..         MOV     R7,?V0 + 7
   1862                if ( msgPtr )
   \   00005C   EE           MOV     A,R6
   \   00005D   7001         JNZ     ??ZDO_SendMsgCBs_3
   \   00005F   EF           MOV     A,R7
   \                     ??ZDO_SendMsgCBs_3:
   \   000060   606D         JZ      ??ZDO_SendMsgCBs_2
   1863                {
   1864                  // copy struct
   1865                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   85....       MOV     ?V0 + 4,?V0 + 2
   \   000065   85....       MOV     ?V0 + 5,?V0 + 3
   \   000068   75..00       MOV     ?V0 + 6,#0x0
   \   00006B   78..         MOV     R0,#?V0 + 4
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000070   7C15         MOV     R4,#0x15
   \   000072   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   1866          
   1867                  if ( inMsg->asduLen )
   \   000078   85..82       MOV     DPL,?V0 + 8
   \   00007B   85..83       MOV     DPH,?V0 + 9
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6033         JZ      ??ZDO_SendMsgCBs_4
   1868                  {
   1869                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000081   EE           MOV     A,R6
   \   000082   2415         ADD     A,#0x15
   \   000084   FA           MOV     R2,A
   \   000085   EF           MOV     A,R7
   \   000086   3400         ADDC    A,#0x0
   \   000088   FB           MOV     R3,A
   \   000089   EE           MOV     A,R6
   \   00008A   2413         ADD     A,#0x13
   \   00008C   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00008F   EA           MOV     A,R2
   \   000090   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   1870                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_244:
   \   000093                ; Setup parameters for call to function osal_memcpy
   \   000093   E5..         MOV     A,?V0 + 2
   \   000095   2413         ADD     A,#0x13
   \   000097   F582         MOV     DPL,A
   \   000099   E5..         MOV     A,?V0 + 3
   \   00009B   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   1871                  }
   \                     ??CrossCallReturnLabel_282:
   \   00009E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000A1   78..         MOV     R0,#?V0 + 4
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A6   85..82       MOV     DPL,?V0 + 8
   \   0000A9   85..83       MOV     DPH,?V0 + 9
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FC           MOV     R4,A
   \   0000AE   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   1872          
   1873                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000B4   74D3         MOV     A,#-0x2d
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   F0           MOVX    @DPTR,A
   1874                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000BB                ; Setup parameters for call to function osal_msg_send
   \   0000BB   EE           MOV     A,R6
   \   0000BC   FA           MOV     R2,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   FB           MOV     R3,A
   \   0000BF   85..82       MOV     DPL,?V0 + 0
   \   0000C2   85..83       MOV     DPH,?V0 + 1
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   12....       LCALL   ??osal_msg_send?relay
   1875                  ret = TRUE;
   \   0000CC   75..01       MOV     ?V0 + 4,#0x1
   1876                }
   1877              }
   1878              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_2:
   \   0000CF   85..82       MOV     DPL,?V0 + 0
   \   0000D2   85..83       MOV     DPH,?V0 + 1
   \   0000D5   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1879            }
   \                     ??CrossCallReturnLabel_188:
   \   0000D8   E5..         MOV     A,?V0 + 0
   \   0000DA   7002         JNZ     ??ZDO_SendMsgCBs_5
   \   0000DC   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_SendMsgCBs_5:
   \   0000DE   6003         JZ      $+5
   \   0000E0   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1880            return ( ret );
   \   0000E3   A9..         MOV     R1,?V0 + 4
   \   0000E5   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   1881          }
   1882          
   1883          /*********************************************************************
   1884           * Incoming message processor
   1885           */
   1886          
   1887          /*********************************************************************
   1888           * @fn          ZDP_IncomingData
   1889           *
   1890           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1891           *              from the APS sub-layer to the ZDO.
   1892           *
   1893           * @param       pData - Incoming Message
   1894           *
   1895           * @return      none
   1896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine122_0
   \   000003                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1897          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1898          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1899            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1900            uint8 handled;
   1901            zdoIncomingMsg_t inMsg;
   1902          
   1903            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?Subroutine63 & 0xFFFF
   1904            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_92:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1905            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_296:
   \   000023   EA           MOV     A,R2
   \   000024   2415         ADD     A,#0x15
   \   000026   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000029   C0E0         PUSH    A
   \   00002B   740B         MOV     A,#0xb
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   D0E0         POP     A
   \   000032   12....       LCALL   ?Subroutine63 & 0xFFFF
   1906            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_93:
   \   000035   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000038   740C         MOV     A,#0xc
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1907            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_297:
   \   000040   EA           MOV     A,R2
   \   000041   2419         ADD     A,#0x19
   \   000043   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000046   C0E0         PUSH    A
   \   000048   740E         MOV     A,#0xe
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   1908          
   1909            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000050   EA           MOV     A,R2
   \   000051   241F         ADD     A,#0x1f
   \   000053   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000056   14           DEC     A
   \   000057   C0E0         PUSH    A
   \   000059   7410         MOV     A,#0x10
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
   1910            inMsg.asdu = pData->cmd.Data+1;
   \   000061   EA           MOV     A,R2
   \   000062   2421         ADD     A,#0x21
   \   000064   F8           MOV     R0,A
   \   000065   EB           MOV     A,R3
   \   000066   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   2401         ADD     A,#0x1
   \   00006C   FC           MOV     R4,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   3400         ADDC    A,#0x0
   \   000071   FD           MOV     R5,A
   \   000072   7413         MOV     A,#0x13
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   EC           MOV     A,R4
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   ED           MOV     A,R5
   \   00007B   12....       LCALL   ?Subroutine61 & 0xFFFF
   1911            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_89:
   \   00007E   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C0E0         PUSH    A
   \   000084   740F         MOV     A,#0xf
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
   1912            inMsg.macDestAddr = pData->macDestAddr;
   \   00008C   EA           MOV     A,R2
   \   00008D   2412         ADD     A,#0x12
   \   00008F   F582         MOV     DPL,A
   \   000091   EB           MOV     A,R3
   \   000092   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000095   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000098   7411         MOV     A,#0x11
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   12....       LCALL   ?Subroutine56 & 0xFFFF
   1913          
   1914            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_77:
   \   0000A4   AA82         MOV     R2,DPL
   \   0000A6   AB83         MOV     R3,DPH
   \   0000A8   12....       LCALL   ??ZDO_SendMsgCBs?relay
   \   0000AB   E9           MOV     A,R1
   \   0000AC   FC           MOV     R4,A
   \   0000AD   8001         SJMP    ??ZDP_IncomingData_0
   1915          
   1916          #if (defined MT_ZDO_CB_FUNC)
   1917          #if !defined MT_TASK
   1918            if (zgZdoDirectCB)
   1919          #endif
   1920            {
   1921              MT_ZdoDirectCB( pData, &inMsg );
   1922            }
   1923          #endif
   1924          
   1925            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1926            {
   1927              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1928              {
   1929                zdpMsgProcs[x].pFn( &inMsg );
   1930                return;
   1931              }
   1932              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000AF   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000B0   8E..         MOV     ?V0 + 0,R6
   \   0000B2   75..00       MOV     ?V0 + 1,#0x0
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   78..         MOV     R0,#?V0 + 0
   \   0000B9   12....       LCALL   ?S_SHL
   \   0000BC   E5..         MOV     A,?V0 + 0
   \   0000BE   24..         ADD     A,#(zdpMsgProcs & 0xff)
   \   0000C0   F8           MOV     R0,A
   \   0000C1   E5..         MOV     A,?V0 + 1
   \   0000C3   34..         ADDC    A,#((zdpMsgProcs >> 8) & 0xff)
   \   0000C5   F9           MOV     R1,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   E4           CLR     A
   \   0000CB   93           MOVC    A,@A+DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   93           MOVC    A,@A+DPTR
   \   0000D1   F583         MOV     DPH,A
   \   0000D3   D082         POP     DPL
   \   0000D5   AA82         MOV     R2,DPL
   \   0000D7   AB83         MOV     R3,DPH
   \   0000D9   74FF         MOV     A,#-0x1
   \   0000DB   6A           XRL     A,R2
   \   0000DC   7003         JNZ     ??ZDP_IncomingData_2
   \   0000DE   74FF         MOV     A,#-0x1
   \   0000E0   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   0000E1   602E         JZ      ??ZDP_IncomingData_3
   \   0000E3   740C         MOV     A,#0xc
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   6A           XRL     A,R2
   \   0000EA   7003         JNZ     ??ZDP_IncomingData_4
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   0000EF   70BE         JNZ     ??ZDP_IncomingData_1
   \   0000F1                ; Setup parameters for indirect call
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   AA82         MOV     R2,DPL
   \   0000F9   AB83         MOV     R3,DPH
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   8983         MOV     DPH,R1
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   E4           CLR     A
   \   000102   93           MOVC    A,@A+DPTR
   \   000103   C0E0         PUSH    A
   \   000105   7401         MOV     A,#0x1
   \   000107   93           MOVC    A,@A+DPTR
   \   000108   F583         MOV     DPH,A
   \   00010A   D082         POP     DPL
   \   00010C   12....       LCALL   ?CALL_IND
   \   00010F   8010         SJMP    ??ZDP_IncomingData_5
   1933            }
   1934          
   1935            // Handle unhandled messages
   1936            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000111   EC           MOV     A,R4
   \   000112   700D         JNZ     ??ZDP_IncomingData_5
   1937              ZDApp_InMsgCB( &inMsg );
   \   000114                ; Setup parameters for call to function ZDApp_InMsgCB
   \   000114   85..82       MOV     DPL,?XSP + 0
   \   000117   85..83       MOV     DPH,?XSP + 1
   \   00011A   AA82         MOV     R2,DPL
   \   00011C   AB83         MOV     R3,DPH
   \   00011E   12....       LCALL   ??ZDApp_InMsgCB?relay
   \                     ??ZDP_IncomingData_5:
   \   000121   7415         MOV     A,#0x15
   \   000123   02....       LJMP    ??Subroutine94_0 & 0xFFFF
   1938          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1939          
   1940          /*********************************************************************
   1941          *********************************************************************/
   1942          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     ZDO_RegisterForZDOMsg        1      0     14
       -> osal_mem_alloc          0      0     28
     ZDO_RemoveRegisteredCB       0      0      9
       -> osal_mem_free           0      0     18
     ZDO_SendMsgCBs               1      0     52
       -> osal_msg_allocate       0      0     36
       -> osal_memcpy             0      0     42
       -> osal_memcpy             0      0     42
       -> osal_msg_send           0      0     36
     ZDP_BindUnbindReq            1      0     32
       -> sAddrExtCpy             0      0     44
       -> sAddrExtCpy             2      0     44
       -> fillAndSend             0      0     48
     ZDP_DeviceAnnce              1      0     22
       -> sAddrExtCpy             0      0     38
       -> fillAndSend             0      0     42
     ZDP_EPRsp                    1      0     26
       -> osal_memcpy             0      0     38
       -> fillAndSend             0      0     36
     ZDP_EndDeviceBindReq         1      0     35
       -> NLME_GetShortAddr       0      0     48
       -> NLME_GetExtAddr         0      0     48
       -> sAddrExtCpy             0      0     48
       -> fillAndSend             0      0     52
     ZDP_GenericRsp               1      0     17
       -> fillAndSend             0      0     26
     ZDP_IEEEAddrReq              1      0     21
       -> fillAndSend             0      0     42
     ZDP_IncomingData             1      0     31
       -> ZDO_SendMsgCBs          0      0     62
       -> ZDApp_InMsgCB           0      0     62
     ZDP_MatchDescReq             1      0     28
       -> fillAndSend             0      0     40
     ZDP_MgmtBindRsp              1      0     30
       -> osal_mem_alloc          0      0     46
       -> sAddrExtCpy             0      0     46
       -> sAddrExtCpy             0      0     46
       -> fillAndSend             0      0     50
       -> osal_mem_free           0      0     46
     ZDP_MgmtDirectJoinReq        1      0     15
       -> sAddrExtCpy             0      0     24
       -> fillAndSend             0      0     28
     ZDP_MgmtLeaveReq             1      0     16
       -> sAddrExtCpy             0      0     24
       -> fillAndSend             0      0     28
     ZDP_MgmtLqiRsp               1      0     31
       -> fillAndSend             0      0     52
       -> osal_mem_alloc          0      0     48
       -> sAddrExtCpy             0      0     48
       -> sAddrExtCpy             0      0     48
       -> fillAndSend             0      0     52
       -> osal_mem_free           0      0     48
     ZDP_MgmtNwkDiscReq           1      0     24
       -> osal_buffer_uint32      0      0     40
       -> fillAndSend             0      0     36
     ZDP_MgmtNwkDiscRsp           1      0     30
       -> osal_mem_alloc          0      0     46
       -> sAddrExtCpy             0      0     46
       -> fillAndSend             0      0     50
       -> osal_mem_free           0      0     46
     ZDP_MgmtNwkUpdateNotify      1      0     43
       -> osal_mem_alloc          0      0     54
       -> osal_buffer_uint32      0      0     62
       -> osal_memcpy             0      0     60
       -> fillAndSend             0      0     58
       -> osal_mem_free           0      0     54
     ZDP_MgmtNwkUpdateReq         1      0     28
       -> osal_buffer_uint32      0      0     44
       -> fillAndSend             0      0     40
     ZDP_MgmtPermitJoinReq        1      0     12
       -> fillAndSend             0      0     24
     ZDP_MgmtRtgRsp               1      0     28
       -> osal_mem_alloc          0      0     42
       -> fillAndSend             0      0     46
       -> osal_mem_free           0      0     42
     ZDP_NWKAddrOfInterestReq     1      0     13
       -> fillAndSend             0      0     24
     ZDP_NodeDescMsg              1      0     14
       -> fillAndSend             0      0     24
     ZDP_NwkAddrReq               1      0     25
       -> sAddrExtCmp             0      0     46
       -> sAddrExtCpy             0      0     46
       -> fillAndSend             0      0     50
     ZDP_PowerDescMsg             1      0     14
       -> fillAndSend             0      0     24
     ZDP_SendData                 1      0     21
       -> fillAndSend             0      0     32
     ZDP_ServerDiscReq            1      0     21
       -> fillAndSend             0      0     42
     ZDP_ServerDiscRsp            1      0     17
       -> fillAndSend             0      0     26
     ZDP_SimpleDescMsg            1      0     22
       -> fillAndSend             0      0     44
     ZDP_SimpleDescReq            1      0     13
       -> fillAndSend             0      0     24
     ZDP_UserDescRsp              1      0     25
       -> osal_memcpy             0      0     44
       -> fillAndSend             0      0     42
     ZDP_UserDescSet              1      0     25
       -> osal_memcpy             2      0     46
       -> osal_memset             0      0     40
       -> fillAndSend             0      0     44
     fillAndSend                  1      0     75
       -> osal_memset             0      0     56
       -> AF_DataRequest          0      0     74
     zdpProcessAddrReq            1      0     38
       -> sAddrExtCmp             0      0     72
       -> AssocGetWithExt         0      0     72
       -> AssocGetWithShort       0      0     72
       -> AddrMgrEntryGet         0      0     72
       -> sAddrExtCpy             0      0     72
       -> AssocMakeList           0      0     72
       -> osal_mem_free           0      0     72
       -> fillAndSend             0      0     76


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     ZDP_AF_ENDPOINT                     1
     ZDP_TransID                         1
     ZDP_Buf                            80
     ZDP_TmpBuf                          2
     ZDP_TxOptions                       1
     zdoMsgCBs                           2
     zdpMsgProcs                        48
     fillAndSend                       183
     ?Subroutine0                        8
     ?Subroutine27                      14
     ??Subroutine112_0                   8
     ?Subroutine84                       6
     ZDP_SendData                      111
     ?Subroutine1                        5
     ??Subroutine97_0                    8
     ?Subroutine39                       7
     ?Subroutine28                       8
     ??Subroutine119_0                   6
     ??Subroutine123_0                   3
     ??Subroutine124_0                   4
     ZDP_NWKAddrOfInterestReq           15
     ?Subroutine2                       10
     ??Subroutine92_0                    8
     ??Subroutine93_0                    3
     ??Subroutine94_0                    8
     ?Subroutine18                      14
     ?Subroutine81                       8
     ?Subroutine86                       4
     ?Subroutine90                       9
     ZDP_NwkAddrReq                    118
     ?Subroutine56                       8
     ?Subroutine75                       8
     ?Subroutine11                       3
     ?Subroutine66                       4
     ??Subroutine118_0                   4
     ZDP_IEEEAddrReq                    53
     ?Subroutine8                       11
     ??Subroutine91_0                    4
     ?Subroutine64                       5
     ??Subroutine120_0                   5
     ZDP_MatchDescReq                  232
     ?Subroutine13                      18
     ??Subroutine95_0                    5
     ?Subroutine76                       5
     ??Subroutine101_0                   7
     ?Subroutine59                       7
     ?Subroutine51                       4
     ??Subroutine113_0                   4
     ?Subroutine80                       4
     ??Subroutine115_0                   1
     ??Subroutine116_0                   1
     ??Subroutine117_0                  10
     ZDP_SimpleDescReq                  27
     ?Subroutine32                       7
     ZDP_UserDescSet                   177
     ?Subroutine30                       5
     ??Subroutine102_0                   6
     ZDP_ServerDiscReq                  67
     ?Subroutine53                      17
     ?Subroutine31                       2
     ZDP_DeviceAnnce                    63
     ?Subroutine33                       1
     ??Subroutine96_0                    4
     ?Subroutine24                      15
     ?Subroutine34                       3
     ??Subroutine105_0                   4
     zdpProcessAddrReq                 727
     ?Subroutine12                       3
     ??Subroutine98_0                    3
     ??Subroutine99_0                    5
     ??Subroutine103_0                   6
     ?Subroutine60                       4
     ?Subroutine40                       4
     ?Subroutine78                       5
     ??Subroutine106_0                   7
     ??Subroutine109_0                   1
     ??Subroutine110_0                   7
     ?Subroutine29                       3
     ??Subroutine121_0                   6
     ?Subroutine61                       6
     ??Subroutine122_0                   6
     ??Subroutine127_0                   6
     ZDP_NodeDescMsg                    97
     ?Subroutine10                      19
     ?Subroutine25                       6
     ?Subroutine22                       4
     ?Subroutine77                       8
     ?Subroutine21                       1
     ??Subroutine100_0                   5
     ?Subroutine20                       6
     ?Subroutine58                       4
     ?Subroutine79                       4
     ?Subroutine89                      15
     ?Subroutine15                      27
     ?Subroutine17                      14
     ?Subroutine71                       3
     ??Subroutine125_0                   5
     ZDP_PowerDescMsg                   39
     ZDP_SimpleDescMsg                 346
     ?Subroutine5                        5
     ?Subroutine47                      11
     ?Subroutine38                       4
     ?Subroutine36                       5
     ?Subroutine35                      19
     ?Subroutine16                      13
     ??Subroutine104_0                   6
     ??Subroutine114_0                   4
     ?Subroutine23                      10
     ZDP_EPRsp                         165
     ?Subroutine73                       2
     ?Subroutine46                       3
     ?Subroutine52                       7
     ?Subroutine65                       2
     ?Subroutine3                        3
     ZDP_UserDescRsp                   146
     ?Subroutine55                      13
     ZDP_ServerDiscRsp                  87
     ?Subroutine9                        5
     ZDP_GenericRsp                     85
     ?Subroutine49                      12
     ZDP_EndDeviceBindReq              268
     ?Subroutine6                        5
     ?Subroutine41                       5
     ?Subroutine26                      14
     ?Subroutine83                      11
     ?Subroutine54                      13
     ZDP_BindUnbindReq                 197
     ?Subroutine85                       1
     ?Subroutine44                       4
     ?Subroutine82                      11
     ZDP_MgmtNwkDiscReq                 68
     ?Subroutine45                      14
     ZDP_MgmtDirectJoinReq              27
     ?Subroutine7                       25
     ZDP_MgmtPermitJoinReq              20
     ZDP_MgmtLeaveReq                   64
     ??Subroutine126_0                   8
     ZDP_MgmtNwkUpdateReq              149
     ?Subroutine4                        2
     ZDP_MgmtNwkDiscRsp                324
     ?Subroutine19                       4
     ??Subroutine107_0                  13
     ?Subroutine69                      11
     ??Subroutine108_0                   6
     ?Subroutine50                      15
     ?Subroutine42                       2
     ?Subroutine87                       9
     ?Subroutine88                      14
     ZDP_MgmtLqiRsp                    335
     ?Subroutine62                      10
     ?Subroutine57                       6
     ?Subroutine14                       8
     ??Subroutine111_0                   6
     ?Subroutine70                       9
     ZDP_MgmtRtgRsp                    221
     ?Subroutine37                       1
     ?Subroutine74                       4
     ?Subroutine72                      14
     ZDP_MgmtBindRsp                   283
     ?Subroutine48                       8
     ?Subroutine43                       5
     ?Subroutine68                       2
     ZDP_MgmtNwkUpdateNotify           242
     ZDO_RegisterForZDOMsg             151
     ZDO_RemoveRegisteredCB            112
     ZDO_SendMsgCBs                    232
     ?Subroutine67                       3
     ZDP_IncomingData                  294
     ?Subroutine63                      10
     ?<Initializer for ZDP_TmpBuf>       2
     ??fillAndSend?relay                 6
     ??ZDP_SendData?relay                6
     ??ZDP_NWKAddrOfInterestReq?relay    6
     ??ZDP_NwkAddrReq?relay              6
     ??ZDP_IEEEAddrReq?relay             6
     ??ZDP_MatchDescReq?relay            6
     ??ZDP_SimpleDescReq?relay           6
     ??ZDP_UserDescSet?relay             6
     ??ZDP_ServerDiscReq?relay           6
     ??ZDP_DeviceAnnce?relay             6
     ??zdpProcessAddrReq?relay           6
     ??ZDP_NodeDescMsg?relay             6
     ??ZDP_PowerDescMsg?relay            6
     ??ZDP_SimpleDescMsg?relay           6
     ??ZDP_EPRsp?relay                   6
     ??ZDP_UserDescRsp?relay             6
     ??ZDP_ServerDiscRsp?relay           6
     ??ZDP_GenericRsp?relay              6
     ??ZDP_EndDeviceBindReq?relay        6
     ??ZDP_BindUnbindReq?relay           6
     ??ZDP_MgmtNwkDiscReq?relay          6
     ??ZDP_MgmtDirectJoinReq?relay       6
     ??ZDP_MgmtPermitJoinReq?relay       6
     ??ZDP_MgmtLeaveReq?relay            6
     ??ZDP_MgmtNwkUpdateReq?relay        6
     ??ZDP_MgmtNwkDiscRsp?relay          6
     ??ZDP_MgmtLqiRsp?relay              6
     ??ZDP_MgmtRtgRsp?relay              6
     ??ZDP_MgmtBindRsp?relay             6
     ??ZDP_MgmtNwkUpdateNotify?relay     6
     ??ZDO_RegisterForZDOMsg?relay       6
     ??ZDO_RemoveRegisteredCB?relay      6
     ??ZDO_SendMsgCBs?relay              6
     ??ZDP_IncomingData?relay            6

 
 6 638 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    49 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 893 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
