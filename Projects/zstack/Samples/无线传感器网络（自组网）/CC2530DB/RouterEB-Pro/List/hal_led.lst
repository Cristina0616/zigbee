###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             17/Feb/2013  12:17:00 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\hal\target\C #
#                          C2530EB\hal_led.c                                  #
#    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530À #
#                          ı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sam #
#                          ples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "C:\Documents and     #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\hal\target\ #
#                          CC2530EB\hal_led.c" -D ZIGBEEPRO -D ZTOOL_P1 -D    #
#                          NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D         #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterE #
#                          B-Pro\List\" -lA "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\" #
#                           --diag_suppress Pe001,Pa010 -o "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\Obj\"  #
#                          -e --require_prototypes --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I "C:\Documents  #
#                          and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ #
#                          ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp    #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\SOURCE\" -I      #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\. #
#                          .\ZMAIN\TI2530DB\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "C:\Documents and                   #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I "C:\Documents and         #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "C:\Documents and           #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\List\hal_led.lst                              #
#    Object file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\Obj\hal_led.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\hal\target\CC2530EB\hal_led.c
      1          /**************************************************************************************************
      2            Filename:       hal_led.c
      3            Revised:        $Date: 2009-03-13 05:45:44 -0700 (Fri, 13 Mar 2009) $
      4            Revision:       $Revision: 19408 $
      5          
      6            Description:    This file contains the interface to the HAL LED Service.
      7          
      8          
      9            Copyright 2006-2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           *                                             INCLUDES
     42           ***************************************************************************************************/
     43          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     44          #include "hal_defs.h"
     45          #include "hal_types.h"
     46          #include "hal_drivers.h"
     47          #include "hal_led.h"
     48          #include "osal.h"
     49          #include "hal_board.h"
     50          
     51          /***************************************************************************************************
     52           *                                             CONSTANTS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           *                                              MACROS
     57           ***************************************************************************************************/
     58          
     59          /***************************************************************************************************
     60           *                                              TYPEDEFS
     61           ***************************************************************************************************/
     62          /* LED control structure */
     63          typedef struct {
     64            uint8 mode;       /* Operation mode */
     65            uint8 todo;       /* Blink cycles left */
     66            uint8 onPct;      /* On cycle percentage */
     67            uint16 time;      /* On/off cycle time (msec) */
     68            uint32 next;      /* Time for next change */
     69          } HalLedControl_t;
     70          
     71          typedef struct
     72          {
     73            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     74            uint8           sleepActive;
     75          } HalLedStatus_t;
     76          
     77          
     78          /***************************************************************************************************
     79           *                                           GLOBAL VARIABLES
     80           ***************************************************************************************************/
     81          
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          #if HAL_LED == TRUE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     89          #endif
     90          
     91          #ifdef BLINK_LEDS

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     93          #endif
     94          
     95          /***************************************************************************************************
     96           *                                            LOCAL FUNCTION
     97           ***************************************************************************************************/
     98          #if (HAL_LED == TRUE)
     99          void HalLedUpdate (void);
    100          void HalLedOnOff (uint8 leds, uint8 mode);
    101          #endif /* HAL_LED */
    102          
    103          /***************************************************************************************************
    104           *                                            FUNCTIONS - API
    105           ***************************************************************************************************/
    106          
    107          /***************************************************************************************************
    108           * @fn      HalLedInit
    109           *
    110           * @brief   Initialize LED Service
    111           *
    112           * @param   init - pointer to void that contains the initialized value
    113           *
    114           * @return  None
    115           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalLedInit (void)
   \                     HalLedInit:
    117          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118          #if (HAL_LED == TRUE)
    119            /* Initialize all LEDs to OFF */
    120            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   ??HalLedSet?relay
    121          #endif /* HAL_LED */
    122          #ifdef BLINK_LEDS
    123            /* Initialize sleepActive to FALSE */
    124            HalLedStatusControl.sleepActive = FALSE;
   \   00000B   02....       LJMP    ?Subroutine0 & 0xFFFF
    125          #endif
    126          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E4           CLR     A
   \   000001   90....       MOV     DPTR,#(HalLedStatusControl + 36)
   \   000004                REQUIRE ??Subroutine1_0
   \   000004                ; // Fall through to label ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine2_0
   \   000001                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    127          
    128          /***************************************************************************************************
    129           * @fn      HalLedSet
    130           *
    131           * @brief   Tun ON/OFF/TOGGLE given LEDs
    132           *
    133           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
    134           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
    135           * @return  None
    136           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          uint8 HalLedSet (uint8 leds, uint8 mode)
   \                     HalLedSet:
    138          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 2,R2
    139          
    140          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    141            uint8 led;
    142            HalLedControl_t *sts;
    143          
    144            switch (mode)
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for HalLedSet>_0`:
   \   00000D   01           DB        1
   \   00000E   00           DB        0
   \   00000F   01           DB        1
   \   000010   ....         DW        ??HalLedSet_0
   \   000012   03           DB        3
   \   000013   02           DB        2
   \   000014   ....         DW        ??HalLedSet_1
   \   000016   04           DB        4
   \   000017   ....         DW        ??HalLedSet_2
   \   000019   08           DB        8
   \   00001A   ....         DW        ??HalLedSet_0
   \   00001C   ....         DW        ??HalLedSet_3
    145            {
    146              case HAL_LED_MODE_BLINK:
    147                /* Default blink, 1 time, D% duty cycle */
    148                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1:
   \   00001E                ; Setup parameters for call to function HalLedBlink
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7B05         MOV     R3,#0x5
   \   000024   7A01         MOV     R2,#0x1
   \                     ??HalLedSet_4:
   \   000026   12....       LCALL   ??HalLedBlink?relay
   \   000029   804B         SJMP    ??HalLedSet_3
    149                break;
    150          
    151              case HAL_LED_MODE_FLASH:
    152                /* Default flash, N times, D% duty cycle */
    153                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_2:
   \   00002B                ; Setup parameters for call to function HalLedBlink
   \   00002B   7CE8         MOV     R4,#-0x18
   \   00002D   7D03         MOV     R5,#0x3
   \   00002F   7B05         MOV     R3,#0x5
   \   000031   7A32         MOV     R2,#0x32
   \   000033   80F1         SJMP    ??HalLedSet_4
    154                break;
    155          
    156              case HAL_LED_MODE_ON:
    157              case HAL_LED_MODE_OFF:
    158              case HAL_LED_MODE_TOGGLE:
    159          
    160                led = HAL_LED_1;
   \                     ??HalLedSet_0:
   \   000035   75..01       MOV     ?V0 + 1,#0x1
    161                leds &= HAL_LED_ALL;
   \   000038   53..0F       ANL     ?V0 + 0,#0xf
    162                sts = HalLedStatusControl.HalLedControlTable;
   \   00003B   7E..         MOV     R6,#(HalLedStatusControl & 0xff)
   \   00003D   7F..         MOV     R7,#((HalLedStatusControl >> 8) & 0xff)
   \   00003F   801D         SJMP    ??HalLedSet_5
    163          
    164                while (leds)
    165                {
    166                  if (leds & led)
    167                  {
    168                    if (mode != HAL_LED_MODE_TOGGLE)
    169                    {
    170                      sts->mode = mode;  /* ON or OFF */
    171                    }
    172                    else
    173                    {
    174                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
   \                     ??HalLedSet_6:
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6401         XRL     A,#0x1
   \                     ??HalLedSet_7:
   \   000044   F0           MOVX    @DPTR,A
    175                    }
    176                    HalLedOnOff (led, sts->mode);
   \   000045                ; Setup parameters for call to function HalLedOnOff
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FA           MOV     R2,A
   \   000047   A9..         MOV     R1,?V0 + 1
   \   000049   12....       LCALL   ??HalLedOnOff?relay
    177                    leds ^= led;
   \   00004C   E5..         MOV     A,?V0 + 1
   \   00004E   62..         XRL     ?V0 + 0,A
    178                  }
    179                  led <<= 1;
   \                     ??HalLedSet_8:
   \   000050   E5..         MOV     A,?V0 + 1
   \   000052   C3           CLR     C
   \   000053   33           RLC     A
   \   000054   F5..         MOV     ?V0 + 1,A
    180                  sts++;
   \   000056   EE           MOV     A,R6
   \   000057   2409         ADD     A,#0x9
   \   000059   FE           MOV     R6,A
   \   00005A   EF           MOV     A,R7
   \   00005B   3400         ADDC    A,#0x0
   \   00005D   FF           MOV     R7,A
   \                     ??HalLedSet_5:
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   6014         JZ      ??HalLedSet_3
   \   000062   E5..         MOV     A,?V0 + 1
   \   000064   55..         ANL     A,?V0 + 0
   \   000066   60E8         JZ      ??HalLedSet_8
   \   000068   7408         MOV     A,#0x8
   \   00006A   65..         XRL     A,?V0 + 2
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   60CF         JZ      ??HalLedSet_6
   \   000072   E5..         MOV     A,?V0 + 2
   \   000074   80CE         SJMP    ??HalLedSet_7
    181                }
    182                break;
    183          
    184              default:
    185                break;
    186            }
    187          
    188          #elif (HAL_LED == TRUE)
    189            LedOnOff(leds, mode);
    190          #else
    191            // HAL LED is disabled, suppress unused argument warnings
    192            (void) leds;
    193            (void) mode;
    194          #endif /* BLINK_LEDS && HAL_LED   */
    195          
    196            return ( HalLedState );
   \                     ??HalLedSet_3:
   \   000076   90....       MOV     DPTR,#HalLedState
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   7F03         MOV     R7,#0x3
   \   00007D   02....       LJMP    ?BANKED_LEAVE_XDATA
    197          
    198          }
    199          
    200          /***************************************************************************************************
    201           * @fn      HalLedBlink
    202           *
    203           * @brief   Blink the leds
    204           *
    205           * @param   leds       - bit mask value of leds to be blinked
    206           *          numBlinks  - number of blinks
    207           *          percent    - the percentage in each period where the led
    208           *                       will be on
    209           *          period     - length of each cycle in milliseconds
    210           *
    211           * @return  None
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
   \                     HalLedBlink:
    214          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 3,R2
   \   000009   8B..         MOV     ?V0 + 2,R3
   \   00000B   8C..         MOV     ?V0 + 8,R4
   \   00000D   8D..         MOV     ?V0 + 9,R5
    215          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    216            uint8 led;
    217            HalLedControl_t *sts;
    218          
    219            if (leds && percent && period)
   \   00000F   E9           MOV     A,R1
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   000015   EB           MOV     A,R3
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   00001B   EC           MOV     A,R4
   \   00001C   7001         JNZ     ??HalLedBlink_1
   \   00001E   ED           MOV     A,R5
   \                     ??HalLedBlink_1:
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
    220            {
    221              if (percent < 100)
   \   000024   EB           MOV     A,R3
   \   000025   C3           CLR     C
   \   000026   9464         SUBB    A,#0x64
   \   000028   4003         JC      $+5
   \   00002A   02....       LJMP    ??HalLedBlink_2 & 0xFFFF
    222              {
    223                led = HAL_LED_1;
   \   00002D   75..01       MOV     ?V0 + 1,#0x1
    224                leds &= HAL_LED_ALL;
   \   000030   53..0F       ANL     ?V0 + 0,#0xf
    225                sts = HalLedStatusControl.HalLedControlTable;
   \   000033   7E..         MOV     R6,#(HalLedStatusControl & 0xff)
   \   000035   7F..         MOV     R7,#((HalLedStatusControl >> 8) & 0xff)
   \   000037   806E         SJMP    ??HalLedBlink_3
    226          
    227                while (leds)
    228                {
    229                  if (leds & led)
   \                     ??HalLedBlink_4:
   \   000039   E5..         MOV     A,?V0 + 1
   \   00003B   55..         ANL     A,?V0 + 0
   \   00003D   605A         JZ      ??HalLedBlink_5
    230                  {
    231                    /* Store the current state of the led before going to blinking */
    232                    preBlinkState |= (led & HalLedState);
   \   00003F   90....       MOV     DPTR,#HalLedState
   \   000042   E0           MOVX    A,@DPTR
   \   000043   55..         ANL     A,?V0 + 1
   \   000045   FA           MOV     R2,A
   \   000046   90....       MOV     DPTR,#preBlinkState
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   4A           ORL     A,R2
   \   00004B   F0           MOVX    @DPTR,A
    233          
    234                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \   00004C   E4           CLR     A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   F0           MOVX    @DPTR,A
    235                    sts->time  = period;                              /* Time for one on/off cycle */
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E5..         MOV     A,?V0 + 8
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E5..         MOV     A,?V0 + 9
   \   00005B   F0           MOVX    @DPTR,A
    236                    sts->onPct = percent;                             /* % of cycle LED is on */
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E5..         MOV     A,?V0 + 2
   \   000064   F0           MOVX    @DPTR,A
    237                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   E5..         MOV     A,?V0 + 3
   \   00006C   F0           MOVX    @DPTR,A
    238                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   00006D   7007         JNZ     ??HalLedBlink_6
   \   00006F   7404         MOV     A,#0x4
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   F0           MOVX    @DPTR,A
    239                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_6:
   \   000076                ; Setup parameters for call to function osal_GetSystemClock
   \   000076   12....       LCALL   ??osal_GetSystemClock?relay
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   EA           MOV     A,R2
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   EB           MOV     A,R3
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   EC           MOV     A,R4
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   ED           MOV     A,R5
   \   00008C   F0           MOVX    @DPTR,A
    240                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   E0           MOVX    A,@DPTR
   \   000092   D2E1         SETB    0xE0 /* A   */.1
   \   000094   F0           MOVX    @DPTR,A
    241                    leds ^= led;
   \   000095   E5..         MOV     A,?V0 + 1
   \   000097   62..         XRL     ?V0 + 0,A
    242                  }
    243                  led <<= 1;
   \                     ??HalLedBlink_5:
   \   000099   E5..         MOV     A,?V0 + 1
   \   00009B   C3           CLR     C
   \   00009C   33           RLC     A
   \   00009D   F5..         MOV     ?V0 + 1,A
    244                  sts++;
   \   00009F   EE           MOV     A,R6
   \   0000A0   2409         ADD     A,#0x9
   \   0000A2   FE           MOV     R6,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   3400         ADDC    A,#0x0
   \   0000A6   FF           MOV     R7,A
    245                }
   \                     ??HalLedBlink_3:
   \   0000A7   E5..         MOV     A,?V0 + 0
   \   0000A9   708E         JNZ     ??HalLedBlink_4
    246                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000AB                ; Setup parameters for call to function osal_set_event
   \   0000AB   7A02         MOV     R2,#0x2
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   90....       MOV     DPTR,#Hal_TaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   ??osal_set_event?relay
   \   0000B7   8009         SJMP    ??HalLedBlink_7
    247              }
    248              else
    249              {
    250                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_2:
   \   0000B9                ; Setup parameters for call to function HalLedSet
   \   0000B9   7A01         MOV     R2,#0x1
   \   0000BB   8002         SJMP    ??HalLedBlink_8
    251              }
    252            }
    253            else
    254            {
    255              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0:
   \   0000BD                ; Setup parameters for call to function HalLedSet
   \   0000BD   7A00         MOV     R2,#0x0
   \                     ??HalLedBlink_8:
   \   0000BF   12....       LCALL   ??HalLedSet?relay
    256            }
    257          #elif (HAL_LED == TRUE)
    258            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    259            HalLedOnOff (leds, percent);                              /* Toggle */
    260          #else
    261            // HAL LED is disabled, suppress unused argument warnings
    262            (void) leds;
    263            (void) numBlinks;
    264            (void) percent;
    265            (void) period;
    266          #endif /* BLINK_LEDS && HAL_LED */
    267          }
   \                     ??HalLedBlink_7:
   \   0000C2   7F0A         MOV     R7,#0xa
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          
    269          #if (HAL_LED == TRUE)
    270          /***************************************************************************************************
    271           * @fn      HalLedUpdate
    272           *
    273           * @brief   Update leds to work with blink
    274           *
    275           * @param   none
    276           *
    277           * @return  none
    278           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          void HalLedUpdate (void)
   \                     HalLedUpdate:
    280          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    281            uint8 led;
    282            uint8 pct;
    283            uint8 leds;
    284            HalLedControl_t *sts;
    285            uint32 time;
    286            uint16 next;
    287            uint16 wait;
    288          
    289            next = 0;
   \   00000A   7E00         MOV     R6,#0x0
   \   00000C   7F00         MOV     R7,#0x0
    290            led  = HAL_LED_1;
   \   00000E   75..01       MOV     ?V0 + 14,#0x1
    291            leds = HAL_LED_ALL;
   \   000011   740F         MOV     A,#0xf
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
    292            sts = HalLedStatusControl.HalLedControlTable;
   \   00001A   75....       MOV     ?V0 + 12,#(HalLedStatusControl & 0xff)
   \   00001D   75....       MOV     ?V0 + 13,#((HalLedStatusControl >> 8) & 0xff)
    293          
    294            /* Check if sleep is active or not */
    295            if (!HalLedStatusControl.sleepActive)
   \   000020   90....       MOV     DPTR,#(HalLedStatusControl + 36)
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6003         JZ      $+5
   \   000026   02....       LJMP    ??HalLedUpdate_0 & 0xFFFF
    296            {
    297              while (leds)
    298              {
    299                if (leds & led)
   \                     ??HalLedUpdate_1:
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   55..         ANL     A,?V0 + 14
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??HalLedUpdate_2 & 0xFFFF
    300                {
    301                  if (sts->mode & HAL_LED_MODE_BLINK)
   \   000037   85..82       MOV     DPL,?V0 + 12
   \   00003A   85..83       MOV     DPH,?V0 + 13
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   A2E1         MOV     C,0xE0 /* A   */.1
   \   000040   4003         JC      $+5
   \   000042   02....       LJMP    ??HalLedUpdate_3 & 0xFFFF
    302                  {
    303                    time = osal_GetSystemClock();
   \   000045                ; Setup parameters for call to function osal_GetSystemClock
   \   000045   12....       LCALL   ??osal_GetSystemClock?relay
   \   000048   8A..         MOV     ?V0 + 4,R2
   \   00004A   8B..         MOV     ?V0 + 5,R3
   \   00004C   8C..         MOV     ?V0 + 6,R4
   \   00004E   8D..         MOV     ?V0 + 7,R5
   \   000050   85..82       MOV     DPL,?V0 + 12
   \   000053   85..83       MOV     DPH,?V0 + 13
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?L_MOV_X
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   79..         MOV     R1,#?V0 + 4
   \   000064   12....       LCALL   ?UL_GT
   \   000067   5003         JNC     $+5
   \   000069   02....       LJMP    ??HalLedUpdate_4 & 0xFFFF
    304                    if (time >= sts->next)
    305                    {
    306                      if (sts->mode & HAL_LED_MODE_ON)
   \   00006C   85..82       MOV     DPL,?V0 + 12
   \   00006F   85..83       MOV     DPH,?V0 + 13
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FA           MOV     R2,A
   \   000076   85..82       MOV     DPL,?V0 + 12
   \   000079   85..83       MOV     DPH,?V0 + 13
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007F   502E         JNC     ??HalLedUpdate_5
    307                      {
    308                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
   \   000081   7464         MOV     A,#0x64
   \   000083   C3           CLR     C
   \   000084   9A           SUBB    A,R2
   \   000085   F5..         MOV     ?V0 + 15,A
    309                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
   \   000087   E0           MOVX    A,@DPTR
   \   000088   C2E0         CLR     0xE0 /* A   */.0
   \   00008A   F0           MOVX    @DPTR,A
    310                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
   \   00008B                ; Setup parameters for call to function HalLedOnOff
   \   00008B   7A00         MOV     R2,#0x0
   \   00008D   A9..         MOV     R1,?V0 + 14
   \   00008F   12....       LCALL   ??HalLedOnOff?relay
    311          
    312                        if (!(sts->mode & HAL_LED_MODE_FLASH))
   \   000092   85..82       MOV     DPL,?V0 + 12
   \   000095   85..83       MOV     DPH,?V0 + 13
   \   000098   E0           MOVX    A,@DPTR
   \   000099   A2E2         MOV     C,0xE0 /* A   */.2
   \   00009B   401E         JC      ??HalLedUpdate_6
    313                        {
    314                          sts->todo--;                        /* Not continuous, reduce count */
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   14           DEC     A
   \   0000A0   F0           MOVX    @DPTR,A
    315                          if (!sts->todo)
   \   0000A1   7018         JNZ     ??HalLedUpdate_6
    316                          {
    317                            sts->mode ^= HAL_LED_MODE_BLINK;  /* No more blinks */
   \   0000A3   85..82       MOV     DPL,?V0 + 12
   \   0000A6   85..83       MOV     DPH,?V0 + 13
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   6402         XRL     A,#0x2
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   800C         SJMP    ??HalLedUpdate_6
    318                          }
    319                        }
    320                      }
    321                      else
    322                      {
    323                        pct = sts->onPct;                     /* Percentage of cycle for on */
   \                     ??HalLedUpdate_5:
   \   0000AF   8A..         MOV     ?V0 + 15,R2
    324                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
   \   0000B1   D2E0         SETB    0xE0 /* A   */.0
   \   0000B3   F0           MOVX    @DPTR,A
    325                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
   \   0000B4                ; Setup parameters for call to function HalLedOnOff
   \   0000B4   7A01         MOV     R2,#0x1
   \   0000B6   A9..         MOV     R1,?V0 + 14
   \   0000B8   12....       LCALL   ??HalLedOnOff?relay
    326                      }
    327          
    328                      if (sts->mode & HAL_LED_MODE_BLINK)
   \                     ??HalLedUpdate_6:
   \   0000BB   85..82       MOV     DPL,?V0 + 12
   \   0000BE   85..83       MOV     DPH,?V0 + 13
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000C4   5061         JNC     ??HalLedUpdate_7
    329                      {
    330                        wait = (((uint32)pct * (uint32)sts->time) / 100);
   \   0000C6   85....       MOV     ?V0 + 0,?V0 + 15
   \   0000C9   75..00       MOV     ?V0 + 1,#0x0
   \   0000CC   75..00       MOV     ?V0 + 2,#0x0
   \   0000CF   75..00       MOV     ?V0 + 3,#0x0
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V0 + 8,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F5..         MOV     ?V0 + 9,A
   \   0000DC   75..00       MOV     ?V0 + 10,#0x0
   \   0000DF   75..00       MOV     ?V0 + 11,#0x0
   \   0000E2   78..         MOV     R0,#?V0 + 0
   \   0000E4   79..         MOV     R1,#?V0 + 8
   \   0000E6   12....       LCALL   ?L_MUL
   \   0000E9   90....       MOV     DPTR,#__Constant_64
   \   0000EC   78..         MOV     R0,#?V0 + 8
   \   0000EE   12....       LCALL   ?L_MOV_X
   \   0000F1   78..         MOV     R0,#?V0 + 0
   \   0000F3   79..         MOV     R1,#?V0 + 8
   \   0000F5   12....       LCALL   ?UL_DIV_MOD
    331                        sts->next = time + wait;
   \   0000F8   85....       MOV     ?V0 + 8,?V0 + 0
   \   0000FB   85....       MOV     ?V0 + 9,?V0 + 1
   \   0000FE   75..00       MOV     ?V0 + 10,#0x0
   \   000101   75..00       MOV     ?V0 + 11,#0x0
   \   000104   78..         MOV     R0,#?V0 + 4
   \   000106   79..         MOV     R1,#?V0 + 8
   \   000108   12....       LCALL   ?L_ADD
   \   00010B   85..82       MOV     DPL,?V0 + 12
   \   00010E   85..83       MOV     DPH,?V0 + 13
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   E5..         MOV     A,?V0 + 4
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   E5..         MOV     A,?V0 + 5
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   A3           INC     DPTR
   \   00011E   E5..         MOV     A,?V0 + 6
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E5..         MOV     A,?V0 + 7
   \                     ??HalLedUpdate_8:
   \   000124   F0           MOVX    @DPTR,A
   \   000125   8032         SJMP    ??HalLedUpdate_9
    332                      }
    333                      else
    334                      {
    335                        /* no more blink, no more wait */
    336                        wait = 0;
   \                     ??HalLedUpdate_7:
   \   000127   75..00       MOV     ?V0 + 0,#0x0
   \   00012A   75..00       MOV     ?V0 + 1,#0x0
    337                        /* After blinking, set the LED back to the state before it blinks */
    338                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
   \   00012D   90....       MOV     DPTR,#preBlinkState
   \   000130   E0           MOVX    A,@DPTR
   \   000131   55..         ANL     A,?V0 + 14
   \   000133   6004         JZ      ??HalLedUpdate_10
   \   000135   7A01         MOV     R2,#0x1
   \   000137   8002         SJMP    ??HalLedUpdate_11
   \                     ??HalLedUpdate_10:
   \   000139   7A00         MOV     R2,#0x0
   \                     ??HalLedUpdate_11:
   \   00013B                ; Setup parameters for call to function HalLedSet
   \   00013B   A9..         MOV     R1,?V0 + 14
   \   00013D   12....       LCALL   ??HalLedSet?relay
    339                        /* Clear the saved bit */
    340                        preBlinkState &= (led ^ 0xFF);
   \   000140   74FF         MOV     A,#-0x1
   \   000142   65..         XRL     A,?V0 + 14
   \   000144   FA           MOV     R2,A
   \   000145   90....       MOV     DPTR,#preBlinkState
   \   000148   E0           MOVX    A,@DPTR
   \   000149   5A           ANL     A,R2
   \   00014A   80D8         SJMP    ??HalLedUpdate_8
    341                      }
    342                    }
    343                    else
    344                    {
    345                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_4:
   \   00014C   E5..         MOV     A,?V0 + 0
   \   00014E   C3           CLR     C
   \   00014F   95..         SUBB    A,?V0 + 4
   \   000151   F5..         MOV     ?V0 + 0,A
   \   000153   E5..         MOV     A,?V0 + 1
   \   000155   95..         SUBB    A,?V0 + 5
   \   000157   F5..         MOV     ?V0 + 1,A
    346                    }
    347          
    348                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_9:
   \   000159   EE           MOV     A,R6
   \   00015A   7001         JNZ     ??HalLedUpdate_12
   \   00015C   EF           MOV     A,R7
   \                     ??HalLedUpdate_12:
   \   00015D   6011         JZ      ??HalLedUpdate_13
   \   00015F   E5..         MOV     A,?V0 + 0
   \   000161   7002         JNZ     ??HalLedUpdate_14
   \   000163   E5..         MOV     A,?V0 + 1
   \                     ??HalLedUpdate_14:
   \   000165   600D         JZ      ??HalLedUpdate_3
   \   000167   C3           CLR     C
   \   000168   E5..         MOV     A,?V0 + 0
   \   00016A   9E           SUBB    A,R6
   \   00016B   E5..         MOV     A,?V0 + 1
   \   00016D   9F           SUBB    A,R7
   \   00016E   5004         JNC     ??HalLedUpdate_3
    349                    {
    350                      next = wait;
   \                     ??HalLedUpdate_13:
   \   000170   AE..         MOV     R6,?V0 + 0
   \   000172   AF..         MOV     R7,?V0 + 1
    351                    }
    352                  }
    353                  leds ^= led;
   \                     ??HalLedUpdate_3:
   \   000174   85..82       MOV     DPL,?XSP + 0
   \   000177   85..83       MOV     DPH,?XSP + 1
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   65..         XRL     A,?V0 + 14
   \   00017D   F0           MOVX    @DPTR,A
    354                }
    355                led <<= 1;
   \                     ??HalLedUpdate_2:
   \   00017E   E5..         MOV     A,?V0 + 14
   \   000180   C3           CLR     C
   \   000181   33           RLC     A
   \   000182   F5..         MOV     ?V0 + 14,A
    356                sts++;
   \   000184   E5..         MOV     A,?V0 + 12
   \   000186   2409         ADD     A,#0x9
   \   000188   F5..         MOV     ?V0 + 12,A
   \   00018A   E5..         MOV     A,?V0 + 13
   \   00018C   3400         ADDC    A,#0x0
   \   00018E   F5..         MOV     ?V0 + 13,A
    357              }
   \   000190   E0           MOVX    A,@DPTR
   \   000191   6003         JZ      $+5
   \   000193   02....       LJMP    ??HalLedUpdate_1 & 0xFFFF
    358          
    359              if (next)
   \   000196   EE           MOV     A,R6
   \   000197   7001         JNZ     ??HalLedUpdate_15
   \   000199   EF           MOV     A,R7
   \                     ??HalLedUpdate_15:
   \   00019A   6010         JZ      ??HalLedUpdate_0
    360              {
    361                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   00019C                ; Setup parameters for call to function osal_start_timerEx
   \   00019C   EE           MOV     A,R6
   \   00019D   FC           MOV     R4,A
   \   00019E   EF           MOV     A,R7
   \   00019F   FD           MOV     R5,A
   \   0001A0   7A02         MOV     R2,#0x2
   \   0001A2   7B00         MOV     R3,#0x0
   \   0001A4   90....       MOV     DPTR,#Hal_TaskID
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F9           MOV     R1,A
   \   0001A9   12....       LCALL   ??osal_start_timerEx?relay
    362              }
    363            }
    364          }
   \                     ??HalLedUpdate_0:
   \   0001AC   7401         MOV     A,#0x1
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B1   7F10         MOV     R7,#0x10
   \   0001B3   02....       LJMP    ?BANKED_LEAVE_XDATA
    365          
    366          /***************************************************************************************************
    367           * @fn      HalLedOnOff
    368           *
    369           * @brief   Turns specified LED ON or OFF
    370           *
    371           * @param   leds - LED bit mask
    372           *          mode - LED_ON,LED_OFF,
    373           *
    374           * @return  none
    375           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          void HalLedOnOff (uint8 leds, uint8 mode)
   \                     HalLedOnOff:
    377          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378            if (leds & HAL_LED_1)
   \   000004   E9           MOV     A,R1
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   500B         JNC     ??HalLedOnOff_0
    379            {
    380              if (mode == HAL_LED_MODE_ON)
   \   000009   7401         MOV     A,#0x1
   \   00000B   6A           XRL     A,R2
   \   00000C   7004         JNZ     ??HalLedOnOff_1
    381              {
    382                HAL_TURN_ON_LED1();
   \   00000E   D290         SETB    0x90.0
   \   000010   8002         SJMP    ??HalLedOnOff_0
    383              }
    384              else
    385              {
    386                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1:
   \   000012   C290         CLR     0x90.0
    387              }
    388            }
    389          
    390            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0:
   \   000014   E9           MOV     A,R1
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500B         JNC     ??HalLedOnOff_2
    391            {
    392              if (mode == HAL_LED_MODE_ON)
   \   000019   7401         MOV     A,#0x1
   \   00001B   6A           XRL     A,R2
   \   00001C   7004         JNZ     ??HalLedOnOff_3
    393              {
    394                HAL_TURN_ON_LED2();
   \   00001E   D291         SETB    0x90.1
   \   000020   8002         SJMP    ??HalLedOnOff_2
    395              }
    396              else
    397              {
    398                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3:
   \   000022   C291         CLR     0x90.1
    399              }
    400            }
    401          
    402            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2:
   \   000024   E9           MOV     A,R1
   \   000025   A2E2         MOV     C,0xE0 /* A   */.2
   \   000027   500B         JNC     ??HalLedOnOff_4
    403            {
    404              if (mode == HAL_LED_MODE_ON)
   \   000029   7401         MOV     A,#0x1
   \   00002B   6A           XRL     A,R2
   \   00002C   7004         JNZ     ??HalLedOnOff_5
    405              {
    406                HAL_TURN_ON_LED3();
   \   00002E   D294         SETB    0x90.4
   \   000030   8002         SJMP    ??HalLedOnOff_4
    407              }
    408              else
    409              {
    410                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5:
   \   000032   C294         CLR     0x90.4
    411              }
    412            }
    413          
    414            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4:
   \   000034   E9           MOV     A,R1
   \   000035   A2E3         MOV     C,0xE0 /* A   */.3
   \   000037   500B         JNC     ??HalLedOnOff_6
    415            {
    416              if (mode == HAL_LED_MODE_ON)
   \   000039   7401         MOV     A,#0x1
   \   00003B   6A           XRL     A,R2
   \   00003C   7004         JNZ     ??HalLedOnOff_7
    417              {
    418                HAL_TURN_ON_LED4();
   \   00003E   D290         SETB    0x90.0
   \   000040   8005         SJMP    ??HalLedOnOff_8
    419              }
    420              else
    421              {
    422                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7:
   \   000042   C290         CLR     0x90.0
    423              }
    424            }
    425          
    426            /* Remember current state */
    427            if (mode)
   \                     ??HalLedOnOff_6:
   \   000044   EA           MOV     A,R2
   \   000045   6007         JZ      ??HalLedOnOff_9
    428            {
    429              HalLedState |= leds;
   \                     ??HalLedOnOff_8:
   \   000047   90....       MOV     DPTR,#HalLedState
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   49           ORL     A,R1
   \   00004C   8009         SJMP    ??HalLedOnOff_10
    430            }
    431            else
    432            {
    433              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_9:
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   69           XRL     A,R1
   \   000051   FB           MOV     R3,A
   \   000052   90....       MOV     DPTR,#HalLedState
   \   000055   E0           MOVX    A,@DPTR
   \   000056   5B           ANL     A,R3
    434            }
   \                     ??HalLedOnOff_10:
   \   000057   80..         SJMP    ??Subroutine1_0
   \   000059                REQUIRE _A_P1
    435          }
    436          #endif /* HAL_LED */
    437          
    438          /***************************************************************************************************
    439           * @fn      HalGetLedState
    440           *
    441           * @brief   Dim LED2 - Dim (set level) of LED2
    442           *
    443           * @param   none
    444           *
    445           * @return  led state
    446           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          uint8 HalLedGetState ()
   \                     HalLedGetState:
    448          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    449          #if (HAL_LED == TRUE)
    450            return HalLedState;
   \   000004   90....       MOV     DPTR,#HalLedState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   80..         SJMP    ??Subroutine2_0
    451          #else
    452            return 0;
    453          #endif
    454          }
    455          
    456          /***************************************************************************************************
    457           * @fn      HalLedEnterSleep
    458           *
    459           * @brief   Store current LEDs state before sleep
    460           *
    461           * @param   none
    462           *
    463           * @return  none
    464           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    465          void HalLedEnterSleep( void )
   \                     HalLedEnterSleep:
    466          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    467          #ifdef BLINK_LEDS
    468            /* Sleep ON */
    469            HalLedStatusControl.sleepActive = TRUE;
   \   000004   7401         MOV     A,#0x1
   \   000006   90....       MOV     DPTR,#(HalLedStatusControl + 36)
   \   000009   F0           MOVX    @DPTR,A
    470          #endif /* BLINK_LEDS */
    471          
    472          #if (HAL_LED == TRUE)
    473            /* Save the state of each led */
    474            HalSleepLedState = 0;
    475            HalSleepLedState |= HAL_STATE_LED1();
   \   00000A   E590         MOV     A,0x90
   \   00000C   FA           MOV     R2,A
    476            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   00000D   E590         MOV     A,0x90
   \   00000F   FB           MOV     R3,A
    477            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   000010   E590         MOV     A,0x90
   \   000012   FC           MOV     R4,A
    478            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   000013   E590         MOV     A,0x90
   \   000015   FD           MOV     R5,A
   \   000016   EB           MOV     A,R3
   \   000017   A2E1         MOV     C,0xE0 /* A   */.1
   \   000019   5004         JNC     ??HalLedEnterSleep_0
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??HalLedEnterSleep_1
   \                     ??HalLedEnterSleep_0:
   \   00001F   C2F0         CLR     B.0
   \                     ??HalLedEnterSleep_1:
   \   000021   EC           MOV     A,R4
   \   000022   A2E4         MOV     C,0xE0 /* A   */.4
   \   000024   5004         JNC     ??HalLedEnterSleep_2
   \   000026   D2F1         SETB    B.1
   \   000028   8002         SJMP    ??HalLedEnterSleep_3
   \                     ??HalLedEnterSleep_2:
   \   00002A   C2F1         CLR     B.1
   \                     ??HalLedEnterSleep_3:
   \   00002C   ED           MOV     A,R5
   \   00002D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002F   E4           CLR     A
   \   000030   92E0         MOV     0xE0 /* A   */.0,C
   \   000032   33           RLC     A
   \   000033   33           RLC     A
   \   000034   33           RLC     A
   \   000035   54F8         ANL     A,#0xf8
   \   000037   C0E0         PUSH    A
   \   000039   A2F1         MOV     C,B.1
   \   00003B   E4           CLR     A
   \   00003C   92E0         MOV     0xE0 /* A   */.0,C
   \   00003E   33           RLC     A
   \   00003F   33           RLC     A
   \   000040   54FC         ANL     A,#0xfc
   \   000042   C0E0         PUSH    A
   \   000044   A2F0         MOV     C,B.0
   \   000046   E4           CLR     A
   \   000047   92E0         MOV     0xE0 /* A   */.0,C
   \   000049   C3           CLR     C
   \   00004A   33           RLC     A
   \   00004B   C0E0         PUSH    A
   \   00004D   EA           MOV     A,R2
   \   00004E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000050   E4           CLR     A
   \   000051   92E0         MOV     0xE0 /* A   */.0,C
   \   000053   FA           MOV     R2,A
   \   000054   D0E0         POP     A
   \   000056   4A           ORL     A,R2
   \   000057   FA           MOV     R2,A
   \   000058   D0E0         POP     A
   \   00005A   4A           ORL     A,R2
   \   00005B   FA           MOV     R2,A
   \   00005C   D0E0         POP     A
   \   00005E   4A           ORL     A,R2
   \   00005F   90....       MOV     DPTR,#HalSleepLedState
   \   000062   F0           MOVX    @DPTR,A
    479          
    480            /* TURN OFF all LEDs to save power */
    481            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000063                ; Setup parameters for call to function HalLedOnOff
   \   000063   7A00         MOV     R2,#0x0
   \   000065   790F         MOV     R1,#0xf
   \   000067   12....       LCALL   ??HalLedOnOff?relay
    482          #endif /* HAL_LED */
    483          
    484          }
   \   00006A   80..         SJMP    ??Subroutine2_0
   \   00006C                REQUIRE _A_P1
    485          
    486          /***************************************************************************************************
    487           * @fn      HalLedExitSleep
    488           *
    489           * @brief   Restore current LEDs state after sleep
    490           *
    491           * @param   none
    492           *
    493           * @return  none
    494           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void HalLedExitSleep( void )
   \                     HalLedExitSleep:
    496          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    497          #if (HAL_LED == TRUE)
    498            /* Load back the saved state */
    499            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   000004                ; Setup parameters for call to function HalLedOnOff
   \   000004   7A01         MOV     R2,#0x1
   \   000006   90....       MOV     DPTR,#HalSleepLedState
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??HalLedOnOff?relay
    500          
    501            /* Restart - This takes care BLINKING LEDS */
    502            HalLedUpdate();
   \   00000E                ; Setup parameters for call to function HalLedUpdate
   \   00000E   12....       LCALL   ??HalLedUpdate?relay
    503          #endif /* HAL_LED */
    504          
    505          #ifdef BLINK_LEDS
    506            /* Sleep OFF */
    507            HalLedStatusControl.sleepActive = FALSE;
   \   000011   02....       LJMP    ?Subroutine0 & 0xFFFF
    508          #endif /* BLINK_LEDS */
    509          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedBlink?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedBlink

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedOnOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedGetState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedGetState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedEnterSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLedExitSleep?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedExitSleep
    510          
    511          /***************************************************************************************************
    512          ***************************************************************************************************/
    513          
    514          
    515          
    516          

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     HalLedBlink                  1      0     29
       -> osal_GetSystemClock     0      0     36
       -> osal_set_event          0      0     36
       -> HalLedSet               0      0     36
       -> HalLedSet               0      0     36
     HalLedEnterSleep             5      0      0
       -> HalLedOnOff             4      0      0
     HalLedExitSleep              2      0      0
       -> HalLedOnOff             4      0      0
       -> HalLedUpdate            4      0      0
     HalLedGetState               2      0      0
     HalLedInit                   2      0      0
       -> HalLedSet               4      0      0
     HalLedOnOff                  2      0     25
     HalLedSet                    1      0     36
       -> HalLedBlink             0      0     22
       -> HalLedBlink             0      0     22
       -> HalLedOnOff             0      0     22
     HalLedUpdate                 1      0     25
       -> osal_GetSystemClock     0      0     50
       -> HalLedOnOff             0      0     50
       -> HalLedOnOff             0      0     50
       -> HalLedSet               0      0     50
       -> osal_start_timerEx      0      0     50


   Segment part sizes:

     Function/Label           Bytes
     --------------           -----
     _A_P1                       1
     HalLedState                 1
     HalSleepLedState            1
     preBlinkState               1
     HalLedStatusControl        37
     HalLedInit                 14
     ?Subroutine0                4
     ??Subroutine1_0             1
     ??Subroutine2_0             7
     HalLedSet                 128
     HalLedBlink               199
     HalLedUpdate              438
     HalLedOnOff                89
     HalLedGetState             11
     HalLedEnterSleep          108
     HalLedExitSleep            20
     __Constant_64               4
     ??HalLedInit?relay          6
     ??HalLedSet?relay           6
     ??HalLedBlink?relay         6
     ??HalLedUpdate?relay        6
     ??HalLedOnOff?relay         6
     ??HalLedGetState?relay      6
     ??HalLedEnterSleep?relay    6
     ??HalLedExitSleep?relay     6

 
 1 019 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 1 067 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
    40 bytes of XDATA memory

Errors: none
Warnings: none
