///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            17/Feb/2013  12:16:44 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì /
//                          \ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\ /
//                          ZDSecMgr.c                                        /
//    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530 /
//                          Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\S /
//                          amples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wRouter.cfg"             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f "C:\Documents and                /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg" (-DSECURE=0                  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Components\stack\zdo\ZDSecMgr.c" -D    /
//                          ZIGBEEPRO -D ZTOOL_P1 -D NWK_AUTO_POLL -D         /
//                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D          /
//                          LCD_SUPPORTED=DEBUG -lC "C:\Documents and         /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\ /
//                          " -lA "C:\Documents and                           /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\ /
//                          " --diag_suppress Pe001,Pa010 -o "C:\Documents    /
//                          and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13. /
//                          Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp  /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\Obj\" /
//                           -e --require_prototypes --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I               /
//                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³ /
//                          Ì\ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samp /
//                          les\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\S /
//                          OURCE\" -I "C:\Documents and                      /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\ZMAIN\TI2 /
//                          530DB\" -I "C:\Documents and                      /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MT\" -I "C:\Documents and                 /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\HAL\INCLUDE\" -I "C:\Documents and        /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents    /
//                          and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13. /
//                          Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp  /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\OSAL\INCLUDE\" -I "C:\Documents and       /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\AF\" -I "C:\Documents and           /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\NWK\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SEC\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SAPI\" -I "C:\Documents and         /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SYS\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\ZDO\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\ZMAC\F8W\" -I "C:\Documents and           /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\ZMAC\" -I "C:\Documents and               /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SADDR\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SDATA\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\INCLUDE\" -I "C:\Documents and        /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents    /
//                          and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13. /
//                          Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp  /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I      /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.4\8051\INC\" -I "C:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì /
//                          \ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sampl /
//                          es\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\Route /
//                          rEB-Pro\List\ZDSecMgr.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UL_GT_X
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??APSME_IsDefaultTCLK?relay
        FUNCTION ??APSME_IsDefaultTCLK?relay,0203H
        PUBLIC ??APSME_KeyFwdToChild?relay
        FUNCTION ??APSME_KeyFwdToChild?relay,0203H
        PUBLIC ??APSME_LinkKeyDataGet?relay
        FUNCTION ??APSME_LinkKeyDataGet?relay,0203H
        PUBLIC ??APSME_LinkKeySet?relay
        FUNCTION ??APSME_LinkKeySet?relay,0203H
        PUBLIC ??APSME_MasterKeyGet?relay
        FUNCTION ??APSME_MasterKeyGet?relay,0203H
        PUBLIC ??APSME_SKA_TimerExpired?relay
        FUNCTION ??APSME_SKA_TimerExpired?relay,0203H
        PUBLIC ??APSME_TCLinkKeyInit?relay
        FUNCTION ??APSME_TCLinkKeyInit?relay,0203H
        PUBLIC ??APSME_TCLinkKeyLoad?relay
        FUNCTION ??APSME_TCLinkKeyLoad?relay,0203H
        PUBLIC ??APSME_TCLinkKeySync?relay
        FUNCTION ??APSME_TCLinkKeySync?relay,0203H
        PUBLIC ??ZDSecMgrAPSRemove?relay
        FUNCTION ??ZDSecMgrAPSRemove?relay,0203H
        PUBLIC ??ZDSecMgrAddLinkKey?relay
        FUNCTION ??ZDSecMgrAddLinkKey?relay,0203H
        PUBLIC ??ZDSecMgrAddrMgrUpdate?relay
        FUNCTION ??ZDSecMgrAddrMgrUpdate?relay,0203H
        PUBLIC ??ZDSecMgrAddrStore?relay
        FUNCTION ??ZDSecMgrAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyGet?relay
        FUNCTION ??ZDSecMgrAppKeyGet?relay,0203H
        PUBLIC ??ZDSecMgrAppKeyReq?relay
        FUNCTION ??ZDSecMgrAppKeyReq?relay,0203H
        PUBLIC ??ZDSecMgrAssocDeviceAuth?relay
        FUNCTION ??ZDSecMgrAssocDeviceAuth?relay,0203H
        PUBLIC ??ZDSecMgrAuthInitiate?relay
        FUNCTION ??ZDSecMgrAuthInitiate?relay,0203H
        PUBLIC ??ZDSecMgrAuthNwkKey?relay
        FUNCTION ??ZDSecMgrAuthNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateCfm?relay
        FUNCTION ??ZDSecMgrAuthenticateCfm?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticateInd?relay
        FUNCTION ??ZDSecMgrAuthenticateInd?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationCheck?relay
        FUNCTION ??ZDSecMgrAuthenticationCheck?relay,0203H
        PUBLIC ??ZDSecMgrAuthenticationSet?relay
        FUNCTION ??ZDSecMgrAuthenticationSet?relay,0203H
        PUBLIC ??ZDSecMgrConfig?relay
        FUNCTION ??ZDSecMgrConfig?relay,0203H
        PUBLIC ??ZDSecMgrCtrlAdd?relay
        FUNCTION ??ZDSecMgrCtrlAdd?relay,0203H
        PUBLIC ??ZDSecMgrCtrlInit?relay
        FUNCTION ??ZDSecMgrCtrlInit?relay,0203H
        PUBLIC ??ZDSecMgrCtrlLookup?relay
        FUNCTION ??ZDSecMgrCtrlLookup?relay,0203H
        PUBLIC ??ZDSecMgrCtrlRelease?relay
        FUNCTION ??ZDSecMgrCtrlRelease?relay,0203H
        PUBLIC ??ZDSecMgrCtrlReset?relay
        FUNCTION ??ZDSecMgrCtrlReset?relay,0203H
        PUBLIC ??ZDSecMgrCtrlSet?relay
        FUNCTION ??ZDSecMgrCtrlSet?relay,0203H
        PUBLIC ??ZDSecMgrCtrlTerm?relay
        FUNCTION ??ZDSecMgrCtrlTerm?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlHandler?relay
        FUNCTION ??ZDSecMgrDeviceCtrlHandler?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlSetup?relay
        FUNCTION ??ZDSecMgrDeviceCtrlSetup?relay,0203H
        PUBLIC ??ZDSecMgrDeviceCtrlUpdate?relay
        FUNCTION ??ZDSecMgrDeviceCtrlUpdate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryAdd?relay
        FUNCTION ??ZDSecMgrDeviceEntryAdd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceEntryRemove?relay
        FUNCTION ??ZDSecMgrDeviceEntryRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoin?relay
        FUNCTION ??ZDSecMgrDeviceJoin?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinDirect?relay
        FUNCTION ??ZDSecMgrDeviceJoinDirect?relay,0203H
        PUBLIC ??ZDSecMgrDeviceJoinFwd?relay
        FUNCTION ??ZDSecMgrDeviceJoinFwd?relay,0203H
        PUBLIC ??ZDSecMgrDeviceNew?relay
        FUNCTION ??ZDSecMgrDeviceNew?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemove?relay
        FUNCTION ??ZDSecMgrDeviceRemove?relay,0203H
        PUBLIC ??ZDSecMgrDeviceRemoveByExtAddr?relay
        FUNCTION ??ZDSecMgrDeviceRemoveByExtAddr?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidate?relay
        FUNCTION ??ZDSecMgrDeviceValidate?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateCM?relay
        FUNCTION ??ZDSecMgrDeviceValidateCM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateRM?relay
        FUNCTION ??ZDSecMgrDeviceValidateRM?relay,0203H
        PUBLIC ??ZDSecMgrDeviceValidateSKKE?relay
        FUNCTION ??ZDSecMgrDeviceValidateSKKE?relay,0203H
        PUBLIC ??ZDSecMgrEntryFree?relay
        FUNCTION ??ZDSecMgrEntryFree?relay,0203H
        PUBLIC ??ZDSecMgrEntryInit?relay
        FUNCTION ??ZDSecMgrEntryInit?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookup?relay
        FUNCTION ??ZDSecMgrEntryLookup?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupAMI?relay
        FUNCTION ??ZDSecMgrEntryLookupAMI?relay,0203H
        PUBLIC ??ZDSecMgrEntryLookupExt?relay
        FUNCTION ??ZDSecMgrEntryLookupExt?relay,0203H
        PUBLIC ??ZDSecMgrEntryNew?relay
        FUNCTION ??ZDSecMgrEntryNew?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKey?relay
        FUNCTION ??ZDSecMgrEstablishKey?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyCfm?relay
        FUNCTION ??ZDSecMgrEstablishKeyCfm?relay,0203H
        PUBLIC ??ZDSecMgrEstablishKeyInd?relay
        FUNCTION ??ZDSecMgrEstablishKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrEvent?relay
        FUNCTION ??ZDSecMgrEvent?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrLookup?relay
        FUNCTION ??ZDSecMgrExtAddrLookup?relay,0203H
        PUBLIC ??ZDSecMgrExtAddrStore?relay
        FUNCTION ??ZDSecMgrExtAddrStore?relay,0203H
        PUBLIC ??ZDSecMgrInit?relay
        FUNCTION ??ZDSecMgrInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyInit?relay
        FUNCTION ??ZDSecMgrMasterKeyInit?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLoad?relay
        FUNCTION ??ZDSecMgrMasterKeyLoad?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyLookup?relay
        FUNCTION ??ZDSecMgrMasterKeyLookup?relay,0203H
        PUBLIC ??ZDSecMgrMasterKeyStore?relay
        FUNCTION ??ZDSecMgrMasterKeyStore?relay,0203H
        PUBLIC ??ZDSecMgrNewDeviceEvent?relay
        FUNCTION ??ZDSecMgrNewDeviceEvent?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoining?relay
        FUNCTION ??ZDSecMgrPermitJoining?relay,0203H
        PUBLIC ??ZDSecMgrPermitJoiningTimeout?relay
        FUNCTION ??ZDSecMgrPermitJoiningTimeout?relay,0203H
        PUBLIC ??ZDSecMgrRemoveDeviceInd?relay
        FUNCTION ??ZDSecMgrRemoveDeviceInd?relay,0203H
        PUBLIC ??ZDSecMgrRequestAppKey?relay
        FUNCTION ??ZDSecMgrRequestAppKey?relay,0203H
        PUBLIC ??ZDSecMgrRequestKeyInd?relay
        FUNCTION ??ZDSecMgrRequestKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrSendMasterKey?relay
        FUNCTION ??ZDSecMgrSendMasterKey?relay,0203H
        PUBLIC ??ZDSecMgrSendNwkKey?relay
        FUNCTION ??ZDSecMgrSendNwkKey?relay,0203H
        PUBLIC ??ZDSecMgrSetupPartner?relay
        FUNCTION ??ZDSecMgrSetupPartner?relay,0203H
        PUBLIC ??ZDSecMgrSwitchKeyInd?relay
        FUNCTION ??ZDSecMgrSwitchKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrTCDataLoad?relay
        FUNCTION ??ZDSecMgrTCDataLoad?relay,0203H
        PUBLIC ??ZDSecMgrTCExtAddrCheck?relay
        FUNCTION ??ZDSecMgrTCExtAddrCheck?relay,0203H
        PUBLIC ??ZDSecMgrTransportKeyInd?relay
        FUNCTION ??ZDSecMgrTransportKeyInd?relay,0203H
        PUBLIC ??ZDSecMgrUpdateDeviceInd?relay
        FUNCTION ??ZDSecMgrUpdateDeviceInd?relay,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,0203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC APSME_LinkKeyDataGet
        FUNCTION APSME_LinkKeyDataGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC APSME_MasterKeyGet
        FUNCTION APSME_MasterKeyGet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_SKA_TimerExpired
        FUNCTION APSME_SKA_TimerExpired,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 65, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrAddrMgrUpdate
        FUNCTION ZDSecMgrAddrMgrUpdate,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 8, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthInitiate
        FUNCTION ZDSecMgrAuthInitiate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateCfm
        FUNCTION ZDSecMgrAuthenticateCfm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticateInd
        FUNCTION ZDSecMgrAuthenticateInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrCtrlAdd
        FUNCTION ZDSecMgrCtrlAdd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlData
        PUBLIC ZDSecMgrCtrlInit
        FUNCTION ZDSecMgrCtrlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlLookup
        FUNCTION ZDSecMgrCtrlLookup,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrCtrlRelease
        FUNCTION ZDSecMgrCtrlRelease,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrCtrlReset
        FUNCTION ZDSecMgrCtrlReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrCtrlSet
        FUNCTION ZDSecMgrCtrlSet,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrCtrlTerm
        FUNCTION ZDSecMgrCtrlTerm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceCtrlHandler
        FUNCTION ZDSecMgrDeviceCtrlHandler,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceCtrlSetup
        FUNCTION ZDSecMgrDeviceCtrlSetup,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceCtrlUpdate
        FUNCTION ZDSecMgrDeviceCtrlUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryAdd
        FUNCTION ZDSecMgrDeviceEntryAdd,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrDeviceEntryRemove
        FUNCTION ZDSecMgrDeviceEntryRemove,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrDeviceValidateCM
        FUNCTION ZDSecMgrDeviceValidateCM,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateSKKE
        FUNCTION ZDSecMgrDeviceValidateSKKE,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEstablishKey
        FUNCTION ZDSecMgrEstablishKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrEstablishKeyCfm
        FUNCTION ZDSecMgrEstablishKeyCfm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDSecMgrEstablishKeyInd
        FUNCTION ZDSecMgrEstablishKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDSecMgrEvent
        FUNCTION ZDSecMgrEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrMasterKeyData
        PUBLIC ZDSecMgrMasterKeyInit
        FUNCTION ZDSecMgrMasterKeyInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrMasterKeyLoad
        FUNCTION ZDSecMgrMasterKeyLoad,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrMasterKeyLookup
        FUNCTION ZDSecMgrMasterKeyLookup,0203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrMasterKeyStore
        FUNCTION ZDSecMgrMasterKeyStore,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSendMasterKey
        FUNCTION ZDSecMgrSendMasterKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDSecMgrSetupPartner
        FUNCTION ZDSecMgrSetupPartner,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrTCDataLoaded
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTCMasterKey
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
osal_memcpy         SYMBOL "osal_memcpy"
osal_memset         SYMBOL "osal_memset"
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
APSME_EstablishKeyReq SYMBOL "APSME_EstablishKeyReq"
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AssocGetWithExt     SYMBOL "AssocGetWithExt"
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
AssocGetWithShort   SYMBOL "AssocGetWithShort"
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
APSME_AuthenticateReq SYMBOL "APSME_AuthenticateReq"
osal_set_event      SYMBOL "osal_set_event"
APSME_SecurityNM    SYMBOL "APSME_SecurityNM"
AssocMatchDeviceStatus SYMBOL "AssocMatchDeviceStatus"
AssocRemove         SYMBOL "AssocRemove"
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
AddrMgrExtAddrEqual SYMBOL "AddrMgrExtAddrEqual"
APSME_EstablishKeyRsp SYMBOL "APSME_EstablishKeyRsp"
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_write       SYMBOL "osal_nv_write"
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
??APSME_AuthenticateReq?relay SYMBOL "?relay", APSME_AuthenticateReq
??APSME_EstablishKeyReq?relay SYMBOL "?relay", APSME_EstablishKeyReq
??APSME_EstablishKeyRsp?relay SYMBOL "?relay", APSME_EstablishKeyRsp
??APSME_LookupExtAddr?relay SYMBOL "?relay", APSME_LookupExtAddr
??APSME_LookupNwkAddr?relay SYMBOL "?relay", APSME_LookupNwkAddr
??APSME_RemoveDeviceReq?relay SYMBOL "?relay", APSME_RemoveDeviceReq
??APSME_RequestKeyReq?relay SYMBOL "?relay", APSME_RequestKeyReq
??APSME_SecurityNM?relay SYMBOL "?relay", APSME_SecurityNM
??APSME_TransportKeyReq?relay SYMBOL "?relay", APSME_TransportKeyReq
??APSME_UpdateDeviceReq?relay SYMBOL "?relay", APSME_UpdateDeviceReq
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
??AddrMgrEntryRelease?relay SYMBOL "?relay", AddrMgrEntryRelease
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
??AddrMgrExtAddrEqual?relay SYMBOL "?relay", AddrMgrExtAddrEqual
??AddrMgrExtAddrLookup?relay SYMBOL "?relay", AddrMgrExtAddrLookup
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
??AddrMgrExtAddrValid?relay SYMBOL "?relay", AddrMgrExtAddrValid
??AssocGetWithExt?relay SYMBOL "?relay", AssocGetWithExt
??AssocGetWithShort?relay SYMBOL "?relay", AssocGetWithShort
??AssocMatchDeviceStatus?relay SYMBOL "?relay", AssocMatchDeviceStatus
??AssocRemove?relay SYMBOL "?relay", AssocRemove
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??NLME_LeaveReq?relay SYMBOL "?relay", NLME_LeaveReq
??SSP_GetTrueRand?relay SYMBOL "?relay", SSP_GetTrueRand
??SSP_SwitchNwkKey?relay SYMBOL "?relay", SSP_SwitchNwkKey
??SSP_UpdateNwkKey?relay SYMBOL "?relay", SSP_UpdateNwkKey
??ZDApp_NVUpdate?relay SYMBOL "?relay", ZDApp_NVUpdate
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
??APSME_IsDefaultTCLK?relay SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
??APSME_KeyFwdToChild?relay SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyDataGet SYMBOL "APSME_LinkKeyDataGet"
??APSME_LinkKeyDataGet?relay SYMBOL "?relay", APSME_LinkKeyDataGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
??APSME_LinkKeySet?relay SYMBOL "?relay", APSME_LinkKeySet
APSME_MasterKeyGet  SYMBOL "APSME_MasterKeyGet"
??APSME_MasterKeyGet?relay SYMBOL "?relay", APSME_MasterKeyGet
APSME_SKA_TimerExpired SYMBOL "APSME_SKA_TimerExpired"
??APSME_SKA_TimerExpired?relay SYMBOL "?relay", APSME_SKA_TimerExpired
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
??APSME_TCLinkKeyInit?relay SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
??APSME_TCLinkKeyLoad?relay SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
??APSME_TCLinkKeySync?relay SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
??ZDSecMgrAPSRemove?relay SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
??ZDSecMgrAddLinkKey?relay SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrMgrUpdate SYMBOL "ZDSecMgrAddrMgrUpdate"
??ZDSecMgrAddrMgrUpdate?relay SYMBOL "?relay", ZDSecMgrAddrMgrUpdate
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
??ZDSecMgrAddrStore?relay SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
??ZDSecMgrAppKeyGet?relay SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
??ZDSecMgrAppKeyReq?relay SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
??ZDSecMgrAssocDeviceAuth?relay SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthInitiate SYMBOL "ZDSecMgrAuthInitiate"
??ZDSecMgrAuthInitiate?relay SYMBOL "?relay", ZDSecMgrAuthInitiate
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
??ZDSecMgrAuthNwkKey?relay SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticateCfm SYMBOL "ZDSecMgrAuthenticateCfm"
??ZDSecMgrAuthenticateCfm?relay SYMBOL "?relay", ZDSecMgrAuthenticateCfm
ZDSecMgrAuthenticateInd SYMBOL "ZDSecMgrAuthenticateInd"
??ZDSecMgrAuthenticateInd?relay SYMBOL "?relay", ZDSecMgrAuthenticateInd
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
??ZDSecMgrAuthenticationCheck?relay SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
??ZDSecMgrAuthenticationSet?relay SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
??ZDSecMgrConfig?relay SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrCtrlAdd     SYMBOL "ZDSecMgrCtrlAdd"
??ZDSecMgrCtrlAdd?relay SYMBOL "?relay", ZDSecMgrCtrlAdd
ZDSecMgrCtrlInit    SYMBOL "ZDSecMgrCtrlInit"
??ZDSecMgrCtrlInit?relay SYMBOL "?relay", ZDSecMgrCtrlInit
ZDSecMgrCtrlLookup  SYMBOL "ZDSecMgrCtrlLookup"
??ZDSecMgrCtrlLookup?relay SYMBOL "?relay", ZDSecMgrCtrlLookup
ZDSecMgrCtrlRelease SYMBOL "ZDSecMgrCtrlRelease"
??ZDSecMgrCtrlRelease?relay SYMBOL "?relay", ZDSecMgrCtrlRelease
ZDSecMgrCtrlReset   SYMBOL "ZDSecMgrCtrlReset"
??ZDSecMgrCtrlReset?relay SYMBOL "?relay", ZDSecMgrCtrlReset
ZDSecMgrCtrlSet     SYMBOL "ZDSecMgrCtrlSet"
??ZDSecMgrCtrlSet?relay SYMBOL "?relay", ZDSecMgrCtrlSet
ZDSecMgrCtrlTerm    SYMBOL "ZDSecMgrCtrlTerm"
??ZDSecMgrCtrlTerm?relay SYMBOL "?relay", ZDSecMgrCtrlTerm
ZDSecMgrDeviceCtrlHandler SYMBOL "ZDSecMgrDeviceCtrlHandler"
??ZDSecMgrDeviceCtrlHandler?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlHandler
ZDSecMgrDeviceCtrlSetup SYMBOL "ZDSecMgrDeviceCtrlSetup"
??ZDSecMgrDeviceCtrlSetup?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlSetup
ZDSecMgrDeviceCtrlUpdate SYMBOL "ZDSecMgrDeviceCtrlUpdate"
??ZDSecMgrDeviceCtrlUpdate?relay SYMBOL "?relay", ZDSecMgrDeviceCtrlUpdate
ZDSecMgrDeviceEntryAdd SYMBOL "ZDSecMgrDeviceEntryAdd"
??ZDSecMgrDeviceEntryAdd?relay SYMBOL "?relay", ZDSecMgrDeviceEntryAdd
ZDSecMgrDeviceEntryRemove SYMBOL "ZDSecMgrDeviceEntryRemove"
??ZDSecMgrDeviceEntryRemove?relay SYMBOL "?relay", ZDSecMgrDeviceEntryRemove
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
??ZDSecMgrDeviceJoin?relay SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
??ZDSecMgrDeviceJoinDirect?relay SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
??ZDSecMgrDeviceJoinFwd?relay SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
??ZDSecMgrDeviceNew?relay SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
??ZDSecMgrDeviceRemove?relay SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
??ZDSecMgrDeviceRemoveByExtAddr?relay SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
??ZDSecMgrDeviceValidate?relay SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateCM SYMBOL "ZDSecMgrDeviceValidateCM"
??ZDSecMgrDeviceValidateCM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateCM
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
??ZDSecMgrDeviceValidateRM?relay SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrDeviceValidateSKKE SYMBOL "ZDSecMgrDeviceValidateSKKE"
??ZDSecMgrDeviceValidateSKKE?relay SYMBOL "?relay", ZDSecMgrDeviceValidateSKKE
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
??ZDSecMgrEntryFree?relay SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
??ZDSecMgrEntryInit?relay SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
??ZDSecMgrEntryLookup?relay SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
??ZDSecMgrEntryLookupAMI?relay SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
??ZDSecMgrEntryLookupExt?relay SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
??ZDSecMgrEntryNew?relay SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrEstablishKey SYMBOL "ZDSecMgrEstablishKey"
??ZDSecMgrEstablishKey?relay SYMBOL "?relay", ZDSecMgrEstablishKey
ZDSecMgrEstablishKeyCfm SYMBOL "ZDSecMgrEstablishKeyCfm"
??ZDSecMgrEstablishKeyCfm?relay SYMBOL "?relay", ZDSecMgrEstablishKeyCfm
ZDSecMgrEstablishKeyInd SYMBOL "ZDSecMgrEstablishKeyInd"
??ZDSecMgrEstablishKeyInd?relay SYMBOL "?relay", ZDSecMgrEstablishKeyInd
ZDSecMgrEvent       SYMBOL "ZDSecMgrEvent"
??ZDSecMgrEvent?relay SYMBOL "?relay", ZDSecMgrEvent
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
??ZDSecMgrExtAddrLookup?relay SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
??ZDSecMgrExtAddrStore?relay SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
??ZDSecMgrInit?relay SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrMasterKeyInit SYMBOL "ZDSecMgrMasterKeyInit"
??ZDSecMgrMasterKeyInit?relay SYMBOL "?relay", ZDSecMgrMasterKeyInit
ZDSecMgrMasterKeyLoad SYMBOL "ZDSecMgrMasterKeyLoad"
??ZDSecMgrMasterKeyLoad?relay SYMBOL "?relay", ZDSecMgrMasterKeyLoad
ZDSecMgrMasterKeyLookup SYMBOL "ZDSecMgrMasterKeyLookup"
??ZDSecMgrMasterKeyLookup?relay SYMBOL "?relay", ZDSecMgrMasterKeyLookup
ZDSecMgrMasterKeyStore SYMBOL "ZDSecMgrMasterKeyStore"
??ZDSecMgrMasterKeyStore?relay SYMBOL "?relay", ZDSecMgrMasterKeyStore
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
??ZDSecMgrNewDeviceEvent?relay SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
??ZDSecMgrPermitJoining?relay SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
??ZDSecMgrPermitJoiningTimeout?relay SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
??ZDSecMgrRemoveDeviceInd?relay SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
??ZDSecMgrRequestAppKey?relay SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
??ZDSecMgrRequestKeyInd?relay SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSendMasterKey SYMBOL "ZDSecMgrSendMasterKey"
??ZDSecMgrSendMasterKey?relay SYMBOL "?relay", ZDSecMgrSendMasterKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
??ZDSecMgrSendNwkKey?relay SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetupPartner SYMBOL "ZDSecMgrSetupPartner"
??ZDSecMgrSetupPartner?relay SYMBOL "?relay", ZDSecMgrSetupPartner
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
??ZDSecMgrSwitchKeyInd?relay SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
??ZDSecMgrTCDataLoad?relay SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
??ZDSecMgrTCExtAddrCheck?relay SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
??ZDSecMgrTransportKeyInd?relay SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
??ZDSecMgrUpdateDeviceInd?relay SYMBOL "?relay", ZDSecMgrUpdateDeviceInd

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyReq
        FUNCTION APSME_EstablishKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_AuthenticateReq
        FUNCTION APSME_AuthenticateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityNM
        FUNCTION APSME_SecurityNM,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMatchDeviceStatus
        FUNCTION AssocMatchDeviceStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrEqual
        FUNCTION AddrMgrExtAddrEqual,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EstablishKeyRsp
        FUNCTION APSME_EstablishKeyRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_AuthenticateReq?relay
        FUNCTION ??APSME_AuthenticateReq?relay,00H
        EXTERN ??APSME_EstablishKeyReq?relay
        FUNCTION ??APSME_EstablishKeyReq?relay,00H
        EXTERN ??APSME_EstablishKeyRsp?relay
        FUNCTION ??APSME_EstablishKeyRsp?relay,00H
        EXTERN ??APSME_LookupExtAddr?relay
        FUNCTION ??APSME_LookupExtAddr?relay,00H
        EXTERN ??APSME_LookupNwkAddr?relay
        FUNCTION ??APSME_LookupNwkAddr?relay,00H
        EXTERN ??APSME_RemoveDeviceReq?relay
        FUNCTION ??APSME_RemoveDeviceReq?relay,00H
        EXTERN ??APSME_RequestKeyReq?relay
        FUNCTION ??APSME_RequestKeyReq?relay,00H
        EXTERN ??APSME_SecurityNM?relay
        FUNCTION ??APSME_SecurityNM?relay,00H
        EXTERN ??APSME_TransportKeyReq?relay
        FUNCTION ??APSME_TransportKeyReq?relay,00H
        EXTERN ??APSME_UpdateDeviceReq?relay
        FUNCTION ??APSME_UpdateDeviceReq?relay,00H
        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryRelease?relay
        FUNCTION ??AddrMgrEntryRelease?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrEqual?relay
        FUNCTION ??AddrMgrExtAddrEqual?relay,00H
        EXTERN ??AddrMgrExtAddrLookup?relay
        FUNCTION ??AddrMgrExtAddrLookup?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??AddrMgrExtAddrValid?relay
        FUNCTION ??AddrMgrExtAddrValid?relay,00H
        EXTERN ??AssocGetWithExt?relay
        FUNCTION ??AssocGetWithExt?relay,00H
        EXTERN ??AssocGetWithShort?relay
        FUNCTION ??AssocGetWithShort?relay,00H
        EXTERN ??AssocMatchDeviceStatus?relay
        FUNCTION ??AssocMatchDeviceStatus?relay,00H
        EXTERN ??AssocRemove?relay
        FUNCTION ??AssocRemove?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NLME_LeaveReq?relay
        FUNCTION ??NLME_LeaveReq?relay,00H
        EXTERN ??SSP_GetTrueRand?relay
        FUNCTION ??SSP_GetTrueRand?relay,00H
        EXTERN ??SSP_SwitchNwkKey?relay
        FUNCTION ??SSP_SwitchNwkKey?relay,00H
        EXTERN ??SSP_UpdateNwkKey?relay
        FUNCTION ??SSP_UpdateNwkKey?relay,00H
        EXTERN ??ZDApp_NVUpdate?relay
        FUNCTION ??ZDApp_NVUpdate?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ZDAppTaskID
        EXTERN _NIB
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN zgPreConfigKey
        EXTERN zgPreConfigKeys
        EXTERN zgSecurePermitJoin
        EXTERN zgUseDefaultTCLK

// C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\ZDSecMgr.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2010-01-08 13:29:59 -0800 (Fri, 08 Jan 2010) $
//    4   Revision:       $Revision: 21465 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComdef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_NV.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "AF.h"
//   60 #include "ZDConfig.h"
//   61 #include "ZDApp.h"
//   62 #include "ZDSecMgr.h"
//   63 
//   64 
//   65 /******************************************************************************
//   66  * CONSTANTS
//   67  */
//   68 // maximum number of devices managed by this Security Manager
//   69 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   70   #define ZDSECMGR_DEVICE_MAX 3
//   71 #endif
//   72 
//   73 // total number of preconfigured devices (EXT address, MASTER key)
//   74 //devtag.pro.security
//   75 //#define ZDSECMGR_PRECONFIG_MAX ZDSECMGR_DEVICE_MAX
//   76 #define ZDSECMGR_PRECONFIG_MAX 0
//   77 
//   78 // maximum number of MASTER keys this device may hold
//   79 #define ZDSECMGR_MASTERKEY_MAX ZDSECMGR_DEVICE_MAX
//   80 
//   81 // maximum number of LINK keys this device may store
//   82 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   83 
//   84 // total number of devices under control - authentication, SKKE, etc.
//   85 #define ZDSECMGR_CTRL_MAX ZDSECMGR_DEVICE_MAX
//   86 
//   87 // total number of stored devices
//   88 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   89   #define ZDSECMGR_STORED_DEVICES 3
//   90 #endif
//   91   
//   92 // Total number of preconfigured trust center link key
//   93 #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
//   94   #define ZDSECMGR_TC_DEVICE_MAX 1
//   95 #endif
//   96   
//   97 #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
//   98   #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
//   99 #endif
//  100   
//  101 #define ZDSECMGR_CTRL_NONE       0
//  102 #define ZDSECMGR_CTRL_INIT       1
//  103 #define ZDSECMGR_CTRL_TK_MASTER  2
//  104 #define ZDSECMGR_CTRL_SKKE_INIT  3
//  105 #define ZDSECMGR_CTRL_SKKE_WAIT  4
//  106 #define ZDSECMGR_CTRL_SKKE_DONE  5
//  107 #define ZDSECMGR_CTRL_SKKE_FAIL  6
//  108 #define ZDSECMGR_CTRL_TK_NWK     7
//  109 
//  110 #define ZDSECMGR_CTRL_BASE_CNTR      1
//  111 #define ZDSECMGR_CTRL_SKKE_INIT_CNTR 1
//  112 #define ZDSECMGR_CTRL_TK_NWK_CNTR    1
//  113 
//  114 // set SKA slot maximum
//  115 #define ZDSECMGR_SKA_SLOT_MAX 1
//  116 
//  117 // APSME Stub Implementations
//  118 #define ZDSecMgrMasterKeyGet   APSME_MasterKeyGet
//  119 #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
//  120 #define ZDSecMgrLinkKeyDataGet APSME_LinkKeyDataGet
//  121 #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
//  122 
//  123 #if !defined( MAX_APS_FRAMECOUNTER_CHANGES )
//  124   // The number of times the frame counter can change before
//  125   // saving to NV
//  126   #define MAX_APS_FRAMECOUNTER_CHANGES    10
//  127 #endif
//  128 
//  129 /******************************************************************************
//  130  * TYPEDEFS
//  131  */
//  132 typedef struct
//  133 {
//  134   uint8 extAddr[Z_EXTADDR_LEN];
//  135   uint8 key[SEC_KEY_LEN];
//  136 } ZDSecMgrPreConfigData_t;
//  137 
//  138 typedef struct
//  139 {
//  140   uint16 ami;
//  141   uint8  key[SEC_KEY_LEN];
//  142 } ZDSecMgrMasterKeyData_t;
//  143 
//  144 //should match APSME_LinkKeyData_t;
//  145 typedef struct
//  146 {
//  147   uint8               key[SEC_KEY_LEN];
//  148   APSME_LinkKeyData_t apsmelkd;
//  149 } ZDSecMgrLinkKeyData_t;
//  150 
//  151 typedef struct
//  152 {
//  153   uint16                ami;
//  154   ZDSecMgrLinkKeyData_t lkd;
//  155   ZDSecMgr_Authentication_Option authenticateOption;
//  156 } ZDSecMgrEntry_t;
//  157 
//  158 typedef struct
//  159 {
//  160   ZDSecMgrEntry_t* entry;
//  161   uint16           parentAddr;
//  162   uint8            secure;
//  163   uint8            state;
//  164   uint8            cntr;
//  165   //uint8          next;
//  166 } ZDSecMgrCtrl_t;
//  167 
//  168 typedef struct
//  169 {
//  170   uint16          nwkAddr;
//  171   uint8*          extAddr;
//  172   uint16          parentAddr;
//  173   uint8           secure;
//  174   uint8           devStatus;
//  175   ZDSecMgrCtrl_t* ctrl;
//  176 } ZDSecMgrDevice_t;
//  177 
//  178 /******************************************************************************
//  179  * LOCAL VARIABLES
//  180  */
//  181 #if 0 // Taken out because the following functionality is only used for test
//  182       // purpose. A more efficient (above) way is used. It can be put
//  183       // back in if customers request for a white/black list feature.
//  184 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  185 {
//  186   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  187   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  188   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  189 };
//  190 #endif
//  191 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  192 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  193   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  194 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  195 uint8 ZDSecMgrTCMasterKey[SEC_KEY_LEN] =
ZDSecMgrTCMasterKey:
        DS 16
        REQUIRE `?<Initializer for ZDSecMgrTCMasterKey>`
        REQUIRE __INIT_XDATA_I
//  196   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  197    0x89,0x67,0x45,0x23,0x01,0xEF,0xCD,0xAB};
//  198 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  199 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  200 uint8 ZDSecMgrTCDataLoaded    = FALSE;
ZDSecMgrTCDataLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  201 
//  202 //devtag.pro.security - remove this
//  203 #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  204 const ZDSecMgrPreConfigData_t ZDSecMgrPreConfigData[ZDSECMGR_PRECONFIG_MAX] =
//  205 {
//  206   //---------------------------------------------------------------------------
//  207   // DEVICE A
//  208   //---------------------------------------------------------------------------
//  209   {
//  210     // extAddr
//  211     {0x7C,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  212 
//  213     // key
//  214     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  215      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  216   },
//  217   //---------------------------------------------------------------------------
//  218   // DEVICE B
//  219   //---------------------------------------------------------------------------
//  220   {
//  221     // extAddr
//  222     {0x84,0x03,0x00,0x00,0x00,0x4B,0x12,0x00},
//  223 
//  224     // key
//  225     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  226      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  227   },
//  228   //---------------------------------------------------------------------------
//  229   // DEVICE C
//  230   //---------------------------------------------------------------------------
//  231   {
//  232     // extAddr
//  233     {0x3E,0x01,0x12,0x13,0x14,0x15,0x16,0x17},
//  234 
//  235     // key
//  236     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  237      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  238   },
//  239 };
//  240 #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  241 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  242 ZDSecMgrMasterKeyData_t* ZDSecMgrMasterKeyData = NULL;
ZDSecMgrMasterKeyData:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  243 ZDSecMgrEntry_t*         ZDSecMgrEntries       = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  244 ZDSecMgrCtrl_t*          ZDSecMgrCtrlData      = NULL;
ZDSecMgrCtrlData:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  245 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr );
//  246 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  247 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  248 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  249 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  250 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  251 APSME_TCLinkKey_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 32
        REQUIRE __INIT_XDATA_Z
//  252 
//  253 /******************************************************************************
//  254  * PRIVATE FUNCTIONS
//  255  *
//  256  *   ZDSecMgrMasterKeyInit
//  257  *   ZDSecMgrAddrStore
//  258  *   ZDSecMgrExtAddrStore
//  259  *   ZDSecMgrExtAddrLookup
//  260  *   ZDSecMgrMasterKeyLookup
//  261  *   ZDSecMgrMasterKeyStore
//  262  *   ZDSecMgrEntryInit
//  263  *   ZDSecMgrEntryLookup
//  264  *   ZDSecMgrEntryLookupAMI
//  265  *   ZDSecMgrEntryLookupExt
//  266  *   ZDSecMgrEntryFree
//  267  *   ZDSecMgrEntryNew
//  268  *   ZDSecMgrCtrlInit
//  269  *   ZDSecMgrCtrlRelease
//  270  *   ZDSecMgrCtrlLookup
//  271  *   ZDSecMgrCtrlSet
//  272  *   ZDSecMgrCtrlAdd
//  273  *   ZDSecMgrCtrlTerm
//  274  *   ZDSecMgrCtrlReset
//  275  *   ZDSecMgrMasterKeyLoad
//  276  *   ZDSecMgrAppKeyGet
//  277  *   ZDSecMgrAppKeyReq
//  278  *   ZDSecMgrEstablishKey
//  279  *   ZDSecMgrSendMasterKey
//  280  *   ZDSecMgrSendNwkKey
//  281  *   ZDSecMgrDeviceEntryRemove
//  282  *   ZDSecMgrDeviceEntryAdd
//  283  *   ZDSecMgrDeviceCtrlHandler
//  284  *   ZDSecMgrDeviceCtrlSetup
//  285  *   ZDSecMgrDeviceCtrlUpdate
//  286  *   ZDSecMgrDeviceRemove
//  287  *   ZDSecMgrDeviceValidateSKKE
//  288  *   ZDSecMgrDeviceValidateRM
//  289  *   ZDSecMgrDeviceValidateCM
//  290  *   ZDSecMgrDeviceValidate
//  291  *   ZDSecMgrDeviceJoin
//  292  *   ZDSecMgrDeviceJoinDirect
//  293  *   ZDSecMgrDeviceJoinFwd
//  294  *   ZDSecMgrDeviceNew
//  295  *   ZDSecMgrAssocDeviceAuth
//  296  *   ZDSecMgrAuthInitiate
//  297  *   ZDSecMgrAuthNwkKey
//  298  *   APSME_TCLinkKeyInit
//  299  *   APSME_IsDefaultTCLK
//  300  */
//  301 //-----------------------------------------------------------------------------
//  302 // master key data
//  303 //-----------------------------------------------------------------------------
//  304 void ZDSecMgrMasterKeyInit( void );
//  305 
//  306 //-----------------------------------------------------------------------------
//  307 // address management
//  308 //-----------------------------------------------------------------------------
//  309 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  310 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  311 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  312 
//  313 //-----------------------------------------------------------------------------
//  314 // MASTER key data
//  315 //-----------------------------------------------------------------------------
//  316 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key );
//  317 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key );
//  318 
//  319 //-----------------------------------------------------------------------------
//  320 // entry data
//  321 //-----------------------------------------------------------------------------
//  322 void ZDSecMgrEntryInit(uint8 state);
//  323 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  324 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  325 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  326 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  327 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  328 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  329 
//  330 //-----------------------------------------------------------------------------
//  331 // control data
//  332 //-----------------------------------------------------------------------------
//  333 void ZDSecMgrCtrlInit( void );
//  334 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl );
//  335 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl );
//  336 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
//  337                       ZDSecMgrEntry_t*  entry,
//  338                       ZDSecMgrCtrl_t*   ctrl );
//  339 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry );
//  340 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry );
//  341 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device,
//  342                              ZDSecMgrEntry_t*  entry );
//  343 
//  344 //-----------------------------------------------------------------------------
//  345 // key support
//  346 //-----------------------------------------------------------------------------
//  347 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key );
//  348 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  349                              uint8*  initExtAddr,
//  350                              uint16  partNwkAddr,
//  351                              uint8*  partExtAddr,
//  352                              uint8** key,
//  353                              uint8*  keyType );
//  354 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  355 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device );
//  356 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device );
//  357 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  358 
//  359 //-----------------------------------------------------------------------------
//  360 // device entry
//  361 //-----------------------------------------------------------------------------
//  362 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry );
//  363 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami );
//  364 #if defined NV_RESTORE
//  365 static void ZDSecMgrWriteNV(void);
//  366 static void ZDSecMgrRestoreFromNV(void);
//  367 #endif
//  368 
//  369 //-----------------------------------------------------------------------------
//  370 // device control
//  371 //-----------------------------------------------------------------------------
//  372 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device );
//  373 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device );
//  374 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state );
//  375 
//  376 //-----------------------------------------------------------------------------
//  377 // device management
//  378 //-----------------------------------------------------------------------------
//  379 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  380 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device );
//  381 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  382 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device );
//  383 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  384 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  385 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  386 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  387 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  388 
//  389 //-----------------------------------------------------------------------------
//  390 // association management
//  391 //-----------------------------------------------------------------------------
//  392 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  393 
//  394 //-----------------------------------------------------------------------------
//  395 // authentication management
//  396 //-----------------------------------------------------------------------------
//  397 void ZDSecMgrAuthInitiate( uint8* responder );
//  398 void ZDSecMgrAuthNwkKey( void );
//  399 
//  400 //-----------------------------------------------------------------------------
//  401 // APSME function
//  402 //-----------------------------------------------------------------------------
//  403 void APSME_TCLinkKeyInit( void );
//  404 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  405 
//  406 /******************************************************************************
//  407  * @fn          ZDSecMgrMasterKeyInit                     ]
//  408  *
//  409  * @brief       Initialize master key data.
//  410  *
//  411  * @param       none
//  412  *
//  413  * @return      none
//  414  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 void ZDSecMgrMasterKeyInit( void )
ZDSecMgrMasterKeyInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyInit
//  416 {
        FUNCALL ZDSecMgrMasterKeyInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  417   uint16 index;
//  418   uint16 size;
//  419 
//  420   // allocate MASTER key data
//  421   size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
//  422 
//  423   ZDSecMgrMasterKeyData = osal_mem_alloc( size );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x36
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine25 & 0xFFFF
//  424 
//  425   // initialize MASTER key data
//  426   if ( ZDSecMgrMasterKeyData != NULL )
??CrossCallReturnLabel_21:
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyInit_0:
        JZ      ??ZDSecMgrMasterKeyInit_1
//  427   {
//  428     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
        MOV     R0,#0x0
        MOV     R1,#0x0
//  429     {
//  430       ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrMasterKeyInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x12
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x12
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine14 & 0xFFFF
//  431     }
//  432   }
??CrossCallReturnLabel_109:
        JC      ??ZDSecMgrMasterKeyInit_2
//  433 }
??ZDSecMgrMasterKeyInit_1:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_109
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine81_0
        ; // Fall through to label ??Subroutine81_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine81_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_111
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_109
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_110
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_112:
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  434 //devtag.pro.security
//  435 #if 0
//  436 void ZDSecMgrMasterKeyInit( void )
//  437 {
//  438   uint16         index;
//  439   uint16         size;
//  440   AddrMgrEntry_t entry;
//  441 
//  442 
//  443   // allocate MASTER key data
//  444   size = (short)( sizeof(ZDSecMgrMasterKeyData_t) * ZDSECMGR_MASTERKEY_MAX );
//  445 
//  446   ZDSecMgrMasterKeyData = osal_mem_alloc( size );
//  447 
//  448   // initialize MASTER key data
//  449   if ( ZDSecMgrMasterKeyData != NULL )
//  450   {
//  451     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX; index++ )
//  452     {
//  453       ZDSecMgrMasterKeyData[index].ami = INVALID_NODE_ADDR;
//  454     }
//  455 
//  456     // check if preconfigured keys are enabled
//  457     //-------------------------------------------------------------------------
//  458     #if ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  459     //-------------------------------------------------------------------------
//  460     if ( zgPreConfigKeys == TRUE )
//  461     {
//  462       // sync configured data
//  463       entry.user = ADDRMGR_USER_SECURITY;
//  464 
//  465       for ( index = 0; index < ZDSECMGR_PRECONFIG_MAX; index++ )
//  466       {
//  467         // check for Address Manager entry
//  468         AddrMgrExtAddrSet( entry.extAddr,
//  469                            (uint8*)ZDSecMgrPreConfigData[index].extAddr );
//  470 
//  471         if ( AddrMgrEntryLookupExt( &entry ) != TRUE )
//  472         {
//  473           // update Address Manager
//  474           AddrMgrEntryUpdate( &entry );
//  475         }
//  476 
//  477         if ( entry.index != INVALID_NODE_ADDR )
//  478         {
//  479           // sync MASTER keys with Address Manager index
//  480           ZDSecMgrMasterKeyData[index].ami = entry.index;
//  481 
//  482           osal_memcpy( ZDSecMgrMasterKeyData[index].key,
//  483                    (void*)ZDSecMgrPreConfigData[index].key, SEC_KEY_LEN );
//  484         }
//  485       }
//  486     }
//  487     //-------------------------------------------------------------------------
//  488     #endif // ( ZDSECMGR_PRECONFIG_MAX != 0 )
//  489     //-------------------------------------------------------------------------
//  490   }
//  491 }
//  492 #endif
//  493 
//  494 /******************************************************************************
//  495  * @fn          ZDSecMgrAddrStore
//  496  *
//  497  * @brief       Store device addresses.
//  498  *
//  499  * @param       nwkAddr - [in] NWK address
//  500  * @param       extAddr - [in] EXT address
//  501  * @param       ami     - [out] Address Manager index
//  502  *
//  503  * @return      ZStatus_t
//  504  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  505 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ZDSecMgrAddrStore
//  506 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
//  507   ZStatus_t      status;
//  508   AddrMgrEntry_t entry;
//  509 
//  510 
//  511   // add entry
//  512   entry.user    = ADDRMGR_USER_SECURITY;
//  513   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_35:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  514   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_18:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
//  515 
//  516   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_88:
        JNZ     ??ZDSecMgrAddrStore_0
//  517   {
//  518     // return successful results
//  519     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  520     status = ZSuccess;
//  521   }
??CrossCallReturnLabel_114:
        SJMP    ??CrossCallReturnLabel_30
//  522   else
//  523   {
//  524     // return failed results
//  525     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
//  526     status = ZNwkUnknownDevice;
//  527   }
//  528 
//  529   return status;
??CrossCallReturnLabel_30:
        LJMP    ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock8
//  530 }
//  531 
//  532 /******************************************************************************
//  533  * @fn          ZDSecMgrExtAddrStore
//  534  *
//  535  * @brief       Store EXT address.
//  536  *
//  537  * @param       extAddr - [in] EXT address
//  538  * @param       ami     - [out] Address Manager index
//  539  *
//  540  * @return      ZStatus_t
//  541  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  542 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrStore
//  543 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine31 & 0xFFFF
//  544   ZStatus_t      status;
//  545   AddrMgrEntry_t entry;
//  546 
//  547 
//  548   // add entry
//  549   entry.user    = ADDRMGR_USER_SECURITY;
//  550   entry.nwkAddr = nwkAddr;
??CrossCallReturnLabel_36:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
//  551   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_19:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
//  552 
//  553   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_89:
        JNZ     ??ZDSecMgrExtAddrStore_0
//  554   {
//  555     // return successful results
//  556     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  557     status = ZSuccess;
//  558   }
??CrossCallReturnLabel_115:
        SJMP    ??CrossCallReturnLabel_31
//  559   else
//  560   {
//  561     // return failed results
//  562     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
//  563     status = ZNwkUnknownDevice;
//  564   }
//  565 
//  566   return status;
??CrossCallReturnLabel_31:
        LJMP    ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock9
//  567 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_89
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_90
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_189:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_204:
        MOV     R1,#-0x38
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_114
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine67 & 0xFFFF
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
??CrossCallReturnLabel_101:
        REQUIRE ??Subroutine82_0
        ; // Fall through to label ??Subroutine82_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine82_0:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_117
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_114
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_115
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_116
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_205:
        MOV     R1,#0x0
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_31
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_32
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_114
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_115
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_116
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  568 
//  569 /******************************************************************************
//  570  * @fn          ZDSecMgrExtAddrLookup
//  571  *
//  572  * @brief       Lookup index for specified EXT address.
//  573  *
//  574  * @param       extAddr - [in] EXT address
//  575  * @param       ami     - [out] Address Manager index
//  576  *
//  577  * @return      ZStatus_t
//  578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function ZDSecMgrExtAddrLookup
//  580 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  581   ZStatus_t      status;
//  582   AddrMgrEntry_t entry;
//  583 
//  584 
//  585   // lookup entry
//  586   entry.user = ADDRMGR_USER_SECURITY;
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  587   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine76 & 0xFFFF
//  588 
//  589   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
??CrossCallReturnLabel_108:
        LCALL   ??AddrMgrEntryLookupExt?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrExtAddrLookup_0
//  590   {
//  591     // return successful results
//  592     *ami   = entry.index;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
//  593     status = ZSuccess;
//  594   }
??CrossCallReturnLabel_116:
        SJMP    ??CrossCallReturnLabel_32
//  595   else
//  596   {
//  597     // return failed results
//  598     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine26 & 0xFFFF
        CFI EndBlock cfiBlock41
//  599     status = ZNwkUnknownDevice;
//  600   }
//  601 
//  602   return status;
??CrossCallReturnLabel_32:
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
//  603 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_88
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_89
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_90
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_108
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
//  604 
//  605 /******************************************************************************
//  606  * @fn          ZDSecMgrMasterKeyLookup
//  607  *
//  608  * @brief       Lookup MASTER key for specified address index.
//  609  *
//  610  * @param       ami - [in] Address Manager index
//  611  * @param       key - [out] valid MASTER key
//  612  *
//  613  * @return      ZStatus_t
//  614  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  615 ZStatus_t ZDSecMgrMasterKeyLookup( uint16 ami, uint8** key )
ZDSecMgrMasterKeyLookup:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLookup
//  616 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  617   ZStatus_t status;
//  618   uint16    index;
//  619 
//  620 
//  621   // initialize results
//  622   *key   = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  623   status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
//  624 
//  625   // verify data is available
//  626   if ( ZDSecMgrMasterKeyData != NULL )
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyLookup_0:
        JZ      ??ZDSecMgrMasterKeyLookup_1
//  627   {
//  628     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
        MOV     R6,#0x0
        MOV     R7,#0x0
//  629     {
//  630       if ( ZDSecMgrMasterKeyData[index].ami == ami )
??ZDSecMgrMasterKeyLookup_2:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,?V0 + 0
        MOV     B,#0x12
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R0,B
        MOV     B,#0x12
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_39:
        JNZ     ??ZDSecMgrMasterKeyLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrMasterKeyLookup_3:
        JNZ     ??ZDSecMgrMasterKeyLookup_4
//  631       {
//  632         // return successful results
//  633         *key   = ZDSecMgrMasterKeyData[index].key;
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine82_0 & 0xFFFF
//  634         status = ZSuccess;
//  635 
//  636         // break from loop
//  637         index  = ZDSECMGR_MASTERKEY_MAX;
??CrossCallReturnLabel_117:
        MOV     R6,#0x3
        MOV     R7,#0x0
//  638       }
//  639     }
??ZDSecMgrMasterKeyLookup_4:
        LCALL   ?Subroutine55 & 0xFFFF
//  640   }
??CrossCallReturnLabel_76:
        JC      ??ZDSecMgrMasterKeyLookup_2
//  641 
//  642   return status;
??ZDSecMgrMasterKeyLookup_1:
        SJMP    ??Subroutine83_0
        CFI EndBlock cfiBlock48
//  643 }
//  644 
//  645 /******************************************************************************
//  646  * @fn          ZDSecMgrMasterKeyStore
//  647  *
//  648  * @brief       Store MASTER key for specified address index.
//  649  *
//  650  * @param       ami - [in] Address Manager index
//  651  * @param       key - [in] valid key to store
//  652  *
//  653  * @return      ZStatus_t
//  654  */
//  655 ZStatus_t ZDSecMgrMasterKeyStore( uint16 ami, uint8* key )
//  656 {
//  657   ZStatus_t status;
//  658   uint16    index;
//  659   uint8*    entry;
//  660 
//  661 
//  662   // initialize results
//  663   status = ZNwkUnknownDevice;
//  664 
//  665   // verify data is available
//  666   if ( ZDSecMgrMasterKeyData != NULL )
//  667   {
//  668     for ( index = 0; index < ZDSECMGR_MASTERKEY_MAX ; index++ )
//  669     {
//  670       if ( ZDSecMgrMasterKeyData[index].ami == INVALID_NODE_ADDR )
//  671       {
//  672         // store EXT address index
//  673         ZDSecMgrMasterKeyData[index].ami = ami;
//  674 
//  675         entry = ZDSecMgrMasterKeyData[index].key;
//  676 
//  677         if ( key != NULL )
//  678         {
//  679           osal_memcpy( entry, key,  SEC_KEY_LEN );
//  680         }
//  681         else
//  682         {
//  683           osal_memset( entry, 0, SEC_KEY_LEN );
//  684         }
//  685 
//  686         // return successful results
//  687         status = ZSuccess;
//  688 
//  689         // break from loop
//  690         index  = ZDSECMGR_MASTERKEY_MAX;
//  691       }
//  692     }
//  693   }
//  694 
//  695   return status;
//  696 }
//  697 
//  698 /******************************************************************************
//  699  * @fn          ZDSecMgrEntryInit
//  700  *
//  701  * @brief       Initialize entry sub module
//  702  *
//  703  * @param       state - device initialization state
//  704  *
//  705  * @return      none
//  706  */
//  707 void ZDSecMgrEntryInit(uint8 state)
//  708 {
//  709   if (ZDSecMgrEntries == NULL)
//  710   {
//  711     uint16 index;
//  712 
//  713     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
//  714     {
//  715       return;
//  716     }
//  717 
//  718     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
//  719     {
//  720       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
//  721     }
//  722   }
//  723 
//  724 #if defined NV_RESTORE
//  725   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
//  726   {
//  727     ZDSecMgrRestoreFromNV();
//  728   }
//  729 #else
//  730   (void)state;
//  731 #endif
//  732 }
//  733 
//  734 /******************************************************************************
//  735  * @fn          ZDSecMgrEntryLookup
//  736  *
//  737  * @brief       Lookup entry index using specified NWK address.
//  738  *
//  739  * @param       nwkAddr - [in] NWK address
//  740  * @param       entry   - [out] valid entry
//  741  *
//  742  * @return      ZStatus_t
//  743  */
//  744 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
//  745 {
//  746   ZStatus_t      status;
//  747   uint16         index;
//  748   AddrMgrEntry_t addrMgrEntry;
//  749 
//  750 
//  751   // initialize results
//  752   *entry = NULL;
//  753   status = ZNwkUnknownDevice;
//  754 
//  755   // verify data is available
//  756   if ( ZDSecMgrEntries != NULL )
//  757   {
//  758     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
//  759     addrMgrEntry.nwkAddr = nwkAddr;
//  760 
//  761     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
//  762     {
//  763       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
//  764       {
//  765         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
//  766         {
//  767           // return successful results
//  768           *entry = &ZDSecMgrEntries[index];
//  769           status = ZSuccess;
//  770 
//  771           // break from loop
//  772           index = ZDSECMGR_ENTRY_MAX;
//  773         }
//  774       }
//  775     }
//  776   }
//  777 
//  778   return status;
//  779 }
//  780 
//  781 /******************************************************************************
//  782  * @fn          ZDSecMgrEntryLookupAMI
//  783  *
//  784  * @brief       Lookup entry using specified address index
//  785  *
//  786  * @param       ami   - [in] Address Manager index
//  787  * @param       entry - [out] valid entry
//  788  *
//  789  * @return      ZStatus_t
//  790  */
//  791 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
//  792 {
//  793   ZStatus_t status;
//  794   uint16    index;
//  795 
//  796 
//  797   // initialize results
//  798   *entry = NULL;
//  799   status = ZNwkUnknownDevice;
//  800 
//  801   // verify data is available
//  802   if ( ZDSecMgrEntries != NULL )
//  803   {
//  804     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
//  805     {
//  806       if ( ZDSecMgrEntries[index].ami == ami )
//  807       {
//  808         // return successful results
//  809         *entry = &ZDSecMgrEntries[index];
//  810         status = ZSuccess;
//  811 
//  812         // break from loop
//  813         index = ZDSECMGR_ENTRY_MAX;
//  814       }
//  815     }
//  816   }
//  817 
//  818   return status;
//  819 }
//  820 
//  821 /******************************************************************************
//  822  * @fn          ZDSecMgrEntryLookupExt
//  823  *
//  824  * @brief       Lookup entry index using specified EXT address.
//  825  *
//  826  * @param       extAddr - [in] EXT address
//  827  * @param       entry   - [out] valid entry
//  828  *
//  829  * @return      ZStatus_t
//  830  */
//  831 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
//  832 {
//  833   ZStatus_t status;
//  834   uint16    ami;
//  835 
//  836 
//  837   // initialize results
//  838   *entry = NULL;
//  839   status = ZNwkUnknownDevice;
//  840 
//  841   // lookup address index
//  842   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
//  843   {
//  844     status = ZDSecMgrEntryLookupAMI( ami, entry );
//  845   }
//  846 
//  847   return status;
//  848 }
//  849 
//  850 /******************************************************************************
//  851  * @fn          ZDSecMgrEntryFree
//  852  *
//  853  * @brief       Free entry.
//  854  *
//  855  * @param       entry - [in] valid entry
//  856  *
//  857  * @return      ZStatus_t
//  858  */
//  859 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
//  860 {
//  861   entry->ami = INVALID_NODE_ADDR;
//  862 }
//  863 
//  864 /******************************************************************************
//  865  * @fn          ZDSecMgrEntryNew
//  866  *
//  867  * @brief       Get a new entry.
//  868  *
//  869  * @param       entry - [out] valid entry
//  870  *
//  871  * @return      ZStatus_t
//  872  */
//  873 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
//  874 {
//  875   ZStatus_t status;
//  876   uint16    index;
//  877 
//  878 
//  879   // initialize results
//  880   *entry = NULL;
//  881   status = ZNwkUnknownDevice;
//  882 
//  883   // verify data is available
//  884   if ( ZDSecMgrEntries != NULL )
//  885   {
//  886     // find available entry
//  887     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
//  888     {
//  889       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
//  890       {
//  891         // return successful result
//  892         *entry = &ZDSecMgrEntries[index];
//  893         status = ZSuccess;
//  894 
//  895         // Set the authentication option to default
//  896         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
//  897 
//  898         // break from loop
//  899         index = ZDSECMGR_ENTRY_MAX;
//  900       }
//  901     }
//  902   }
//  903 
//  904   return status;
//  905 }
//  906 
//  907 /******************************************************************************
//  908  * @fn          ZDSecMgrCtrlInit
//  909  *
//  910  * @brief       Initialize control sub module
//  911  *
//  912  * @param       none
//  913  *
//  914  * @return      none
//  915  */
//  916 void ZDSecMgrCtrlInit( void )
//  917 {
//  918   uint16 size;
//  919   uint16 index;
//  920 
//  921   // allocate entry data
//  922   size = (short)( sizeof(ZDSecMgrCtrl_t) * ZDSECMGR_CTRL_MAX );
//  923 
//  924   ZDSecMgrCtrlData = osal_mem_alloc( size );
//  925 
//  926   // initialize data
//  927   if ( ZDSecMgrCtrlData != NULL )
//  928   {
//  929     for( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
//  930     {
//  931       ZDSecMgrCtrlData[index].state = ZDSECMGR_CTRL_NONE;
//  932     }
//  933   }
//  934 }
//  935 
//  936 /******************************************************************************
//  937  * @fn          ZDSecMgrCtrlRelease
//  938  *
//  939  * @brief       Release control data.
//  940  *
//  941  * @param       ctrl - [in] valid control data
//  942  *
//  943  * @return      none
//  944  */
//  945 void ZDSecMgrCtrlRelease( ZDSecMgrCtrl_t* ctrl )
//  946 {
//  947   // should always be enough entry control data
//  948   ctrl->state = ZDSECMGR_CTRL_NONE;
//  949 }
//  950 
//  951 /******************************************************************************
//  952  * @fn          ZDSecMgrCtrlLookup
//  953  *
//  954  * @brief       Lookup control data.
//  955  *
//  956  * @param       entry - [in] valid entry data
//  957  * @param       ctrl  - [out] control data - NULL if not found
//  958  *
//  959  * @return      none
//  960  */
//  961 void ZDSecMgrCtrlLookup( ZDSecMgrEntry_t* entry, ZDSecMgrCtrl_t** ctrl )
//  962 {
//  963   uint16 index;
//  964 
//  965 
//  966   // initialize search results
//  967   *ctrl = NULL;
//  968 
//  969   // verify data is available
//  970   if ( ZDSecMgrCtrlData != NULL )
//  971   {
//  972     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
//  973     {
//  974       // make sure control data is in use
//  975       if ( ZDSecMgrCtrlData[index].state != ZDSECMGR_CTRL_NONE )
//  976       {
//  977         // check for entry match
//  978         if ( ZDSecMgrCtrlData[index].entry == entry )
//  979         {
//  980           // return this control data
//  981           *ctrl = &ZDSecMgrCtrlData[index];
//  982 
//  983           // break from loop
//  984           index = ZDSECMGR_CTRL_MAX;
//  985         }
//  986       }
//  987     }
//  988   }
//  989 }
//  990 
//  991 /******************************************************************************
//  992  * @fn          ZDSecMgrCtrlSet
//  993  *
//  994  * @brief       Set control data.
//  995  *
//  996  * @param       device - [in] valid device data
//  997  * @param       entry  - [in] valid entry data
//  998  * @param       ctrl   - [in] valid control data
//  999  *
// 1000  * @return      none
// 1001  */
// 1002 void ZDSecMgrCtrlSet( ZDSecMgrDevice_t* device,
// 1003                       ZDSecMgrEntry_t*  entry,
// 1004                       ZDSecMgrCtrl_t*   ctrl )
// 1005 {
// 1006   // set control date
// 1007   ctrl->parentAddr = device->parentAddr;
// 1008   ctrl->secure     = device->secure;
// 1009   ctrl->entry      = entry;
// 1010   ctrl->state      = ZDSECMGR_CTRL_INIT;
// 1011   ctrl->cntr       = 0;
// 1012 
// 1013   // set device pointer
// 1014   device->ctrl = ctrl;
// 1015 }
// 1016 
// 1017 /******************************************************************************
// 1018  * @fn          ZDSecMgrCtrlAdd
// 1019  *
// 1020  * @brief       Add control data.
// 1021  *
// 1022  * @param       device - [in] valid device data
// 1023  * @param       entry  - [in] valid entry data
// 1024  *
// 1025  * @return      ZStatus_t
// 1026  */
// 1027 ZStatus_t ZDSecMgrCtrlAdd( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t*  entry )
// 1028 {
// 1029   ZStatus_t status;
// 1030   uint16    index;
// 1031 
// 1032 
// 1033   // initialize results
// 1034   status = ZNwkUnknownDevice;
// 1035 
// 1036   // verify data is available
// 1037   if ( ZDSecMgrCtrlData != NULL )
// 1038   {
// 1039     // look for an empty slot
// 1040     for ( index = 0; index < ZDSECMGR_CTRL_MAX; index++ )
// 1041     {
// 1042       if ( ZDSecMgrCtrlData[index].state == ZDSECMGR_CTRL_NONE )
// 1043       {
// 1044         // return successful results
// 1045         ZDSecMgrCtrlSet( device, entry, &ZDSecMgrCtrlData[index] );
// 1046 
// 1047         status = ZSuccess;
// 1048 
// 1049         // break from loop
// 1050         index = ZDSECMGR_CTRL_MAX;
// 1051       }
// 1052     }
// 1053   }
// 1054 
// 1055   return status;
// 1056 }
// 1057 
// 1058 /******************************************************************************
// 1059  * @fn          ZDSecMgrCtrlTerm
// 1060  *
// 1061  * @brief       Terminate device control.
// 1062  *
// 1063  * @param       entry - [in] valid entry data
// 1064  *
// 1065  * @return      none
// 1066  */
// 1067 void ZDSecMgrCtrlTerm( ZDSecMgrEntry_t* entry )
// 1068 {
// 1069   ZDSecMgrCtrl_t* ctrl;
// 1070 
// 1071   // remove device from control data
// 1072   ZDSecMgrCtrlLookup ( entry, &ctrl );
// 1073 
// 1074   if ( ctrl != NULL )
// 1075   {
// 1076     ZDSecMgrCtrlRelease ( ctrl );
// 1077   }
// 1078 }
// 1079 
// 1080 /******************************************************************************
// 1081  * @fn          ZDSecMgrCtrlReset
// 1082  *
// 1083  * @brief       Reset control data.
// 1084  *
// 1085  * @param       device - [in] valid device data
// 1086  * @param       entry  - [in] valid entry data
// 1087  *
// 1088  * @return      ZStatus_t
// 1089  */
// 1090 ZStatus_t ZDSecMgrCtrlReset( ZDSecMgrDevice_t* device, ZDSecMgrEntry_t* entry )
// 1091 {
// 1092   ZStatus_t       status;
// 1093   ZDSecMgrCtrl_t* ctrl;
// 1094 
// 1095 
// 1096   // initialize results
// 1097   status = ZNwkUnknownDevice;
// 1098 
// 1099   // look for a match for the entry
// 1100   ZDSecMgrCtrlLookup( entry, &ctrl );
// 1101 
// 1102   if ( ctrl != NULL )
// 1103   {
// 1104     ZDSecMgrCtrlSet( device, entry, ctrl );
// 1105 
// 1106     status = ZSuccess;
// 1107   }
// 1108   else
// 1109   {
// 1110     status = ZDSecMgrCtrlAdd( device, entry );
// 1111   }
// 1112 
// 1113   return status;
// 1114 }
// 1115 
// 1116 /******************************************************************************
// 1117  * @fn          ZDSecMgrMasterKeyLoad
// 1118  *
// 1119  * @brief       Load the MASTER key for device with specified EXT
// 1120  *              address.
// 1121  *
// 1122  * @param       extAddr - [in] EXT address of device
// 1123  * @param       key     - [in] MASTER key shared with device
// 1124  *
// 1125  * @return      ZStatus_t
// 1126  */
// 1127 ZStatus_t ZDSecMgrMasterKeyLoad( uint8* extAddr, uint8* key )
// 1128 {
// 1129   ZStatus_t status;
// 1130   uint8*    loaded;
// 1131   uint16    ami;
// 1132 
// 1133 
// 1134   // set status based on policy
// 1135   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 1136 
// 1137   if ( status == ZSuccess )
// 1138   {
// 1139     // get the address index
// 1140     if ( ZDSecMgrMasterKeyLookup( ami, &loaded ) == ZSuccess )
// 1141     {
// 1142       // overwrite old key
// 1143       osal_memcpy( loaded, key, SEC_KEY_LEN );
// 1144     }
// 1145     else
// 1146     {
// 1147       // store new key -- NULL will zero key
// 1148       status = ZDSecMgrMasterKeyStore( ami, key );
// 1149     }
// 1150   }
// 1151 
// 1152   return status;
// 1153 }
// 1154 
// 1155 /******************************************************************************
// 1156  * @fn          ZDSecMgrAppKeyGet
// 1157  *
// 1158  * @brief       get an APP key - option APP(MASTER or LINK) key
// 1159  *
// 1160  * @param       initNwkAddr - [in] NWK address of initiator device
// 1161  * @param       initExtAddr - [in] EXT address of initiator device
// 1162  * @param       partNwkAddr - [in] NWK address of partner device
// 1163  * @param       partExtAddr - [in] EXT address of partner device
// 1164  * @param       key         - [out] APP(MASTER or LINK) key
// 1165  * @param       keyType     - [out] APP(MASTER or LINK) key type
// 1166  *
// 1167  * @return      ZStatus_t
// 1168  */

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
// 1169 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
// 1170                                                  // to KEY_TYPE_APP_LINK since
// 1171                                                  // only specific requirement
// 1172                                                  // right now comes from SE profile
// 1173 
// 1174 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
// 1175                              uint8*  initExtAddr,
// 1176                              uint16  partNwkAddr,
// 1177                              uint8*  partExtAddr,
// 1178                              uint8** key,
// 1179                              uint8*  keyType )
// 1180 {
// 1181   // Intentionally unreferenced parameters
// 1182   (void)initNwkAddr;
// 1183   (void)initExtAddr;
// 1184   (void)partNwkAddr;
// 1185   (void)partExtAddr;
// 1186   
// 1187   //---------------------------------------------------------------------------
// 1188   // note:
// 1189   // should use a robust mechanism to generate keys, for example
// 1190   // combine EXT addresses and call a hash function
// 1191   //---------------------------------------------------------------------------
// 1192   SSP_GetTrueRand( SEC_KEY_LEN, *key );
// 1193 
// 1194   *keyType = ZDSecMgrAppKeyType;
// 1195 
// 1196   return ZSuccess;
// 1197 }
// 1198 
// 1199 /******************************************************************************
// 1200  * @fn          ZDSecMgrAppKeyReq
// 1201  *
// 1202  * @brief       Process request for APP key between two devices.
// 1203  *
// 1204  * @param       device - [in] ZDO_RequestKeyInd_t, request info
// 1205  *
// 1206  * @return      none
// 1207  */
// 1208 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
// 1209 {
// 1210   APSME_TransportKeyReq_t req;
// 1211   uint8                   initExtAddr[Z_EXTADDR_LEN];
// 1212   uint16                  partNwkAddr;
// 1213   uint8                   key[SEC_KEY_LEN];
// 1214 
// 1215 
// 1216   // validate initiator and partner
// 1217   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
// 1218        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
// 1219   {
// 1220     // point the key to some memory
// 1221     req.key = key;
// 1222 
// 1223     // get an APP key - option APP (MASTER or LINK) key
// 1224     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
// 1225                             initExtAddr,
// 1226                             partNwkAddr,
// 1227                             ind->partExtAddr,
// 1228                             &req.key,
// 1229                             &req.keyType ) == ZSuccess )
// 1230     {
// 1231       // always secure
// 1232       req.nwkSecure = TRUE;
// 1233       req.apsSecure = TRUE;
// 1234       req.tunnel    = NULL;
// 1235 
// 1236       // send key to initiator device
// 1237       req.dstAddr   = ind->srcAddr;
// 1238       req.extAddr   = ind->partExtAddr;
// 1239       req.initiator = TRUE;
// 1240       APSME_TransportKeyReq( &req );
// 1241 
// 1242       // send key to partner device
// 1243       req.dstAddr   = partNwkAddr;
// 1244       req.extAddr   = initExtAddr;
// 1245       req.initiator = FALSE;
// 1246 
// 1247       APSME_TransportKeyReq( &req );
// 1248     }
// 1249   }
// 1250 }
// 1251 
// 1252 /******************************************************************************
// 1253  * @fn          ZDSecMgrEstablishKey
// 1254  *
// 1255  * @brief       Start SKKE with device joining network.
// 1256  *
// 1257  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1258  *
// 1259  * @return      ZStatus_t
// 1260  */
// 1261 ZStatus_t ZDSecMgrEstablishKey( ZDSecMgrDevice_t* device )
// 1262 {
// 1263   ZStatus_t               status;
// 1264   APSME_EstablishKeyReq_t req;
// 1265 
// 1266 
// 1267   req.respExtAddr = device->extAddr;
// 1268   req.method      = APSME_SKKE_METHOD;
// 1269 
// 1270   if ( device->parentAddr == NLME_GetShortAddr() )
// 1271   {
// 1272     req.dstAddr   = device->nwkAddr;
// 1273     //devtag.0604.todo - remove obsolete
// 1274     req.apsSecure = FALSE;
// 1275     req.nwkSecure = FALSE;
// 1276   }
// 1277   else
// 1278   {
// 1279     req.dstAddr   = device->parentAddr;
// 1280     //devtag.0604.todo - remove obsolete
// 1281     req.apsSecure = TRUE;
// 1282     req.nwkSecure = TRUE;
// 1283   }
// 1284 
// 1285   status = APSME_EstablishKeyReq( &req );
// 1286 
// 1287   return status;
// 1288 }
// 1289 
// 1290 /******************************************************************************
// 1291  * @fn          ZDSecMgrSendMasterKey
// 1292  *
// 1293  * @brief       Send MASTER key to device joining network.
// 1294  *
// 1295  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1296  *
// 1297  * @return      ZStatus_t
// 1298  */
// 1299 ZStatus_t ZDSecMgrSendMasterKey( ZDSecMgrDevice_t* device )
// 1300 {
// 1301   ZStatus_t               status;
// 1302   APSME_TransportKeyReq_t req;
// 1303 
// 1304 
// 1305   req.keyType = KEY_TYPE_TC_MASTER;
// 1306   req.extAddr = device->extAddr;
// 1307   req.tunnel  = NULL;
// 1308 
// 1309   ZDSecMgrMasterKeyLookup( device->ctrl->entry->ami, &req.key );
// 1310 
// 1311   //check if using secure hop to to parent
// 1312   if ( device->parentAddr != NLME_GetShortAddr() )
// 1313   {
// 1314     //send to parent with security
// 1315     req.dstAddr   = device->parentAddr;
// 1316     req.nwkSecure = TRUE;
// 1317     req.apsSecure = TRUE;
// 1318   }
// 1319   else
// 1320   {
// 1321     //direct with no security
// 1322     req.dstAddr   = device->nwkAddr;
// 1323     req.nwkSecure = FALSE;
// 1324     req.apsSecure = FALSE;
// 1325   }
// 1326 
// 1327   status = APSME_TransportKeyReq( &req );
// 1328 
// 1329   return status;
// 1330 }
// 1331 
// 1332 /******************************************************************************
// 1333  * @fn          ZDSecMgrSendNwkKey
// 1334  *
// 1335  * @brief       Send NWK key to device joining network.
// 1336  *
// 1337  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1338  *
// 1339  * @return      ZStatus_t
// 1340  */
// 1341 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
// 1342 {
// 1343   ZStatus_t               status;
// 1344   APSME_TransportKeyReq_t req;
// 1345   APSDE_FrameTunnel_t     tunnel;
// 1346 
// 1347   req.dstAddr   = device->nwkAddr;
// 1348   req.extAddr   = device->extAddr;
// 1349 
// 1350   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 1351     req.keyType   = KEY_TYPE_NWK_HIGH;
// 1352   else
// 1353     req.keyType   = KEY_TYPE_NWK;
// 1354 
// 1355   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 1356       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 1357   {
// 1358     // set values
// 1359     req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
// 1360     req.key       = _NIB.nwkActiveKey.key;
// 1361     //devtag.pro.security.todo - make sure that if there is no link key the NWK
// 1362     //key isn't used to secure the frame at the APS layer -- since the receiving
// 1363     //device may not have a NWK key yet
// 1364     req.apsSecure = TRUE;
// 1365 
// 1366     // check if using secure hop to to parent
// 1367     if ( device->parentAddr == NLME_GetShortAddr() )
// 1368     {
// 1369       req.nwkSecure = FALSE;
// 1370       req.tunnel    = NULL;
// 1371     }
// 1372     else
// 1373     {
// 1374       req.nwkSecure   = TRUE;
// 1375       req.tunnel      = &tunnel;
// 1376       req.tunnel->tna = device->parentAddr;
// 1377       req.tunnel->dea = device->extAddr;
// 1378     }
// 1379   }
// 1380   else
// 1381   {
// 1382     // default values
// 1383     //devtag.0604.verify
// 1384     req.nwkSecure = TRUE;
// 1385     req.apsSecure = FALSE;
// 1386     req.tunnel    = NULL;
// 1387 
// 1388     if ( device->parentAddr != NLME_GetShortAddr() )
// 1389     {
// 1390       req.dstAddr = device->parentAddr;
// 1391     }
// 1392 
// 1393     // special cases
// 1394     //devtag.0604.todo - modify to preconfig flag
// 1395     if ( device->secure == FALSE )
// 1396     {
// 1397       req.keySeqNum = _NIB.nwkActiveKey.keySeqNum;
// 1398       req.key       = _NIB.nwkActiveKey.key;
// 1399 
// 1400       // check if using secure hop to to parent
// 1401       if ( device->parentAddr == NLME_GetShortAddr() )
// 1402       {
// 1403         req.nwkSecure = FALSE;
// 1404       }
// 1405     }
// 1406     else
// 1407     {
// 1408       req.key       = NULL;
// 1409       req.keySeqNum = 0;
// 1410     }
// 1411   }
// 1412 
// 1413   status = APSME_TransportKeyReq( &req );
// 1414 
// 1415   return status;
// 1416 }
// 1417 
// 1418 /******************************************************************************
// 1419  * @fn          ZDSecMgrDeviceEntryRemove
// 1420  *
// 1421  * @brief       Remove device entry.
// 1422  *
// 1423  * @param       entry - [in] valid entry
// 1424  *
// 1425  * @return      none
// 1426  */
// 1427 void ZDSecMgrDeviceEntryRemove( ZDSecMgrEntry_t* entry )
// 1428 {
// 1429   // terminate device control
// 1430   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1431   {
// 1432     ZDSecMgrCtrlTerm( entry );
// 1433   }
// 1434 
// 1435   // remove device from entry data
// 1436   ZDSecMgrEntryFree( entry );
// 1437 
// 1438   // remove EXT address
// 1439   //ZDSecMgrExtAddrRelease( aiOld );
// 1440 }
// 1441 
// 1442 /******************************************************************************
// 1443  * @fn          ZDSecMgrDeviceRemoveByExtAddr
// 1444  *
// 1445  * @brief       Remove device entry by its ext address.
// 1446  *
// 1447  * @param       pAddr - pointer to the extended address
// 1448  *
// 1449  * @return      ZStatus_t
// 1450  */
// 1451 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
// 1452 {
// 1453   ZDSecMgrEntry_t *pEntry;
// 1454   uint8           retValue;
// 1455   
// 1456   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
// 1457   
// 1458   if( retValue == ZSuccess )
// 1459   {
// 1460     ZDSecMgrDeviceEntryRemove( pEntry );
// 1461   }
// 1462   
// 1463   return retValue;
// 1464 }
// 1465 
// 1466 /******************************************************************************
// 1467  * @fn          ZDSecMgrDeviceEntryAdd
// 1468  *
// 1469  * @brief       Add entry.
// 1470  *
// 1471  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1472  * @param       ami    - [in] Address Manager index
// 1473  *
// 1474  * @return      ZStatus_t
// 1475  */
// 1476 void ZDSecMgrAddrMgrUpdate( uint16 ami, uint16 nwkAddr )
// 1477 {
// 1478   AddrMgrEntry_t entry;
// 1479 
// 1480   // get the ami data
// 1481   entry.user  = ADDRMGR_USER_SECURITY;
// 1482   entry.index = ami;
// 1483 
// 1484   AddrMgrEntryGet( &entry );
// 1485 
// 1486   // check if NWK address is same
// 1487   if ( entry.nwkAddr != nwkAddr )
// 1488   {
// 1489     // update NWK address
// 1490     entry.nwkAddr = nwkAddr;
// 1491 
// 1492     AddrMgrEntryUpdate( &entry );
// 1493   }
// 1494 }
// 1495 

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock49
        REQUIRE ??Subroutine83_0
        ; // Fall through to label ??Subroutine83_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine83_0:
        CFI Block cfiBlock50 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrMasterKeyStore:
        CFI Block cfiBlock51 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyStore
        FUNCALL ZDSecMgrMasterKeyStore, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyStore, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     R1,#-0x38
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrMasterKeyStore_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrMasterKeyStore_0:
        JZ      ??ZDSecMgrMasterKeyStore_1
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDSecMgrMasterKeyStore_2:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x12
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x12
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrMasterKeyData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrMasterKeyStore_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrMasterKeyStore_3:
        JNZ     ??ZDSecMgrMasterKeyStore_4
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_219:
        MOV     A,R4
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R6
        JNZ     ??ZDSecMgrMasterKeyStore_5
        MOV     A,R7
??ZDSecMgrMasterKeyStore_5:
        JZ      ??ZDSecMgrMasterKeyStore_6
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x10
        MOV     R5,#0x0
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_238:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        SJMP    ??ZDSecMgrMasterKeyStore_7
??ZDSecMgrMasterKeyStore_6:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
??ZDSecMgrMasterKeyStore_7:
        MOV     R1,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
??ZDSecMgrMasterKeyStore_4:
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_82:
        JC      ??ZDSecMgrMasterKeyStore_2
??ZDSecMgrMasterKeyStore_1:
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryInit:
        CFI Block cfiBlock52 Using cfiCommon0
        CFI Function ZDSecMgrEntryInit
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_0:
        JNZ     ??ZDSecMgrEntryInit_1
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x57
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryInit_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryInit_2:
        JZ      ??ZDSecMgrEntryInit_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrEntryInit_3:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_110:
        JC      ??ZDSecMgrEntryInit_3
??ZDSecMgrEntryInit_1:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryLookup:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookup
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 0,#-0x38
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEntryLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookup_0:
        JZ      ??ZDSecMgrEntryLookup_1
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_143:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrEntryLookup_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrEntryLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x1d
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x1d
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDSecMgrEntryLookup_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDSecMgrEntryLookup_3:
        JNZ     ??ZDSecMgrEntryLookup_4
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_168:
        MOV     ?V0 + 0,#0x0
        MOV     R0,#0x3
        MOV     R1,#0x0
??ZDSecMgrEntryLookup_4:
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_84:
        JC      ??ZDSecMgrEntryLookup_2
??ZDSecMgrEntryLookup_1:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock53

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryLookupAMI:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupAMI
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ     ??ZDSecMgrEntryLookupAMI_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryLookupAMI_0:
        JZ      ??ZDSecMgrEntryLookupAMI_1
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEntryLookupAMI_2:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,?V0 + 0
        MOV     B,#0x1d
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R0,B
        MOV     B,#0x1d
        MOV     A,?V0 + 1
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 1,A
        MOV     DPTR,#ZDSecMgrEntries
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_40:
        JNZ     ??ZDSecMgrEntryLookupAMI_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDSecMgrEntryLookupAMI_3:
        JNZ     ??ZDSecMgrEntryLookupAMI_4
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_220:
        MOV     R1,#0x0
        MOV     R6,#0x3
        MOV     R7,#0x0
??ZDSecMgrEntryLookupAMI_4:
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_77:
        JC      ??ZDSecMgrEntryLookupAMI_2
??ZDSecMgrEntryLookupAMI_1:
        LJMP    ??Subroutine83_0 & 0xFFFF
        CFI EndBlock cfiBlock54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOVX    A,@DPTR
        ADD     A,?V0 + 0
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 1
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryLookupExt:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function ZDSecMgrEntryLookupExt
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 0,#-0x38
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEntryLookupExt_0
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrEntryLookupExt_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryFree:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function ZDSecMgrEntryFree
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock59

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEntryNew:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function ZDSecMgrEntryNew
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ     ??ZDSecMgrEntryNew_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEntryNew_0:
        JZ      ??ZDSecMgrEntryNew_1
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEntryNew_2:
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x1d
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x1d
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDSecMgrEntryNew_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDSecMgrEntryNew_3:
        JNZ     ??ZDSecMgrEntryNew_4
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_216:
        MOV     R1,#0x0
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R5,A
        MOV     A,#0x1c
        ADD     A,R4
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        MOV     R6,#0x3
        MOV     R7,A
??ZDSecMgrEntryNew_4:
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_78:
        JC      ??ZDSecMgrEntryNew_2
??ZDSecMgrEntryNew_1:
        LJMP    ??Subroutine83_0 & 0xFFFF
        CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0x3
        MOV     A,R7
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond66 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     R1,#-0x38
        MOV     DPTR,#ZDSecMgrEntries
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlInit:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI Function ZDSecMgrCtrlInit
        FUNCALL ZDSecMgrCtrlInit, osal_mem_alloc
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x15
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlInit_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlInit_0:
        JZ      ??ZDSecMgrCtrlInit_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrCtrlInit_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_99:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        LCALL   ??Subroutine81_0 & 0xFFFF
??CrossCallReturnLabel_111:
        JC      ??ZDSecMgrCtrlInit_2
??ZDSecMgrCtrlInit_1:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_109
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_110
        CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond71) CFA_SP SP+-5
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_99
        CFI (cfiCond72) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond72) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond72) CFA_SP SP+-5
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     DPL,R4
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlRelease:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function ZDSecMgrCtrlRelease
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        CLR     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LJMP    ??Subroutine95_0 & 0xFFFF
        CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlLookup:
        CFI Block cfiBlock75 Using cfiCommon0
        CFI Function ZDSecMgrCtrlLookup
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlLookup_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlLookup_0:
        JZ      ??ZDSecMgrCtrlLookup_1
        MOV     R0,#0x0
        MOV     R1,#0x0
??ZDSecMgrCtrlLookup_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,?V0 + 0
        MOV     R3,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDSecMgrCtrlLookup_3
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,R6
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrCtrlLookup_4
        MOV     A,R7
        XRL     A,?V0 + 1
??ZDSecMgrCtrlLookup_4:
        JNZ     ??ZDSecMgrCtrlLookup_3
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV     R0,#0x3
        MOV     R1,#0x0
??ZDSecMgrCtrlLookup_3:
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_85:
        JC      ??ZDSecMgrCtrlLookup_2
??ZDSecMgrCtrlLookup_1:
        LJMP    ??Subroutine89_0 & 0xFFFF
        CFI EndBlock cfiBlock75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_113:
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_109
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_110
        CFI (cfiCond80) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond80) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond80) CFA_SP SP+-5
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_111
        CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond81) CFA_SP SP+-5
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_84
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_85
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x3
        MOV     A,R1
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlSet:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function ZDSecMgrCtrlSet
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_159:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        CLR     A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_170:
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlAdd:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function ZDSecMgrCtrlAdd
        FUNCALL ZDSecMgrCtrlAdd, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R1,#-0x38
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlAdd_0:
        JZ      ??ZDSecMgrCtrlAdd_1
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDSecMgrCtrlAdd_2:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrCtrlAdd_3
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
??ZDSecMgrCtrlAdd_3:
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_83:
        JC      ??ZDSecMgrCtrlAdd_2
??ZDSecMgrCtrlAdd_1:
        LJMP    ??Subroutine103_0 & 0xFFFF
        CFI EndBlock cfiBlock89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
        CFI Block cfiCond90 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_82
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_83
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker92 Using cfiCommon1
        CFI (cfiPicker92) NoFunction
        CFI (cfiPicker92) Picker
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x3
        MOV     A,R3
        SUBB    A,#0x0
        RET
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlTerm:
        CFI Block cfiBlock93 Using cfiCommon0
        CFI Function ZDSecMgrCtrlTerm
        FUNCALL ZDSecMgrCtrlTerm, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_91:
        JNZ     ??ZDSecMgrCtrlTerm_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlTerm_0:
        JZ      ??CrossCallReturnLabel_46
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_46:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock93

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrCtrlReset:
        CFI Block cfiBlock94 Using cfiCommon0
        CFI Function ZDSecMgrCtrlReset
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrCtrlReset, ZDSecMgrCtrlAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_92:
        JNZ     ??ZDSecMgrCtrlReset_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrCtrlReset_0:
        JZ      ??ZDSecMgrCtrlReset_1
        ; Setup parameters for call to function ZDSecMgrCtrlSet
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrCtrlReset_2
??ZDSecMgrCtrlReset_1:
        ; Setup parameters for call to function ZDSecMgrCtrlAdd
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrCtrlAdd?relay
        CFI EndBlock cfiBlock94
??ZDSecMgrCtrlReset_2:
        REQUIRE ?Subroutine10
        ; // Fall through to label ?Subroutine10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiBlock95 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_91
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker99 Using cfiCommon1
        CFI (cfiPicker99) NoFunction
        CFI (cfiPicker99) Picker
        LCALL   ??ZDSecMgrCtrlLookup?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrMasterKeyLoad:
        CFI Block cfiBlock100 Using cfiCommon0
        CFI Function ZDSecMgrMasterKeyLoad
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrMasterKeyLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 3,A
        JNZ     ??ZDSecMgrMasterKeyLoad_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_43:
        JNZ     ??ZDSecMgrMasterKeyLoad_1
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine109_0 & 0xFFFF
??CrossCallReturnLabel_231:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??ZDSecMgrMasterKeyLoad_0
??ZDSecMgrMasterKeyLoad_1:
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,R1
        MOV     ?V0 + 3,A
??ZDSecMgrMasterKeyLoad_0:
        MOV     R1,?V0 + 3
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock100

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyGet:
        CFI Block cfiBlock101 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyGet
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function SSP_GetTrueRand
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     R1,#0x0
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAppKeyReq:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function ZDSecMgrAppKeyReq
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, SSP_GetTrueRand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 39
        MOV     A,#-0x27
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 49)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ADD     A,#0x5
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_80:
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine86_0 & 0xFFFF
??CrossCallReturnLabel_124:
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_130:
        LCALL   ??APSME_LookupExtAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_171:
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x10
        LCALL   ??SSP_GetTrueRand?relay
        MOV     DPTR,#ZDSecMgrAppKeyType
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_172:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_173:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_199:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
??ZDSecMgrAppKeyReq_0:
        MOV     A,#0x27
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock102

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKey:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKey
        FUNCALL ZDSecMgrEstablishKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKey, APSME_EstablishKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_174:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_118:
        JNZ     ??ZDSecMgrEstablishKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrEstablishKey_0:
        JNZ     ??ZDSecMgrEstablishKey_1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_160:
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_121:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrEstablishKey_2
??ZDSecMgrEstablishKey_1:
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_122:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrEstablishKey_2:
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_145:
        LCALL   ??APSME_EstablishKeyReq?relay
        MOV     A,#0x7
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_118
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106
        REQUIRE ??Subroutine84_0
        ; // Fall through to label ??Subroutine84_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine84_0:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_120
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_118
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_119
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_195:
        MOV     A,R2
        XRL     A,R0
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond113) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond113) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond113) CFA_SP SP+-5
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiPicker114 Using cfiCommon1
        CFI (cfiPicker114) NoFunction
        CFI (cfiPicker114) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_190:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_121
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117
        REQUIRE ??Subroutine85_0
        ; // Fall through to label ??Subroutine85_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine85_0:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_123
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_121
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_122
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_206:
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV     A,#0x5
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendMasterKey:
        CFI Block cfiBlock122 Using cfiCommon0
        CFI Function ZDSecMgrSendMasterKey
        FUNCALL ZDSecMgrSendMasterKey, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendMasterKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_175:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_70:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_119:
        JNZ     ??ZDSecMgrSendMasterKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendMasterKey_0:
        JZ      ??ZDSecMgrSendMasterKey_1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_197:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrSendMasterKey_2
??ZDSecMgrSendMasterKey_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_161:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_198:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??ZDSecMgrSendMasterKey_2:
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_146:
        LCALL   ??APSME_TransportKeyReq?relay
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock122

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSendNwkKey:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function ZDSecMgrSendNwkKey
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine87_0 & 0xFFFF
??CrossCallReturnLabel_129:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R6
        ADD     A,#0x4
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine84_0 & 0xFFFF
??CrossCallReturnLabel_120:
        JNZ     ??ZDSecMgrSendNwkKey_0
        MOV     A,R3
        XRL     A,R1
??ZDSecMgrSendNwkKey_0:
        JZ      ??CrossCallReturnLabel_182
        LCALL   ??Subroutine99_0 & 0xFFFF
??CrossCallReturnLabel_182:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrSendNwkKey_1
        MOV     DPTR,#(_NIB + 62)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#((_NIB + 63) & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(((_NIB + 63) >> 8) & 0xff)
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDSecMgrSendNwkKey_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDSecMgrSendNwkKey_2:
        JNZ     ??ZDSecMgrSendNwkKey_3
        MOV     A,#0xa
        SJMP    ??ZDSecMgrSendNwkKey_4
??ZDSecMgrSendNwkKey_1:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0x3
??ZDSecMgrSendNwkKey_4:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
??ZDSecMgrSendNwkKey_3:
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_TransportKeyReq?relay
        MOV     A,#0xd
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_125
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        MOV     R0,A
        MOV     A,R7
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126
        REQUIRE ??Subroutine86_0
        ; // Fall through to label ??Subroutine86_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine86_0:
        CFI Block cfiCond127 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_124
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_125
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_126
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        RET
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_194:
        MOV     A,#0x6
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceEntryRemove:
        CFI Block cfiBlock134 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryRemove
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock134

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrDeviceRemoveByExtAddr:
        CFI Block cfiBlock135 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemoveByExtAddr
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 2)
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_223:
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
??ZDSecMgrDeviceRemoveByExtAddr_0:
        LJMP    ?Subroutine7 & 0xFFFF
        CFI EndBlock cfiBlock135

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddrMgrUpdate:
        CFI Block cfiBlock136 Using cfiCommon0
        CFI Function ZDSecMgrAddrMgrUpdate
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrMgrUpdate, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_144:
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrAddrMgrUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrAddrMgrUpdate_0:
        JZ      ??ZDSecMgrAddrMgrUpdate_1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_147:
        LCALL   ??AddrMgrEntryUpdate?relay
??ZDSecMgrAddrMgrUpdate_1:
        LJMP    ?Subroutine8 & 0xFFFF
        CFI EndBlock cfiBlock136

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1496 ZStatus_t ZDSecMgrDeviceEntryAdd( ZDSecMgrDevice_t* device, uint16 ami )
ZDSecMgrDeviceEntryAdd:
        CFI Block cfiBlock137 Using cfiCommon0
        CFI Function ZDSecMgrDeviceEntryAdd
// 1497 {
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceEntryAdd, ZDSecMgrAddrMgrUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 1498   ZStatus_t        status;
// 1499   ZDSecMgrEntry_t* entry;
// 1500 
// 1501 
// 1502   // initialize as unknown until completion
// 1503   status = ZNwkUnknownDevice;
        MOV     ?V0 + 2,#-0x38
// 1504 
// 1505   device->ctrl = NULL;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
// 1506 
// 1507   // make sure not already registered
// 1508   if ( ZDSecMgrEntryLookup( device->nwkAddr, &entry ) == ZSuccess )
??CrossCallReturnLabel_16:
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_137:
        LCALL   ??ZDSecMgrEntryLookup?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNZ     ??ZDSecMgrDeviceEntryAdd_0
// 1509   {
// 1510     // verify that address index is same
// 1511     if ( entry->ami != ami )
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_221:
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceEntryAdd_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDSecMgrDeviceEntryAdd_1:
        JZ      ??ZDSecMgrDeviceEntryAdd_2
// 1512     {
// 1513       // remove conflicting entry
// 1514       ZDSecMgrDeviceEntryRemove( entry );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        LCALL   ?Subroutine23 & 0xFFFF
// 1515 
// 1516       if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
??CrossCallReturnLabel_17:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_2
// 1517       {
// 1518         // update NWK address
// 1519         ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
??ZDSecMgrDeviceEntryAdd_3:
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        LCALL   ?Subroutine45 & 0xFFFF
// 1520       }
// 1521     }
// 1522   }
??CrossCallReturnLabel_59:
        SJMP    ??ZDSecMgrDeviceEntryAdd_2
// 1523   else if ( ZDSecMgrEntryLookupAMI( ami, &entry ) == ZSuccess )
??ZDSecMgrDeviceEntryAdd_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        MOV     A,R1
        JZ      ??ZDSecMgrDeviceEntryAdd_3
// 1524   {
// 1525     // update NWK address
// 1526     ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
// 1527   }
// 1528 
// 1529   // check if a new entry needs to be created
// 1530   if ( entry == NULL )
??ZDSecMgrDeviceEntryAdd_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceEntryAdd_4
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceEntryAdd_4:
        JNZ     ??CrossCallReturnLabel_60
// 1531   {
// 1532     // get new entry
// 1533     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceEntryAdd_5
// 1534     {
// 1535       // reset entry lkd
// 1536 
// 1537       // finish setting up entry
// 1538       entry->ami = ami;
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_224:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine18 & 0xFFFF
// 1539 
// 1540       // update NWK address
// 1541       ZDSecMgrAddrMgrUpdate( ami, device->nwkAddr );
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine45 & 0xFFFF
// 1542 
// 1543       // enter new device into device control
// 1544       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1545       {
// 1546         status = ZDSecMgrCtrlAdd( device, entry );
// 1547       }
// 1548       else
// 1549       {
// 1550         status = ZSuccess;
// 1551       }
// 1552     }
// 1553   }
// 1554   else
// 1555   {
// 1556     // reset entry lkd
// 1557 
// 1558     // reset entry in entry control
// 1559     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1560     {
// 1561       status = ZDSecMgrCtrlReset( device, entry );
// 1562     }
// 1563     else
// 1564     {
// 1565       status = ZSuccess;
??CrossCallReturnLabel_60:
        MOV     ?V0 + 2,#0x0
// 1566     }
// 1567   }
// 1568 
// 1569   return status;
??ZDSecMgrDeviceEntryAdd_5:
        MOV     R1,?V0 + 2
        MOV     A,#0x2
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock137
// 1570 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker140 Using cfiCommon1
        CFI (cfiPicker140) NoFunction
        CFI (cfiPicker140) Picker
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrAddrMgrUpdate?relay
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond141 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond142 Using cfiCommon0
        CFI (cfiCond142) NoFunction
        CFI (cfiCond142) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond142) CFA_SP SP+0
        CFI (cfiCond142) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker143 Using cfiCommon1
        CFI (cfiPicker143) NoFunction
        CFI (cfiPicker143) Picker
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond141
        CFI EndBlock cfiCond142
        CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond144 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond145 Using cfiCommon0
        CFI (cfiCond145) NoFunction
        CFI (cfiCond145) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond145) CFA_SP SP+0
        CFI (cfiCond145) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond146 Using cfiCommon0
        CFI (cfiCond146) NoFunction
        CFI (cfiCond146) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond146) CFA_SP SP+0
        CFI (cfiCond146) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker147 Using cfiCommon1
        CFI (cfiPicker147) NoFunction
        CFI (cfiPicker147) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrAddrMgrUpdate
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond144
        CFI EndBlock cfiCond145
        CFI EndBlock cfiCond146
        CFI EndBlock cfiPicker147
// 1571 
// 1572 /******************************************************************************
// 1573  * @fn          ZDSecMgrDeviceCtrlHandler
// 1574  *
// 1575  * @brief       Device control handler.
// 1576  *
// 1577  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1578  *
// 1579  * @return      none
// 1580  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1581 void ZDSecMgrDeviceCtrlHandler( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceCtrlHandler:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlHandler
// 1582 {
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendMasterKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrEstablishKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlHandler, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1583   uint8 state;
// 1584   uint8 cntr;
// 1585 
// 1586 
// 1587   state = device->ctrl->state;
        MOV     A,R2
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_50:
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
// 1588   cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1589 
// 1590   switch ( state )
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for ZDSecMgrDeviceCtrlHandler>_0`:
        DATA
        DB        2
        DB        5
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_1
        DW        ??ZDSecMgrDeviceCtrlHandler_2
        DW        ??ZDSecMgrDeviceCtrlHandler_3
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_0
        DW        ??ZDSecMgrDeviceCtrlHandler_4
        CODE
// 1591   {
// 1592     case ZDSECMGR_CTRL_TK_MASTER:
// 1593       if ( ZDSecMgrSendMasterKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_1:
        ; Setup parameters for call to function ZDSecMgrSendMasterKey
        LCALL   ??ZDSecMgrSendMasterKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
// 1594       {
// 1595         state = ZDSECMGR_CTRL_SKKE_INIT;
        MOV     ?V0 + 0,#0x3
// 1596         cntr  = ZDSECMGR_CTRL_SKKE_INIT_CNTR;
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
// 1597       }
// 1598       break;
// 1599 
// 1600     case ZDSECMGR_CTRL_SKKE_INIT:
// 1601       if ( ZDSecMgrEstablishKey( device ) == ZSuccess )
??ZDSecMgrDeviceCtrlHandler_2:
        ; Setup parameters for call to function ZDSecMgrEstablishKey
        LCALL   ??ZDSecMgrEstablishKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
// 1602       {
// 1603         state = ZDSECMGR_CTRL_SKKE_WAIT;
        MOV     ?V0 + 0,#0x4
        SJMP    ??ZDSecMgrDeviceCtrlHandler_5
// 1604       }
// 1605       break;
// 1606 
// 1607     case ZDSECMGR_CTRL_SKKE_WAIT:
// 1608       // continue to wait for SKA control timeout
// 1609       break;
// 1610 
// 1611     case ZDSECMGR_CTRL_TK_NWK:
// 1612       if ( ZDSecMgrSendNwkKey( device ) == ZSuccess )
// 1613       {
// 1614         state = ZDSECMGR_CTRL_NONE;
// 1615       }
// 1616       break;
// 1617 
// 1618     default:
// 1619       state = ZDSECMGR_CTRL_NONE;
// 1620       break;
// 1621   }
// 1622 
// 1623   if ( state != ZDSECMGR_CTRL_NONE )
??ZDSecMgrDeviceCtrlHandler_3:
        MOV     A,?V0 + 0
        JZ      ??ZDSecMgrDeviceCtrlHandler_0
// 1624   {
// 1625     device->ctrl->state = state;
??ZDSecMgrDeviceCtrlHandler_5:
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1626     device->ctrl->cntr  = cntr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine35 & 0xFFFF
// 1627 
// 1628     osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
??CrossCallReturnLabel_41:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??CrossCallReturnLabel_47
// 1629   }
??ZDSecMgrDeviceCtrlHandler_4:
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrDeviceCtrlHandler_3
// 1630   else
// 1631   {
// 1632     ZDSecMgrCtrlRelease( device->ctrl );
??ZDSecMgrDeviceCtrlHandler_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine37 & 0xFFFF
// 1633   }
// 1634 }
??CrossCallReturnLabel_47:
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_98:
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_51
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_46
        CFI (cfiCond154) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond154) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond154) CFA_SP SP+-5
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_47
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_41
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_42
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker158 Using cfiCommon1
        CFI (cfiPicker158) NoFunction
        CFI (cfiPicker158) Picker
        LCALL   ?Subroutine79 & 0xFFFF
??CrossCallReturnLabel_227:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
        CFI Block cfiCond159 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_97:
        CLR     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161
// 1635 
// 1636 /******************************************************************************
// 1637  * @fn          ZDSecMgrDeviceCtrlSetup
// 1638  *
// 1639  * @brief       Setup device control.
// 1640  *
// 1641  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1642  *
// 1643  * @return      ZStatus_t
// 1644  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1645 void ZDSecMgrDeviceCtrlSetup( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceCtrlSetup:
        CFI Block cfiBlock162 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlSetup
// 1646 {
        FUNCALL ZDSecMgrDeviceCtrlSetup, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1647   if ( device->ctrl != NULL )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_67:
        JNZ     ??ZDSecMgrDeviceCtrlSetup_0
        MOV     A,R1
??ZDSecMgrDeviceCtrlSetup_0:
        JZ      ??ZDSecMgrDeviceCtrlSetup_1
// 1648   {
// 1649     if ( device->secure == FALSE )
        MOV     A,R0
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlSetup_2
// 1650     {
// 1651       // send the master key data to the joining device
// 1652       device->ctrl->state = ZDSECMGR_CTRL_TK_MASTER;
        MOV     A,#0x2
        SJMP    ??ZDSecMgrDeviceCtrlSetup_3
// 1653     }
// 1654     else
// 1655     {
// 1656       // start SKKE
// 1657       device->ctrl->state = ZDSECMGR_CTRL_SKKE_INIT;
??ZDSecMgrDeviceCtrlSetup_2:
        MOV     A,#0x3
??ZDSecMgrDeviceCtrlSetup_3:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
// 1658     }
// 1659 
// 1660     ZDSecMgrDeviceCtrlHandler( device );
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
// 1661   }
// 1662 }
??ZDSecMgrDeviceCtrlSetup_1:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
        CFI Block cfiCond163 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond165) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond165) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond165) CFA_SP SP+-5
        CFI Block cfiPicker166 Using cfiCommon1
        CFI (cfiPicker166) NoFunction
        CFI (cfiPicker166) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_192:
        MOV     A,R0
        RET
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiPicker166
// 1663 
// 1664 /******************************************************************************
// 1665  * @fn          ZDSecMgrDeviceCtrlUpdate
// 1666  *
// 1667  * @brief       Update control data.
// 1668  *
// 1669  * @param       extAddr - [in] EXT address
// 1670  * @param       state   - [in] new control state
// 1671  *
// 1672  * @return      none
// 1673  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1674 void ZDSecMgrDeviceCtrlUpdate( uint8* extAddr, uint8 state )
ZDSecMgrDeviceCtrlUpdate:
        CFI Block cfiBlock167 Using cfiCommon0
        CFI Function ZDSecMgrDeviceCtrlUpdate
// 1675 {
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceCtrlUpdate, ZDSecMgrCtrlLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R6,A
// 1676   ZDSecMgrEntry_t* entry;
// 1677   ZDSecMgrCtrl_t*  ctrl;
// 1678 
// 1679 
// 1680   // lookup device entry data
// 1681   ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
// 1682 
// 1683   if ( entry != NULL )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_0:
        JZ      ??CrossCallReturnLabel_42
// 1684   {
// 1685     // lookup device control data
// 1686     ZDSecMgrCtrlLookup( entry, &ctrl );
        ; Setup parameters for call to function ZDSecMgrCtrlLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL   ?Subroutine63 & 0xFFFF
// 1687 
// 1688     // make sure control data is valid
// 1689     if ( ctrl != NULL )
??CrossCallReturnLabel_93:
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrDeviceCtrlUpdate_1:
        JZ      ??CrossCallReturnLabel_42
// 1690     {
// 1691       // possible state transitions
// 1692       if ( ctrl->state == ZDSECMGR_CTRL_SKKE_WAIT )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_105:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??CrossCallReturnLabel_42
// 1693       {
// 1694         if ( state == ZDSECMGR_CTRL_SKKE_DONE )
        MOV     A,#0x5
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceCtrlUpdate_2
// 1695         {
// 1696           // send the network key
// 1697           ctrl->state = ZDSECMGR_CTRL_TK_NWK;
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceCtrlUpdate_3
// 1698           ctrl->cntr  = ZDSECMGR_CTRL_TK_NWK_CNTR;
// 1699         }
// 1700         else if ( state == ZDSECMGR_CTRL_SKKE_FAIL )
??ZDSecMgrDeviceCtrlUpdate_2:
        MOV     A,#0x6
        XRL     A,R6
        JNZ     ??CrossCallReturnLabel_42
// 1701         {
// 1702           // force default timeout in order to cleanup control logic
// 1703           ctrl->state = ZDSECMGR_CTRL_SKKE_FAIL;
        MOV     A,#0x6
// 1704           ctrl->cntr  = ZDSECMGR_CTRL_BASE_CNTR;
// 1705         }
// 1706       }
// 1707       // timer should be active
// 1708     }
// 1709   }
??ZDSecMgrDeviceCtrlUpdate_3:
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_157:
        LCALL   ?Subroutine35 & 0xFFFF
        CFI EndBlock cfiBlock167
// 1710 }
??CrossCallReturnLabel_42:
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiBlock168 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock168

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine80:
        CFI Block cfiCond169 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_17
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_157
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_143
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_144
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond174 Using cfiCommon0
        CFI (cfiCond174) NoFunction
        CFI (cfiCond174) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_145
        CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond174) CFA_SP SP+0
        CFI (cfiCond174) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond175 Using cfiCommon0
        CFI (cfiCond175) NoFunction
        CFI (cfiCond175) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_146
        CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond175) CFA_SP SP+0
        CFI (cfiCond175) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_147
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond177 Using cfiCommon0
        CFI (cfiCond177) NoFunction
        CFI (cfiCond177) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_148
        CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond177) CFA_SP SP+0
        CFI (cfiCond177) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond178 Using cfiCommon0
        CFI (cfiCond178) NoFunction
        CFI (cfiCond178) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_149
        CFI (cfiCond178) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond178) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond178) CFA_SP SP+-5
        CFI (cfiCond178) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_150
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_151
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond181 Using cfiCommon0
        CFI (cfiCond181) NoFunction
        CFI (cfiCond181) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_152
        CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond181) CFA_SP SP+0
        CFI (cfiCond181) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond182 Using cfiCommon0
        CFI (cfiCond182) NoFunction
        CFI (cfiCond182) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_153
        CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond182) CFA_SP SP+0
        CFI (cfiCond182) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_0
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+0
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond184 Using cfiCommon0
        CFI (cfiCond184) NoFunction
        CFI (cfiCond184) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_1
        CFI (cfiCond184) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond184) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond184) CFA_SP SP+-5
        CFI (cfiCond184) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond185 Using cfiCommon0
        CFI (cfiCond185) NoFunction
        CFI (cfiCond185) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_2
        CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond185) CFA_SP SP+0
        CFI (cfiCond185) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_3
        CFI (cfiCond186) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond186) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond186) CFA_SP SP+-5
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_158, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_4
        CFI (cfiCond187) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond187) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond187) CFA_SP SP+-5
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker188 Using cfiCommon1
        CFI (cfiPicker188) NoFunction
        CFI (cfiPicker188) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDSecMgrEntryLookup
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function APSME_EstablishKeyReq
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function NLME_LeaveReq
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function APSME_EstablishKeyRsp
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function ZDSecMgrDeviceCtrlHandler
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        ; Setup parameters for call to function APSME_AuthenticateReq
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiCond174
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiCond177
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiCond181
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiCond184
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
        CFI Block cfiCond189 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond190 Using cfiCommon0
        CFI (cfiCond190) NoFunction
        CFI (cfiCond190) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond190) CFA_SP SP+0
        CFI (cfiCond190) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker191 Using cfiCommon1
        CFI (cfiPicker191) NoFunction
        CFI (cfiPicker191) Picker
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_96:
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond189
        CFI EndBlock cfiCond190
        CFI EndBlock cfiPicker191
// 1711 
// 1712 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr );

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1713 void APSME_SKA_TimerExpired( uint8 initiator, uint8* partExtAddr )
APSME_SKA_TimerExpired:
        CFI Block cfiBlock192 Using cfiCommon0
        CFI Function APSME_SKA_TimerExpired
// 1714 {
        ; Saved register size: 0
        ; Auto size: 0
// 1715   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1716   {
// 1717     if ( initiator == TRUE )
// 1718     {
// 1719       ZDSecMgrDeviceCtrlUpdate( partExtAddr, ZDSECMGR_CTRL_SKKE_FAIL );
// 1720     }
// 1721   }
// 1722 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock192
// 1723 
// 1724 /******************************************************************************
// 1725  * @fn          ZDSecMgrDeviceRemove
// 1726  *
// 1727  * @brief       Remove device from network.
// 1728  *
// 1729  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1730  *
// 1731  * @return      none
// 1732  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1733 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceRemove:
        CFI Block cfiBlock193 Using cfiCommon0
        CFI Function ZDSecMgrDeviceRemove
// 1734 {
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1735   APSME_RemoveDeviceReq_t remDevReq;
// 1736   NLME_LeaveReq_t         leaveReq;
// 1737   associated_devices_t*   assoc;
// 1738 
// 1739 
// 1740   // check if parent, remove the device
// 1741   if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_162:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,?V0 + 0
        XRL     A,R6
        JNZ     ??ZDSecMgrDeviceRemove_0
        MOV     A,?V0 + 1
        XRL     A,R7
??ZDSecMgrDeviceRemove_0:
        JNZ     ??ZDSecMgrDeviceRemove_1
// 1742   {
// 1743     // this is the parent of the device
// 1744     leaveReq.extAddr        = device->extAddr;
        LCALL   ?Subroutine29 & 0xFFFF
// 1745     leaveReq.removeChildren = FALSE;
??CrossCallReturnLabel_127:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1746     leaveReq.rejoin         = FALSE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1747 
// 1748     // find child association
// 1749     assoc = AssocGetWithExt( device->extAddr );
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1750 
// 1751     if ( ( assoc != NULL                            ) &&
// 1752          ( assoc->nodeRelation >= CHILD_RFD         ) &&
// 1753          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
        MOV     A,R0
        JNZ     ??ZDSecMgrDeviceRemove_2
        MOV     A,R1
??ZDSecMgrDeviceRemove_2:
        JZ      ??ZDSecMgrDeviceRemove_3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_3
// 1754     {
// 1755       // check if associated device is authenticated
// 1756       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     A,#0x4
        JNC     ??ZDSecMgrDeviceRemove_4
// 1757       {
// 1758         leaveReq.silent = FALSE;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceRemove_5
// 1759       }
// 1760       else
// 1761       {
// 1762         leaveReq.silent = TRUE;
??ZDSecMgrDeviceRemove_4:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
// 1763       }
// 1764 
// 1765       NLME_LeaveReq( &leaveReq );
// 1766     }
// 1767   }
??ZDSecMgrDeviceRemove_5:
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_148:
        LCALL   ??NLME_LeaveReq?relay
        SJMP    ??ZDSecMgrDeviceRemove_3
// 1768   else
// 1769   {
// 1770     // this is not the parent of the device
// 1771     remDevReq.parentAddr   = device->parentAddr;
??ZDSecMgrDeviceRemove_1:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1772     remDevReq.childExtAddr = device->extAddr;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine85_0 & 0xFFFF
// 1773 
// 1774     APSME_RemoveDeviceReq( &remDevReq );
// 1775   }
??CrossCallReturnLabel_123:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_RemoveDeviceReq?relay
// 1776 }
??ZDSecMgrDeviceRemove_3:
        MOV     A,#0x9
        SJMP    ??Subroutine88_0
        CFI EndBlock cfiBlock193

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond194 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_127
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond195 Using cfiCommon0
        CFI (cfiCond195) NoFunction
        CFI (cfiCond195) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond195) CFA_SP SP+0
        CFI (cfiCond195) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker196 Using cfiCommon1
        CFI (cfiPicker196) NoFunction
        CFI (cfiPicker196) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond194
        CFI EndBlock cfiCond195
        CFI EndBlock cfiPicker196
        REQUIRE ??Subroutine87_0
        ; // Fall through to label ??Subroutine87_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine87_0:
        CFI Block cfiCond197 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_129
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond198 Using cfiCommon0
        CFI (cfiCond198) NoFunction
        CFI (cfiCond198) Conditional ??CrossCallReturnLabel_127
        CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond198) CFA_SP SP+0
        CFI (cfiCond198) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond199 Using cfiCommon0
        CFI (cfiCond199) NoFunction
        CFI (cfiCond199) Conditional ??CrossCallReturnLabel_128
        CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond199) CFA_SP SP+0
        CFI (cfiCond199) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker200 Using cfiCommon1
        CFI (cfiPicker200) NoFunction
        CFI (cfiPicker200) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_207:
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond197
        CFI EndBlock cfiCond198
        CFI EndBlock cfiCond199
        CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock201 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0xd
        CFI EndBlock cfiBlock201
        REQUIRE ??Subroutine88_0
        ; // Fall through to label ??Subroutine88_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine88_0:
        CFI Block cfiBlock202 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock202
        REQUIRE ??Subroutine89_0
        ; // Fall through to label ??Subroutine89_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine89_0:
        CFI Block cfiBlock203 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock203
// 1777 
// 1778 /******************************************************************************
// 1779  * @fn          ZDSecMgrDeviceValidateSKKE
// 1780  *
// 1781  * @brief       Decide whether device is allowed for SKKE.
// 1782  *
// 1783  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1784  *
// 1785  * @return      ZStatus_t
// 1786  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1787 ZStatus_t ZDSecMgrDeviceValidateSKKE( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateSKKE:
        CFI Block cfiBlock204 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateSKKE
// 1788 {
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateSKKE, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1789   ZStatus_t status;
// 1790   uint16    ami;
// 1791   uint8*    key;
// 1792 
// 1793 
// 1794   // get EXT address
// 1795   status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
// 1796 
// 1797   if ( status == ZSuccess )
        JNZ     ??CrossCallReturnLabel_48
// 1798   {
// 1799     // get MASTER key
// 1800     status = ZDSecMgrMasterKeyLookup( ami, &key );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
// 1801 
// 1802     if ( status == ZSuccess )
??CrossCallReturnLabel_44:
        JNZ     ??CrossCallReturnLabel_48
// 1803     {
// 1804     //  // check if initiator is Trust Center
// 1805     //  if ( device->nwkAddr == APSME_TRUSTCENTER_NWKADDR )
// 1806     //  {
// 1807     //    // verify NWK key not sent
// 1808     //    // devtag.todo
// 1809     //    // temporary - add device to internal data
// 1810     //    status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1811     //  }
// 1812     //  else
// 1813     //  {
// 1814     //    // initiator not Trust Center - End to End SKKE - set policy
// 1815     //    // for accepting an SKKE initiation
// 1816     //    // temporary - add device to internal data
// 1817     //    status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1818     //  }
// 1819         status = ZDSecMgrDeviceEntryAdd( device, ami );
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine38 & 0xFFFF
// 1820     }
// 1821   }
// 1822 
// 1823   return status;
??CrossCallReturnLabel_48:
        LJMP    ?Subroutine9 & 0xFFFF
        CFI EndBlock cfiBlock204
// 1824 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
        CFI Block cfiCond205 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond206 Using cfiCommon0
        CFI (cfiCond206) NoFunction
        CFI (cfiCond206) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond206) CFA_SP SP+0
        CFI (cfiCond206) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond207 Using cfiCommon0
        CFI (cfiCond207) NoFunction
        CFI (cfiCond207) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond207) CFA_SP SP+0
        CFI (cfiCond207) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker208 Using cfiCommon1
        CFI (cfiPicker208) NoFunction
        CFI (cfiPicker208) Picker
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_103:
        MOV     A,R1
        RET
        CFI EndBlock cfiCond205
        CFI EndBlock cfiCond206
        CFI EndBlock cfiCond207
        CFI EndBlock cfiPicker208

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock209 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,?V0 + 0
        CFI EndBlock cfiBlock209
        REQUIRE ??Subroutine90_0
        ; // Fall through to label ??Subroutine90_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine90_0:
        CFI Block cfiBlock210 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        CFI EndBlock cfiBlock210
        REQUIRE ??Subroutine91_0
        ; // Fall through to label ??Subroutine91_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine91_0:
        CFI Block cfiBlock211 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock211
        REQUIRE ??Subroutine92_0
        ; // Fall through to label ??Subroutine92_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine92_0:
        CFI Block cfiBlock212 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock212
// 1825 
// 1826 /******************************************************************************
// 1827  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1828  *
// 1829  * @brief       Decide whether device is allowed.
// 1830  *
// 1831  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1832  *
// 1833  * @return      ZStatus_t
// 1834  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1835 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateRM:
        CFI Block cfiBlock213 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateRM
// 1836 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1837 
// 1838   ZStatus_t status;
// 1839   status = ZSuccess;
        MOV     R1,#0x0
// 1840 
// 1841   (void)device;  // Intentionally unreferenced parameter
// 1842   
// 1843   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1844   // the trust center to reject any newly joining devices by sending
// 1845   // Remove-device to the parents.
// 1846   if ( zgSecurePermitJoin == false )
        MOV     DPTR,#zgSecurePermitJoin
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrDeviceValidateRM_0
// 1847   {
// 1848     status = ZNwkUnknownDevice;
        MOV     R1,#-0x38
// 1849   }
// 1850 
// 1851 
// 1852 
// 1853 #if 0  // Taken out because the following functionality is only used for test
// 1854        // purpose. A more efficient (above) way is used. It can be put
// 1855        // back in if customers request for a white/black list feature.
// 1856        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1857 
// 1858   // The following code processes the device black list (stored device list)
// 1859   // If the joining device is not part of the forbidden device list
// 1860   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1861   // will send Remove-device and ban the device from joining.
// 1862 
// 1863   uint8     index;
// 1864   uint8*    restricted;
// 1865 
// 1866   // Look through the stored device list - used for restricted devices
// 1867   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1868   {
// 1869     restricted = ZDSecMgrStoredDeviceList[index];
// 1870 
// 1871     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1872     {
// 1873       // return as unknown device in regards to validation
// 1874       status = ZNwkUnknownDevice;
// 1875 
// 1876       // break from loop
// 1877       index = ZDSECMGR_STORED_DEVICES;
// 1878     }
// 1879   }
// 1880 
// 1881 #endif
// 1882 
// 1883   return status;
??ZDSecMgrDeviceValidateRM_0:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock213
// 1884 }
// 1885 
// 1886 /******************************************************************************
// 1887  * @fn          ZDSecMgrDeviceValidateCM (COMMERCIAL MODE)
// 1888  *
// 1889  * @brief       Decide whether device is allowed.
// 1890  *
// 1891  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1892  *
// 1893  * @return      ZStatus_t
// 1894  */
// 1895 //devtag.pro.security

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1896 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateCM:
        CFI Block cfiBlock214 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidateCM
// 1897 {
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrMasterKeyLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceValidateCM, ZDSecMgrDeviceEntryAdd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1898   ZStatus_t status;
// 1899   uint16    ami;
// 1900   uint8*    key;
// 1901 
// 1902 
// 1903 //  // check for pre configured setting
// 1904 //  if ( device->secure == TRUE )
// 1905 //  {
// 1906 //    // get EXT address and MASTER key
// 1907 //    status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1908 //
// 1909 //    if ( status == ZSuccess )
// 1910 //    {
// 1911 //      status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1912 //    }
// 1913 //  }
// 1914 //  else
// 1915 //  {
// 1916     // implement EXT address and MASTER key policy here -- the total number of
// 1917     // Security Manager entries should never exceed the number of EXT addresses
// 1918     // and MASTER keys available
// 1919 
// 1920     // set status based on policy
// 1921     //status = ZNwkUnknownDevice;
// 1922 
// 1923     // set status based on policy
// 1924     status = ZSuccess; // ZNwkUnknownDevice;
// 1925 
// 1926     // get key based on policy
// 1927     key = ZDSecMgrTCMasterKey;
// 1928 
// 1929     // if policy, store new EXT address
// 1930     status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
        MOV     A,R6
        ADD     A,#0x2
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_126:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPL,?V0 + 0
        MOV     DPH,R1
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1931 
// 1932     // set the key
// 1933     ZDSecMgrMasterKeyLoad( device->extAddr, key );
        ; Setup parameters for call to function ZDSecMgrMasterKeyLoad
        MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL   ??ZDSecMgrMasterKeyLoad?relay
// 1934 //  }
// 1935 
// 1936   // if EXT address and MASTER key available -- add device
// 1937   if ( status == ZSuccess )
        MOV     A,?V0 + 2
        JNZ     ??ZDSecMgrDeviceValidateCM_0
// 1938   {
// 1939     // add device to internal data - with control
// 1940     status = ZDSecMgrDeviceEntryAdd( device, ami );
        ; Setup parameters for call to function ZDSecMgrDeviceEntryAdd
        LCALL   ?Subroutine38 & 0xFFFF
// 1941   }
??CrossCallReturnLabel_49:
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1942 
// 1943   return status;
??ZDSecMgrDeviceValidateCM_0:
        MOV     R1,?V0 + 2
        MOV     A,#0x2
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock214
// 1944 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
        CFI Block cfiCond215 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond216 Using cfiCommon0
        CFI (cfiCond216) NoFunction
        CFI (cfiCond216) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond216) CFA_SP SP+0
        CFI (cfiCond216) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker217 Using cfiCommon1
        CFI (cfiPicker217) NoFunction
        CFI (cfiPicker217) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceEntryAdd?relay
        RET
        CFI EndBlock cfiCond215
        CFI EndBlock cfiCond216
        CFI EndBlock cfiPicker217
// 1945 //devtag.pro.security
// 1946 #if 0
// 1947 ZStatus_t ZDSecMgrDeviceValidateCM( ZDSecMgrDevice_t* device )
// 1948 {
// 1949   ZStatus_t status;
// 1950   uint16    ami;
// 1951   uint8*    key;
// 1952 
// 1953 
// 1954   // check for pre configured setting
// 1955   if ( device->secure == TRUE )
// 1956   {
// 1957     // get EXT address and MASTER key
// 1958     status = ZDSecMgrExtAddrLookup( device->extAddr, &ami );
// 1959 
// 1960     if ( status == ZSuccess )
// 1961     {
// 1962       status = ZDSecMgrMasterKeyLookup( ami, &key );
// 1963     }
// 1964   }
// 1965   else
// 1966   {
// 1967     // implement EXT address and MASTER key policy here -- the total number of
// 1968     // Security Manager entries should never exceed the number of EXT addresses
// 1969     // and MASTER keys available
// 1970 
// 1971     // set status based on policy
// 1972     status = ZSuccess; // ZNwkUnknownDevice;
// 1973 
// 1974     // get the address index
// 1975     if ( ZDSecMgrExtAddrLookup( device->extAddr, &ami ) != ZSuccess )
// 1976     {
// 1977       // if policy, store new EXT address
// 1978       status = ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
// 1979     }
// 1980 
// 1981     // get the address index
// 1982     if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
// 1983     {
// 1984       // if policy, store new key -- NULL will zero key
// 1985       status = ZDSecMgrMasterKeyStore( ami, NULL );
// 1986     }
// 1987   }
// 1988 
// 1989   // if EXT address and MASTER key available -- add device
// 1990   if ( status == ZSuccess )
// 1991   {
// 1992     // add device to internal data - with control
// 1993     status = ZDSecMgrDeviceEntryAdd( device, ami );
// 1994   }
// 1995 
// 1996   return status;
// 1997 }
// 1998 #endif
// 1999 
// 2000 /******************************************************************************
// 2001  * @fn          ZDSecMgrDeviceValidate
// 2002  *
// 2003  * @brief       Decide whether device is allowed.
// 2004  *
// 2005  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2006  *
// 2007  * @return      ZStatus_t
// 2008  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2009 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidate:
        CFI Block cfiBlock218 Using cfiCommon0
        CFI Function ZDSecMgrDeviceValidate
// 2010 {
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2011   ZStatus_t status;
// 2012 
// 2013 
// 2014   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_0
// 2015   {
// 2016     // device may be joining with a secure flag but it is ultimately the Trust
// 2017     // Center that decides -- check if expected pre configured device --
// 2018     // override settings
// 2019     if ( zgPreConfigKeys == TRUE )
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceValidate_1
// 2020     {
// 2021       device->secure = TRUE;
        MOV     A,#0x1
        SJMP    ??ZDSecMgrDeviceValidate_2
// 2022     }
// 2023     else
// 2024     {
// 2025       device->secure = FALSE;
??ZDSecMgrDeviceValidate_1:
        CLR     A
??ZDSecMgrDeviceValidate_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
// 2026     }
// 2027 
// 2028     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2029     {
// 2030       status = ZDSecMgrDeviceValidateCM( device );
// 2031     }
// 2032     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2033     {
// 2034       status = ZDSecMgrDeviceValidateRM( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL   ??ZDSecMgrDeviceValidateRM?relay
        SJMP    ??ZDSecMgrDeviceValidate_3
// 2035     }
// 2036   }
// 2037   else
// 2038   {
// 2039     status = ZNwkUnknownDevice;
??ZDSecMgrDeviceValidate_0:
        MOV     R1,#-0x38
// 2040   }
// 2041 
// 2042   return status;
??ZDSecMgrDeviceValidate_3:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock218
// 2043 }
// 2044 
// 2045 /******************************************************************************
// 2046  * @fn          ZDSecMgrDeviceJoin
// 2047  *
// 2048  * @brief       Try to join this device.
// 2049  *
// 2050  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2051  *
// 2052  * @return      ZStatus_t
// 2053  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2054 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoin:
        CFI Block cfiBlock219 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoin
// 2055 {
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2056   ZStatus_t status;
// 2057   uint16    ami;
// 2058 
// 2059   // attempt to validate device
// 2060   status = ZDSecMgrDeviceValidate( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL   ??ZDSecMgrDeviceValidate?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2061 
// 2062   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoin_0
// 2063   {
// 2064     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2065     {
// 2066       ZDSecMgrDeviceCtrlSetup( device );
// 2067     }
// 2068     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2069     {
// 2070       // Add the device to the address manager
// 2071       ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
// 2072       //send the nwk key data to the joining device
// 2073       status = ZDSecMgrSendNwkKey( device );
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrSendNwkKey?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        SJMP    ??ZDSecMgrDeviceJoin_1
// 2074     }
// 2075   }
// 2076   else
// 2077   {
// 2078     // not allowed, remove the device
// 2079     ZDSecMgrDeviceRemove( device );
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDSecMgrDeviceRemove?relay
// 2080   }
// 2081 
// 2082   return status;
??ZDSecMgrDeviceJoin_1:
        MOV     R1,?V0 + 0
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock219
// 2083 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond220 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond221 Using cfiCommon0
        CFI (cfiCond221) NoFunction
        CFI (cfiCond221) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond221) CFA_SP SP+0
        CFI (cfiCond221) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker222 Using cfiCommon1
        CFI (cfiPicker222) NoFunction
        CFI (cfiPicker222) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_232:
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond220
        CFI EndBlock cfiCond221
        CFI EndBlock cfiPicker222
// 2084 
// 2085 /******************************************************************************
// 2086  * @fn          ZDSecMgrDeviceJoinDirect
// 2087  *
// 2088  * @brief       Try to join this device as a direct child.
// 2089  *
// 2090  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2091  *
// 2092  * @return      ZStatus_t
// 2093  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2094 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinDirect:
        CFI Block cfiBlock223 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinDirect
// 2095 {
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2096   ZStatus_t status;
// 2097 
// 2098   status = ZDSecMgrDeviceJoin( device );
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        LCALL   ??ZDSecMgrDeviceJoin?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
// 2099 
// 2100   if ( status == ZSuccess )
        JNZ     ??ZDSecMgrDeviceJoinDirect_0
// 2101   {
// 2102     // set association status to authenticated
// 2103     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithShort
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine93_0 & 0xFFFF
// 2104   }
??CrossCallReturnLabel_134:
        LCALL   ??AssocGetWithShort?relay
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 2105 
// 2106   return status;
??ZDSecMgrDeviceJoinDirect_0:
        MOV     R1,?V0 + 0
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock223
// 2107 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
        CFI Block cfiCond224 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_136
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond225 Using cfiCommon0
        CFI (cfiCond225) NoFunction
        CFI (cfiCond225) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond225) CFA_SP SP+0
        CFI (cfiCond225) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker226 Using cfiCommon1
        CFI (cfiPicker226) NoFunction
        CFI (cfiPicker226) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond224
        CFI EndBlock cfiCond225
        CFI EndBlock cfiPicker226
        REQUIRE ??Subroutine93_0
        ; // Fall through to label ??Subroutine93_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine93_0:
        CFI Block cfiCond227 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_130
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond228 Using cfiCommon0
        CFI (cfiCond228) NoFunction
        CFI (cfiCond228) Conditional ??CrossCallReturnLabel_131
        CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond228) CFA_SP SP+0
        CFI (cfiCond228) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond229 Using cfiCommon0
        CFI (cfiCond229) NoFunction
        CFI (cfiCond229) Conditional ??CrossCallReturnLabel_132
        CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond229) CFA_SP SP+0
        CFI (cfiCond229) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond230 Using cfiCommon0
        CFI (cfiCond230) NoFunction
        CFI (cfiCond230) Conditional ??CrossCallReturnLabel_133
        CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond230) CFA_SP SP+0
        CFI (cfiCond230) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond231 Using cfiCommon0
        CFI (cfiCond231) NoFunction
        CFI (cfiCond231) Conditional ??CrossCallReturnLabel_134
        CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond231) CFA_SP SP+0
        CFI (cfiCond231) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond232 Using cfiCommon0
        CFI (cfiCond232) NoFunction
        CFI (cfiCond232) Conditional ??CrossCallReturnLabel_135
        CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond232) CFA_SP SP+0
        CFI (cfiCond232) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond233 Using cfiCommon0
        CFI (cfiCond233) NoFunction
        CFI (cfiCond233) Conditional ??CrossCallReturnLabel_136
        CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond233) CFA_SP SP+0
        CFI (cfiCond233) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond234 Using cfiCommon0
        CFI (cfiCond234) NoFunction
        CFI (cfiCond234) Conditional ??CrossCallReturnLabel_137
        CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond234) CFA_SP SP+0
        CFI (cfiCond234) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker235 Using cfiCommon1
        CFI (cfiPicker235) NoFunction
        CFI (cfiPicker235) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_236:
        RET
        CFI EndBlock cfiCond227
        CFI EndBlock cfiCond228
        CFI EndBlock cfiCond229
        CFI EndBlock cfiCond230
        CFI EndBlock cfiCond231
        CFI EndBlock cfiCond232
        CFI EndBlock cfiCond233
        CFI EndBlock cfiCond234
        CFI EndBlock cfiPicker235

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
        CFI Block cfiCond236 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond237 Using cfiCommon0
        CFI (cfiCond237) NoFunction
        CFI (cfiCond237) Conditional ??CrossCallReturnLabel_232, ??CrossCallReturnLabel_38
        CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond237) CFA_SP SP+0
        CFI (cfiCond237) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond238 Using cfiCommon0
        CFI (cfiCond238) NoFunction
        CFI (cfiCond238) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_136
        CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond238) CFA_SP SP+0
        CFI (cfiCond238) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond239 Using cfiCommon0
        CFI (cfiCond239) NoFunction
        CFI (cfiCond239) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_137
        CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond239) CFA_SP SP+0
        CFI (cfiCond239) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond240 Using cfiCommon0
        CFI (cfiCond240) NoFunction
        CFI (cfiCond240) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_130
        CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond240) CFA_SP SP+0
        CFI (cfiCond240) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond241 Using cfiCommon0
        CFI (cfiCond241) NoFunction
        CFI (cfiCond241) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_131
        CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond241) CFA_SP SP+0
        CFI (cfiCond241) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond242 Using cfiCommon0
        CFI (cfiCond242) NoFunction
        CFI (cfiCond242) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_132
        CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond242) CFA_SP SP+0
        CFI (cfiCond242) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond243 Using cfiCommon0
        CFI (cfiCond243) NoFunction
        CFI (cfiCond243) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_133
        CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond243) CFA_SP SP+0
        CFI (cfiCond243) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond244 Using cfiCommon0
        CFI (cfiCond244) NoFunction
        CFI (cfiCond244) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_134
        CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond244) CFA_SP SP+0
        CFI (cfiCond244) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond245 Using cfiCommon0
        CFI (cfiCond245) NoFunction
        CFI (cfiCond245) Conditional ??CrossCallReturnLabel_236, ??CrossCallReturnLabel_135
        CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond245) CFA_SP SP+0
        CFI (cfiCond245) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond246 Using cfiCommon0
        CFI (cfiCond246) NoFunction
        CFI (cfiCond246) Conditional ??CrossCallReturnLabel_234, ??CrossCallReturnLabel_68
        CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond246) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond246) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond246) CFA_SP SP+0
        CFI (cfiCond246) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond247 Using cfiCommon0
        CFI (cfiCond247) NoFunction
        CFI (cfiCond247) Conditional ??CrossCallReturnLabel_234, ??CrossCallReturnLabel_69
        CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond247) CFA_SP SP+0
        CFI (cfiCond247) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond248 Using cfiCommon0
        CFI (cfiCond248) NoFunction
        CFI (cfiCond248) Conditional ??CrossCallReturnLabel_235, ??CrossCallReturnLabel_72
        CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond248) CFA_SP SP+0
        CFI (cfiCond248) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond249 Using cfiCommon0
        CFI (cfiCond249) NoFunction
        CFI (cfiCond249) Conditional ??CrossCallReturnLabel_235, ??CrossCallReturnLabel_73
        CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond249) CFA_SP SP+0
        CFI (cfiCond249) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond250 Using cfiCommon0
        CFI (cfiCond250) NoFunction
        CFI (cfiCond250) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_63
        CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond250) CFA_SP SP+0
        CFI (cfiCond250) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond251 Using cfiCommon0
        CFI (cfiCond251) NoFunction
        CFI (cfiCond251) Conditional ??CrossCallReturnLabel_233, ??CrossCallReturnLabel_64
        CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond251) CFA_SP SP+0
        CFI (cfiCond251) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond252 Using cfiCommon0
        CFI (cfiCond252) NoFunction
        CFI (cfiCond252) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_229
        CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond252) CFA_SP SP+0
        CFI (cfiCond252) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond253 Using cfiCommon0
        CFI (cfiCond253) NoFunction
        CFI (cfiCond253) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_230
        CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond253) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond253) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond253) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond253) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond253) CFA_SP SP+0
        CFI (cfiCond253) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond254 Using cfiCommon0
        CFI (cfiCond254) NoFunction
        CFI (cfiCond254) Conditional ??CrossCallReturnLabel_237, ??CrossCallReturnLabel_231
        CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond254) CFA_SP SP+0
        CFI (cfiCond254) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker255 Using cfiCommon1
        CFI (cfiPicker255) NoFunction
        CFI (cfiPicker255) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond236
        CFI EndBlock cfiCond237
        CFI EndBlock cfiCond238
        CFI EndBlock cfiCond239
        CFI EndBlock cfiCond240
        CFI EndBlock cfiCond241
        CFI EndBlock cfiCond242
        CFI EndBlock cfiCond243
        CFI EndBlock cfiCond244
        CFI EndBlock cfiCond245
        CFI EndBlock cfiCond246
        CFI EndBlock cfiCond247
        CFI EndBlock cfiCond248
        CFI EndBlock cfiCond249
        CFI EndBlock cfiCond250
        CFI EndBlock cfiCond251
        CFI EndBlock cfiCond252
        CFI EndBlock cfiCond253
        CFI EndBlock cfiCond254
        CFI EndBlock cfiPicker255
// 2108 
// 2109 /******************************************************************************
// 2110  * @fn          ZDSecMgrDeviceJoinFwd
// 2111  *
// 2112  * @brief       Forward join to Trust Center.
// 2113  *
// 2114  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2115  *
// 2116  * @return      ZStatus_t
// 2117  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2118 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinFwd:
        CFI Block cfiBlock256 Using cfiCommon0
        CFI Function ZDSecMgrDeviceJoinFwd
// 2119 {
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 8)
// 2120   ZStatus_t               status;
// 2121   APSME_UpdateDeviceReq_t req;
// 2122 
// 2123 
// 2124   // forward any joining device to the Trust Center -- the Trust Center will
// 2125   // decide if the device is allowed to join
// 2126   status = ZSuccess;
// 2127 
// 2128   // forward authorization to the Trust Center
// 2129   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2130   req.devAddr    = device->nwkAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 2131   req.devExtAddr = device->extAddr;
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
// 2132 
// 2133   // set security status, option for router to reject if policy set
// 2134   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
??CrossCallReturnLabel_176:
        MOV     A,R2
        ADD     A,#0x7
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_140:
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDSecMgrDeviceJoinFwd_0
// 2135   {
// 2136     if ( device->devStatus & DEV_REJOIN_STATUS )
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_1
// 2137     {
// 2138       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_2
// 2139         req.status = APSME_UD_HIGH_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2140       else
// 2141         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_2:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2142     }
// 2143     else
// 2144       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_1:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x5
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2145   }
// 2146   else
// 2147   {
// 2148     if ( device->devStatus & DEV_REJOIN_STATUS )
??ZDSecMgrDeviceJoinFwd_0:
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDSecMgrDeviceJoinFwd_4
// 2149     {
// 2150       if ( device->secure == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrDeviceJoinFwd_5
// 2151         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2152       else
// 2153         req.status = APSME_UD_STANDARD_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_5:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        SJMP    ??ZDSecMgrDeviceJoinFwd_3
// 2154     }
// 2155     else
// 2156       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_4:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
??ZDSecMgrDeviceJoinFwd_3:
        MOVX    @DPTR,A
// 2157   }
// 2158 
// 2159   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2160     req.apsSecure = TRUE;
// 2161   else
// 2162     req.apsSecure = FALSE;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine97_0 & 0xFFFF
// 2163 
// 2164   // send and APSME_UPDATE_DEVICE request to the trust center
// 2165   status = APSME_UpdateDeviceReq( &req );
// 2166 
// 2167   return status;
??CrossCallReturnLabel_149:
        LCALL   ??APSME_UpdateDeviceReq?relay
        MOV     A,#0x8
        LJMP    ??Subroutine106_0 & 0xFFFF
        CFI EndBlock cfiBlock256
// 2168 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
        CFI Block cfiCond257 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_140
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond258 Using cfiCommon0
        CFI (cfiCond258) NoFunction
        CFI (cfiCond258) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond258) CFA_SP SP+0
        CFI (cfiCond258) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond259 Using cfiCommon0
        CFI (cfiCond259) NoFunction
        CFI (cfiCond259) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond259) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond259) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond259) CFA_SP SP+-5
        CFI Block cfiPicker260 Using cfiCommon1
        CFI (cfiPicker260) NoFunction
        CFI (cfiPicker260) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond257
        CFI EndBlock cfiCond258
        CFI EndBlock cfiCond259
        CFI EndBlock cfiPicker260
        REQUIRE ??Subroutine94_0
        ; // Fall through to label ??Subroutine94_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine94_0:
        CFI Block cfiCond261 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_138
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond262 Using cfiCommon0
        CFI (cfiCond262) NoFunction
        CFI (cfiCond262) Conditional ??CrossCallReturnLabel_139
        CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond262) CFA_SP SP+0
        CFI (cfiCond262) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond263 Using cfiCommon0
        CFI (cfiCond263) NoFunction
        CFI (cfiCond263) Conditional ??CrossCallReturnLabel_140
        CFI (cfiCond263) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond263) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond263) CFA_SP SP+-5
        CFI (cfiCond263) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond264 Using cfiCommon0
        CFI (cfiCond264) NoFunction
        CFI (cfiCond264) Conditional ??CrossCallReturnLabel_141
        CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond264) CFA_SP SP+0
        CFI (cfiCond264) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond265 Using cfiCommon0
        CFI (cfiCond265) NoFunction
        CFI (cfiCond265) Conditional ??CrossCallReturnLabel_142
        CFI (cfiCond265) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond265) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond265) CFA_SP SP+-5
        CFI Block cfiPicker266 Using cfiCommon1
        CFI (cfiPicker266) NoFunction
        CFI (cfiPicker266) Picker
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_215:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond261
        CFI EndBlock cfiCond262
        CFI EndBlock cfiCond263
        CFI EndBlock cfiCond264
        CFI EndBlock cfiCond265
        CFI EndBlock cfiPicker266
// 2169 
// 2170 /******************************************************************************
// 2171  * @fn          ZDSecMgrDeviceNew
// 2172  *
// 2173  * @brief       Process a new device.
// 2174  *
// 2175  * @param       device - [in] ZDSecMgrDevice_t, device info
// 2176  *
// 2177  * @return      ZStatus_t
// 2178  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2179 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
ZDSecMgrDeviceNew:
        CFI Block cfiBlock267 Using cfiCommon0
        CFI Function ZDSecMgrDeviceNew
// 2180 {
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinFwd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2181   ZStatus_t status;
// 2182 
// 2183   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2184   {
// 2185     // try to join this device
// 2186     status = ZDSecMgrDeviceJoinDirect( joiner );
// 2187   }
// 2188   else
// 2189   {
// 2190     status = ZDSecMgrDeviceJoinFwd( joiner );
// 2191   }
// 2192 
// 2193   return status;
        ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
        LCALL   ??ZDSecMgrDeviceJoinFwd?relay
        SJMP    ??Subroutine96_0
        CFI EndBlock cfiBlock267
// 2194 }
// 2195 
// 2196 /******************************************************************************
// 2197  * @fn          ZDSecMgrAssocDeviceAuth
// 2198  *
// 2199  * @brief       Set associated device status to authenticated
// 2200  *
// 2201  * @param       assoc - [in, out] associated_devices_t
// 2202  *
// 2203  * @return      none
// 2204  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2205 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
ZDSecMgrAssocDeviceAuth:
        CFI Block cfiBlock268 Using cfiCommon0
        CFI Function ZDSecMgrAssocDeviceAuth
// 2206 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2207   if ( assoc != NULL )
        MOV     A,R2
        JNZ     ??ZDSecMgrAssocDeviceAuth_0
        MOV     A,R3
??ZDSecMgrAssocDeviceAuth_0:
        JZ      ??ZDSecMgrAssocDeviceAuth_1
// 2208   {
// 2209     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.3
        MOVX    @DPTR,A
// 2210   }
// 2211 }
??ZDSecMgrAssocDeviceAuth_1:
        SJMP    ??Subroutine96_0
        CFI EndBlock cfiBlock268

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock269 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
        CFI EndBlock cfiBlock269
        REQUIRE ??Subroutine95_0
        ; // Fall through to label ??Subroutine95_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine95_0:
        CFI Block cfiBlock270 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock270
        REQUIRE ??Subroutine96_0
        ; // Fall through to label ??Subroutine96_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine96_0:
        CFI Block cfiBlock271 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock271
// 2212 
// 2213 /******************************************************************************
// 2214  * @fn          ZDSecMgrAuthInitiate
// 2215  *
// 2216  * @brief       Initiate entity authentication
// 2217  *
// 2218  * @param       responder - [in] responder EXT address
// 2219  *
// 2220  * @return      none
// 2221  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2222 void ZDSecMgrAuthInitiate( uint8* responder )
ZDSecMgrAuthInitiate:
        CFI Block cfiBlock272 Using cfiCommon0
        CFI Function ZDSecMgrAuthInitiate
// 2223 {
        FUNCALL ZDSecMgrAuthInitiate, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthInitiate, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2224   APSME_AuthenticateReq_t req;
// 2225 
// 2226 
// 2227   // make sure NWK address is available
// 2228   if ( APSME_LookupNwkAddr( responder, &req.nwkAddr ) )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        JZ      ??ZDSecMgrAuthInitiate_0
// 2229   {
// 2230     // set request fields
// 2231     req.extAddr   = responder;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2232     req.action    = APSME_EA_INITIATE;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2233     req.challenge = NULL;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ??Subroutine97_0 & 0xFFFF
// 2234 
// 2235     // start EA processing
// 2236     APSME_AuthenticateReq( &req );
// 2237   }
??CrossCallReturnLabel_150:
        LCALL   ??APSME_AuthenticateReq?relay
// 2238 }
??ZDSecMgrAuthInitiate_0:
        MOV     A,#0x7
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock272

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond273 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_143
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond274 Using cfiCommon0
        CFI (cfiCond274) NoFunction
        CFI (cfiCond274) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond274) CFA_SP SP+0
        CFI (cfiCond274) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker275 Using cfiCommon1
        CFI (cfiPicker275) NoFunction
        CFI (cfiPicker275) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond273
        CFI EndBlock cfiCond274
        CFI EndBlock cfiPicker275
        REQUIRE ??Subroutine97_0
        ; // Fall through to label ??Subroutine97_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine97_0:
        CFI Block cfiCond276 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_145
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond277 Using cfiCommon0
        CFI (cfiCond277) NoFunction
        CFI (cfiCond277) Conditional ??CrossCallReturnLabel_146
        CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond277) CFA_SP SP+0
        CFI (cfiCond277) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond278 Using cfiCommon0
        CFI (cfiCond278) NoFunction
        CFI (cfiCond278) Conditional ??CrossCallReturnLabel_147
        CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond278) CFA_SP SP+0
        CFI (cfiCond278) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond279 Using cfiCommon0
        CFI (cfiCond279) NoFunction
        CFI (cfiCond279) Conditional ??CrossCallReturnLabel_148
        CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond279) CFA_SP SP+0
        CFI (cfiCond279) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond280 Using cfiCommon0
        CFI (cfiCond280) NoFunction
        CFI (cfiCond280) Conditional ??CrossCallReturnLabel_149
        CFI (cfiCond280) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond280) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond280) CFA_SP SP+-5
        CFI (cfiCond280) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond281 Using cfiCommon0
        CFI (cfiCond281) NoFunction
        CFI (cfiCond281) Conditional ??CrossCallReturnLabel_150
        CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond281) CFA_SP SP+0
        CFI (cfiCond281) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond282 Using cfiCommon0
        CFI (cfiCond282) NoFunction
        CFI (cfiCond282) Conditional ??CrossCallReturnLabel_151
        CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond282) CFA_SP SP+0
        CFI (cfiCond282) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond283 Using cfiCommon0
        CFI (cfiCond283) NoFunction
        CFI (cfiCond283) Conditional ??CrossCallReturnLabel_152
        CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond283) CFA_SP SP+0
        CFI (cfiCond283) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond284 Using cfiCommon0
        CFI (cfiCond284) NoFunction
        CFI (cfiCond284) Conditional ??CrossCallReturnLabel_153
        CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond284) CFA_SP SP+0
        CFI (cfiCond284) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond285 Using cfiCommon0
        CFI (cfiCond285) NoFunction
        CFI (cfiCond285) Conditional ??CrossCallReturnLabel_143
        CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond285) CFA_SP SP+0
        CFI (cfiCond285) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond286 Using cfiCommon0
        CFI (cfiCond286) NoFunction
        CFI (cfiCond286) Conditional ??CrossCallReturnLabel_144
        CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond286) CFA_SP SP+0
        CFI (cfiCond286) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker287 Using cfiCommon1
        CFI (cfiPicker287) NoFunction
        CFI (cfiPicker287) Picker
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_154:
        RET
        CFI EndBlock cfiCond276
        CFI EndBlock cfiCond277
        CFI EndBlock cfiCond278
        CFI EndBlock cfiCond279
        CFI EndBlock cfiCond280
        CFI EndBlock cfiCond281
        CFI EndBlock cfiCond282
        CFI EndBlock cfiCond283
        CFI EndBlock cfiCond284
        CFI EndBlock cfiCond285
        CFI EndBlock cfiCond286
        CFI EndBlock cfiPicker287
// 2239 
// 2240 /******************************************************************************
// 2241  * @fn          ZDSecMgrAuthNwkKey
// 2242  *
// 2243  * @brief       Handle next step in authentication process
// 2244  *
// 2245  * @param       none
// 2246  *
// 2247  * @return      none
// 2248  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2249 void ZDSecMgrAuthNwkKey()
ZDSecMgrAuthNwkKey:
        CFI Block cfiBlock288 Using cfiCommon0
        CFI Function ZDSecMgrAuthNwkKey
// 2250 {
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2251   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthNwkKey_0
// 2252   {
// 2253     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2254     {
// 2255       uint8 parent[Z_EXTADDR_LEN];
// 2256 
// 2257       // get parent's EXT address
// 2258       NLME_GetCoordExtAddr( parent );
// 2259 
// 2260       // begin entity authentication with parent
// 2261       ZDSecMgrAuthInitiate( parent );
// 2262     }
// 2263     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2264     {
// 2265       // inform ZDO that device has been authenticated
// 2266       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
// 2267     }
// 2268   }
// 2269 }
??ZDSecMgrAuthNwkKey_0:
        SJMP    ??Subroutine96_0
        CFI EndBlock cfiBlock288
// 2270 
// 2271 /******************************************************************************
// 2272  * PUBLIC FUNCTIONS
// 2273  */
// 2274 /******************************************************************************
// 2275  * @fn          ZDSecMgrInit
// 2276  *
// 2277  * @brief       Initialize ZigBee Device Security Manager.
// 2278  *
// 2279  * @param       state - device initialization state
// 2280  *
// 2281  * @return      none
// 2282  */
// 2283 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2284 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 2285 void ZDSecMgrAddrMgrCB( uint8           update,
// 2286                         AddrMgrEntry_t* newEntry,
// 2287                         AddrMgrEntry_t* oldEntry )
// 2288 {
// 2289   (void)update;
// 2290   (void)newEntry;
// 2291   (void)oldEntry;
// 2292 }
// 2293 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2294 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2295 void ZDSecMgrInit(uint8 state)
ZDSecMgrInit:
        FUNCALL ZDSecMgrInit, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock289 Using cfiCommon0
        CFI NoFunction
        PUSH    DPL
        CFI CFA_SP SP+-4
        CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
        CFI CFA_SP SP+-5
        CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function APSME_SecurityNM
        LCALL   ??APSME_SecurityNM?relay
        SJMP    ??Subroutine96_0
        CFI EndBlock cfiBlock289
// 2296 {
// 2297   if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2298       || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2299   {
// 2300     // initialize sub modules
// 2301     ZDSecMgrMasterKeyInit();
// 2302     ZDSecMgrEntryInit(state);
// 2303 
// 2304     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2305     {
// 2306       ZDSecMgrCtrlInit();
// 2307     }
// 2308 
// 2309     // register with Address Manager
// 2310     #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 2311     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 2312     #endif
// 2313   }
// 2314 
// 2315   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2316   {
// 2317     // configure SKA slot data
// 2318     APSME_SKA_SlotInit( ZDSECMGR_SKA_SLOT_MAX );
// 2319   }
// 2320   else if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2321   {
// 2322     APSME_TCLinkKeyInit();  
// 2323     APSME_TCAddrSetup( zgTrustCenterAddr );    
// 2324   
// 2325   }
// 2326 
// 2327   if ( ZG_SECURE_ENABLED )
// 2328   {
// 2329     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2330     {
// 2331       // setup joining permissions
// 2332       ZDSecMgrPermitJoiningEnabled = TRUE;
// 2333       ZDSecMgrPermitJoiningTimed   = FALSE;
// 2334     }
// 2335   }
// 2336 
// 2337   // configure security based on security mode and type of device
// 2338   ZDSecMgrConfig();
// 2339 }
// 2340 
// 2341 /******************************************************************************
// 2342  * @fn          ZDSecMgrConfig
// 2343  *
// 2344  * @brief       Configure ZigBee Device Security Manager.
// 2345  *
// 2346  * @param       none
// 2347  *
// 2348  * @return      none
// 2349  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2350 void ZDSecMgrConfig( void )
ZDSecMgrConfig:
        CFI Block cfiBlock290 Using cfiCommon0
        CFI Function ZDSecMgrConfig
        FUNCALL ZDSecMgrConfig, APSME_SecurityNM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine6
        CFI EndBlock cfiBlock290
// 2351 {
// 2352   if ( ZG_SECURE_ENABLED )
// 2353   {
// 2354     SSP_Init();
// 2355 
// 2356     if ( (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH)
// 2357         || (ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD) )
// 2358     {
// 2359       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2360       {
// 2361         // COMMERCIAL MODE - COORDINATOR DEVICE
// 2362         APSME_SecurityCM_CD();
// 2363       }
// 2364       else if ( ZSTACK_ROUTER_BUILD )
// 2365       {
// 2366         // COMMERCIAL MODE - ROUTER DEVICE
// 2367         APSME_SecurityCM_RD();
// 2368       }
// 2369       else
// 2370       {
// 2371         // COMMERCIAL MODE - END DEVICE
// 2372         APSME_SecurityCM_ED();
// 2373       }
// 2374     }
// 2375     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2376     {
// 2377       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2378       {
// 2379         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 2380         APSME_SecurityRM_CD();
// 2381       }
// 2382       else if ( ZSTACK_ROUTER_BUILD )
// 2383       {
// 2384         // RESIDENTIAL MODE - ROUTER DEVICE
// 2385         APSME_SecurityRM_RD();
// 2386       }
// 2387       else
// 2388       {
// 2389         // RESIDENTIAL MODE - END DEVICE
// 2390         APSME_SecurityRM_ED();
// 2391       }
// 2392     }
// 2393   }
// 2394   else
// 2395   {
// 2396     // NO SECURITY
// 2397     APSME_SecurityNM();
// 2398   }
// 2399 }
// 2400 
// 2401 /******************************************************************************
// 2402  * @fn          ZDSecMgrPermitJoining
// 2403  *
// 2404  * @brief       Process request to change joining permissions.
// 2405  *
// 2406  * @param       duration - [in] timed duration for join in seconds
// 2407  *                         - 0x00 not allowed
// 2408  *                         - 0xFF allowed without timeout
// 2409  *
// 2410  * @return      uint8 - success(TRUE:FALSE)
// 2411  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2412 uint8 ZDSecMgrPermitJoining( uint8 duration )
ZDSecMgrPermitJoining:
        CFI Block cfiBlock291 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoining
// 2413 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
// 2414   uint8 accept;
// 2415 
// 2416 
// 2417   ZDSecMgrPermitJoiningTimed = FALSE;
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 2418 
// 2419   if ( duration > 0 )
        MOV     A,R2
        JZ      ??ZDSecMgrPermitJoining_0
// 2420   {
// 2421     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
// 2422 
// 2423     if ( duration != 0xFF )
        MOV     A,#-0x1
        XRL     A,R2
        JZ      ??ZDSecMgrPermitJoining_1
// 2424     {
// 2425       ZDSecMgrPermitJoiningTimed = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        SJMP    ??ZDSecMgrPermitJoining_2
// 2426     }
// 2427   }
// 2428   else
// 2429   {
// 2430     ZDSecMgrPermitJoiningEnabled = FALSE;
??ZDSecMgrPermitJoining_0:
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
??ZDSecMgrPermitJoining_2:
        MOVX    @DPTR,A
// 2431   }
// 2432 
// 2433   accept = TRUE;
// 2434 
// 2435   return accept;
??ZDSecMgrPermitJoining_1:
        MOV     R1,#0x1
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock291
// 2436 }
// 2437 
// 2438 /******************************************************************************
// 2439  * @fn          ZDSecMgrPermitJoiningTimeout
// 2440  *
// 2441  * @brief       Process permit joining timeout
// 2442  *
// 2443  * @param       none
// 2444  *
// 2445  * @return      none
// 2446  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2447 void ZDSecMgrPermitJoiningTimeout( void )
ZDSecMgrPermitJoiningTimeout:
        CFI Block cfiBlock292 Using cfiCommon0
        CFI Function ZDSecMgrPermitJoiningTimeout
// 2448 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2449   if ( ZDSecMgrPermitJoiningTimed == TRUE )
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrPermitJoiningTimeout_0
// 2450   {
// 2451     ZDSecMgrPermitJoiningEnabled = FALSE;
        CLR     A
        MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX    @DPTR,A
// 2452     ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV     DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX    @DPTR,A
// 2453   }
// 2454 }
??ZDSecMgrPermitJoiningTimeout_0:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock292
// 2455 
// 2456 /******************************************************************************
// 2457  * @fn          ZDSecMgrNewDeviceEvent
// 2458  *
// 2459  * @brief       Process a the new device event, if found reset new device
// 2460  *              event/timer.
// 2461  *
// 2462  * @param       none
// 2463  *
// 2464  * @return      uint8 - found(TRUE:FALSE)
// 2465  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2466 uint8 ZDSecMgrNewDeviceEvent( void )
ZDSecMgrNewDeviceEvent:
        CFI Block cfiBlock293 Using cfiCommon0
        CFI Function ZDSecMgrNewDeviceEvent
// 2467 {
        FUNCALL ZDSecMgrNewDeviceEvent, AssocMatchDeviceStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 35)
// 2468   uint8                 found;
// 2469   ZDSecMgrDevice_t      device;
// 2470   AddrMgrEntry_t        addrEntry;
// 2471   associated_devices_t* assoc;
// 2472   ZStatus_t             status;
// 2473 
// 2474   // initialize return results
// 2475   found = FALSE;
        MOV     ?V0 + 0,#0x0
// 2476 
// 2477   // look for device in the security init state
// 2478   assoc = AssocMatchDeviceStatus( DEV_SEC_INIT_STATUS );
        ; Setup parameters for call to function AssocMatchDeviceStatus
        MOV     R1,#0x4
        LCALL   ??AssocMatchDeviceStatus?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
// 2479 
// 2480   if ( assoc != NULL )
        MOV     A,R6
        JNZ     ??ZDSecMgrNewDeviceEvent_0
        MOV     A,R7
??ZDSecMgrNewDeviceEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrNewDeviceEvent_1 & 0xFFFF
// 2481   {
// 2482     // device found
// 2483     found = TRUE;
        MOV     ?V0 + 0,#0x1
// 2484 
// 2485     // check for preconfigured security
// 2486     if ( zgPreConfigKeys == TRUE )
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrNewDeviceEvent_2
// 2487     {
// 2488       // set association status to authenticated
// 2489       ZDSecMgrAssocDeviceAuth( assoc );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
// 2490     }
// 2491 
// 2492     // set up device info
// 2493     addrEntry.user  = ADDRMGR_USER_DEFAULT;
??ZDSecMgrNewDeviceEvent_2:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2494     addrEntry.index = assoc->addrIdx;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_163:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
// 2495     AddrMgrEntryGet( &addrEntry );
??CrossCallReturnLabel_200:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
// 2496 
// 2497     device.nwkAddr    = assoc->shortAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine30 & 0xFFFF
// 2498     device.extAddr    = addrEntry.extAddr;
??CrossCallReturnLabel_184:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
// 2499     device.parentAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_177:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
// 2500     device.secure     = FALSE;
??CrossCallReturnLabel_24:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2501     device.devStatus  = assoc->devStatus;
        MOV     A,R6
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine97_0 & 0xFFFF
// 2502 
// 2503     // process new device
// 2504     status = ZDSecMgrDeviceNew( &device );
??CrossCallReturnLabel_151:
        LCALL   ??ZDSecMgrDeviceNew?relay
        MOV     A,R1
        MOV     R2,A
// 2505 
// 2506     if ( status == ZSuccess )
        JNZ     ??ZDSecMgrNewDeviceEvent_3
// 2507     {
// 2508       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.2
        MOVX    @DPTR,A
        SJMP    ??ZDSecMgrNewDeviceEvent_1
// 2509     }
// 2510     else if ( status == ZNwkUnknownDevice )
??ZDSecMgrNewDeviceEvent_3:
        MOV     A,#-0x38
        XRL     A,R2
        JNZ     ??ZDSecMgrNewDeviceEvent_1
// 2511     {
// 2512       AssocRemove( addrEntry.extAddr );
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocRemove?relay
// 2513     }
// 2514   }
// 2515 
// 2516   return found;
??ZDSecMgrNewDeviceEvent_1:
        MOV     R1,?V0 + 0
        MOV     A,#0x17
        SJMP    ??Subroutine102_0
        CFI EndBlock cfiBlock293
// 2517 }
// 2518 
// 2519 /******************************************************************************
// 2520  * @fn          ZDSecMgrEvent
// 2521  *
// 2522  * @brief       Handle ZDO Security Manager event/timer(ZDO_SECMGR_EVENT).
// 2523  *
// 2524  * @param       none
// 2525  *
// 2526  * @return      none
// 2527  */
// 2528 void ZDSecMgrEvent( void )
// 2529 {
// 2530   uint8            action;
// 2531   uint8            restart;
// 2532   uint16           index;
// 2533   AddrMgrEntry_t   entry;
// 2534   ZDSecMgrDevice_t device;
// 2535 
// 2536 
// 2537   // verify data is available
// 2538   if ( ZDSecMgrCtrlData != NULL )
// 2539   {
// 2540     action  = FALSE;
// 2541     restart = FALSE;
// 2542 
// 2543     // update all the counters
// 2544     for ( index = 0; index < ZDSECMGR_ENTRY_MAX; index++ )
// 2545     {
// 2546       if ( ZDSecMgrCtrlData[index].state !=  ZDSECMGR_CTRL_NONE )
// 2547       {
// 2548         if ( ZDSecMgrCtrlData[index].cntr != 0 )
// 2549         {
// 2550           ZDSecMgrCtrlData[index].cntr--;
// 2551         }
// 2552 
// 2553         if ( ( action == FALSE ) && ( ZDSecMgrCtrlData[index].cntr == 0 ) )
// 2554         {
// 2555           action = TRUE;
// 2556 
// 2557           // update from control data
// 2558           device.parentAddr = ZDSecMgrCtrlData[index].parentAddr;
// 2559           device.secure     = ZDSecMgrCtrlData[index].secure;
// 2560           device.ctrl       = &ZDSecMgrCtrlData[index];
// 2561 
// 2562           // set the user and address index
// 2563           entry.user  = ADDRMGR_USER_SECURITY;
// 2564           entry.index = ZDSecMgrCtrlData[index].entry->ami;
// 2565 
// 2566           // get the address data
// 2567           AddrMgrEntryGet( &entry );
// 2568 
// 2569           // set device address data
// 2570           device.nwkAddr = entry.nwkAddr;
// 2571           device.extAddr = entry.extAddr;
// 2572 
// 2573           // update from entry data
// 2574           ZDSecMgrDeviceCtrlHandler( &device );
// 2575         }
// 2576         else
// 2577         {
// 2578           restart = TRUE;
// 2579         }
// 2580       }
// 2581     }
// 2582 
// 2583     // check for timer restart
// 2584     if ( restart == TRUE )
// 2585     {
// 2586       osal_start_timerEx(ZDAppTaskID, ZDO_SECMGR_EVENT, 100 );
// 2587     }
// 2588   }
// 2589 }
// 2590 
// 2591 /******************************************************************************
// 2592  * @fn          ZDSecMgrEstablishKeyCfm
// 2593  *
// 2594  * @brief       Process the ZDO_EstablishKeyCfm_t message.
// 2595  *
// 2596  * @param       cfm - [in] ZDO_EstablishKeyCfm_t confirmation
// 2597  *
// 2598  * @return      none
// 2599  */
// 2600 void ZDSecMgrEstablishKeyCfm( ZDO_EstablishKeyCfm_t* cfm )
// 2601 {
// 2602   // send the NWK key
// 2603   if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 2604   {
// 2605     // update control for specified EXT address
// 2606     ZDSecMgrDeviceCtrlUpdate( cfm->partExtAddr, ZDSECMGR_CTRL_SKKE_DONE );
// 2607   }
// 2608   else
// 2609   {
// 2610     // this should be done when receiving the NWK key
// 2611     // if devState ==
// 2612     //if ( devState == DEV_END_DEVICE_UNAUTH )
// 2613         //osal_set_event( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 2614 
// 2615     // if not in joining state -- this should trigger an event for an
// 2616     // end point that requested SKKE
// 2617     // if ( devState == DEV_END_DEVICE )
// 2618    //       devState == DEV_ROUTER;
// 2619 
// 2620   }
// 2621 }
// 2622 
// 2623 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
// 2624 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
// 2625 {
// 2626   uint8  match;
// 2627   uint8  lookup[Z_EXTADDR_LEN];
// 2628 
// 2629   match = FALSE;
// 2630 
// 2631   if ( AddrMgrExtAddrLookup( APSME_TRUSTCENTER_NWKADDR, lookup ) )
// 2632   {
// 2633     match = AddrMgrExtAddrEqual( lookup, extAddr );
// 2634   }
// 2635 
// 2636   return match;
// 2637 }
// 2638 
// 2639 void ZDSecMgrTCDataLoad( uint8* extAddr );
// 2640 void ZDSecMgrTCDataLoad( uint8* extAddr )
// 2641 {
// 2642   uint16 ami;
// 2643   uint8* key;
// 2644 
// 2645   if ( !ZDSecMgrTCDataLoaded )
// 2646   {
// 2647     if ( ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami ) == ZSuccess )
// 2648     {
// 2649       // if preconfigured load key
// 2650       if ( zgPreConfigKeys == TRUE )
// 2651       {
// 2652         if ( ZDSecMgrMasterKeyLookup( ami, &key ) != ZSuccess )
// 2653         {
// 2654           ZDSecMgrMasterKeyStore( ami, ZDSecMgrTCMasterKey );
// 2655         }
// 2656       }
// 2657     }
// 2658 
// 2659     ZDSecMgrTCDataLoaded = TRUE;
// 2660   }
// 2661 }
// 2662 
// 2663 /******************************************************************************
// 2664  * @fn          ZDSecMgrEstablishKeyInd
// 2665  *
// 2666  * @brief       Process the ZDO_EstablishKeyInd_t message.
// 2667  *
// 2668  * @param       ind - [in] ZDO_EstablishKeyInd_t indication
// 2669  *
// 2670  * @return      none
// 2671  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
        CFI Block cfiCond294 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_166
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond295 Using cfiCommon0
        CFI (cfiCond295) NoFunction
        CFI (cfiCond295) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond295) CFA_SP SP+0
        CFI (cfiCond295) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker296 Using cfiCommon1
        CFI (cfiPicker296) NoFunction
        CFI (cfiPicker296) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        CFI EndBlock cfiCond294
        CFI EndBlock cfiCond295
        CFI EndBlock cfiPicker296
        REQUIRE ??Subroutine98_0
        ; // Fall through to label ??Subroutine98_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine98_0:
        CFI Block cfiCond297 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_159
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond298 Using cfiCommon0
        CFI (cfiCond298) NoFunction
        CFI (cfiCond298) Conditional ??CrossCallReturnLabel_160
        CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond298) CFA_SP SP+0
        CFI (cfiCond298) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond299 Using cfiCommon0
        CFI (cfiCond299) NoFunction
        CFI (cfiCond299) Conditional ??CrossCallReturnLabel_161
        CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond299) CFA_SP SP+0
        CFI (cfiCond299) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond300 Using cfiCommon0
        CFI (cfiCond300) NoFunction
        CFI (cfiCond300) Conditional ??CrossCallReturnLabel_162
        CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond300) CFA_SP SP+0
        CFI (cfiCond300) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond301 Using cfiCommon0
        CFI (cfiCond301) NoFunction
        CFI (cfiCond301) Conditional ??CrossCallReturnLabel_163
        CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond301) CFA_SP SP+0
        CFI (cfiCond301) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond302 Using cfiCommon0
        CFI (cfiCond302) NoFunction
        CFI (cfiCond302) Conditional ??CrossCallReturnLabel_164
        CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond302) CFA_SP SP+0
        CFI (cfiCond302) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond303 Using cfiCommon0
        CFI (cfiCond303) NoFunction
        CFI (cfiCond303) Conditional ??CrossCallReturnLabel_165
        CFI (cfiCond303) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond303) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond303) CFA_SP SP+-5
        CFI (cfiCond303) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond304 Using cfiCommon0
        CFI (cfiCond304) NoFunction
        CFI (cfiCond304) Conditional ??CrossCallReturnLabel_166
        CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond304) CFA_SP SP+0
        CFI (cfiCond304) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond305 Using cfiCommon0
        CFI (cfiCond305) NoFunction
        CFI (cfiCond305) Conditional ??CrossCallReturnLabel_167
        CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond305) CFA_SP SP+0
        CFI (cfiCond305) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker306 Using cfiCommon1
        CFI (cfiPicker306) NoFunction
        CFI (cfiPicker306) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_196:
        RET
        CFI EndBlock cfiCond297
        CFI EndBlock cfiCond298
        CFI EndBlock cfiCond299
        CFI EndBlock cfiCond300
        CFI EndBlock cfiCond301
        CFI EndBlock cfiCond302
        CFI EndBlock cfiCond303
        CFI EndBlock cfiCond304
        CFI EndBlock cfiCond305
        CFI EndBlock cfiPicker306

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond307 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_184
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond308 Using cfiCommon0
        CFI (cfiCond308) NoFunction
        CFI (cfiCond308) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond308) CFA_SP SP+0
        CFI (cfiCond308) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond309 Using cfiCommon0
        CFI (cfiCond309) NoFunction
        CFI (cfiCond309) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond309) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond309) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond309) CFA_SP SP+-5
        CFI (cfiCond309) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker310 Using cfiCommon1
        CFI (cfiPicker310) NoFunction
        CFI (cfiPicker310) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
        CFI EndBlock cfiCond307
        CFI EndBlock cfiCond308
        CFI EndBlock cfiCond309
        CFI EndBlock cfiPicker310
??CrossCallReturnLabel_188:
        REQUIRE ??Subroutine99_0
        ; // Fall through to label ??Subroutine99_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine99_0:
        CFI Block cfiCond311 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_182
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond312 Using cfiCommon0
        CFI (cfiCond312) NoFunction
        CFI (cfiCond312) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond312) CFA_SP SP+0
        CFI (cfiCond312) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond313 Using cfiCommon0
        CFI (cfiCond313) NoFunction
        CFI (cfiCond313) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond313) CFA_SP SP+0
        CFI (cfiCond313) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond314 Using cfiCommon0
        CFI (cfiCond314) NoFunction
        CFI (cfiCond314) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond314) CFA_SP SP+0
        CFI (cfiCond314) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond315 Using cfiCommon0
        CFI (cfiCond315) NoFunction
        CFI (cfiCond315) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond315) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond315) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond315) CFA_SP SP+-5
        CFI (cfiCond315) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker316 Using cfiCommon1
        CFI (cfiPicker316) NoFunction
        CFI (cfiPicker316) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond311
        CFI EndBlock cfiCond312
        CFI EndBlock cfiCond313
        CFI EndBlock cfiCond314
        CFI EndBlock cfiCond315
        CFI EndBlock cfiPicker316
        REQUIRE ??Subroutine100_0
        ; // Fall through to label ??Subroutine100_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine100_0:
        CFI Block cfiCond317 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_168
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond318 Using cfiCommon0
        CFI (cfiCond318) NoFunction
        CFI (cfiCond318) Conditional ??CrossCallReturnLabel_169
        CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond318) CFA_SP SP+0
        CFI (cfiCond318) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond319 Using cfiCommon0
        CFI (cfiCond319) NoFunction
        CFI (cfiCond319) Conditional ??CrossCallReturnLabel_170
        CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond319) CFA_SP SP+0
        CFI (cfiCond319) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond320 Using cfiCommon0
        CFI (cfiCond320) NoFunction
        CFI (cfiCond320) Conditional ??CrossCallReturnLabel_171
        CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond320) CFA_SP SP+0
        CFI (cfiCond320) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond321 Using cfiCommon0
        CFI (cfiCond321) NoFunction
        CFI (cfiCond321) Conditional ??CrossCallReturnLabel_172
        CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond321) CFA_SP SP+0
        CFI (cfiCond321) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond322 Using cfiCommon0
        CFI (cfiCond322) NoFunction
        CFI (cfiCond322) Conditional ??CrossCallReturnLabel_173
        CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond322) CFA_SP SP+0
        CFI (cfiCond322) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond323 Using cfiCommon0
        CFI (cfiCond323) NoFunction
        CFI (cfiCond323) Conditional ??CrossCallReturnLabel_174
        CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond323) CFA_SP SP+0
        CFI (cfiCond323) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond324 Using cfiCommon0
        CFI (cfiCond324) NoFunction
        CFI (cfiCond324) Conditional ??CrossCallReturnLabel_175
        CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond324) CFA_SP SP+0
        CFI (cfiCond324) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond325 Using cfiCommon0
        CFI (cfiCond325) NoFunction
        CFI (cfiCond325) Conditional ??CrossCallReturnLabel_176
        CFI (cfiCond325) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond325) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond325) CFA_SP SP+-5
        CFI (cfiCond325) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond326 Using cfiCommon0
        CFI (cfiCond326) NoFunction
        CFI (cfiCond326) Conditional ??CrossCallReturnLabel_177
        CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond326) CFA_SP SP+0
        CFI (cfiCond326) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond327 Using cfiCommon0
        CFI (cfiCond327) NoFunction
        CFI (cfiCond327) Conditional ??CrossCallReturnLabel_178
        CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond327) CFA_SP SP+0
        CFI (cfiCond327) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond328 Using cfiCommon0
        CFI (cfiCond328) NoFunction
        CFI (cfiCond328) Conditional ??CrossCallReturnLabel_179
        CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond328) CFA_SP SP+0
        CFI (cfiCond328) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond329 Using cfiCommon0
        CFI (cfiCond329) NoFunction
        CFI (cfiCond329) Conditional ??CrossCallReturnLabel_180
        CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond329) CFA_SP SP+0
        CFI (cfiCond329) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond330 Using cfiCommon0
        CFI (cfiCond330) NoFunction
        CFI (cfiCond330) Conditional ??CrossCallReturnLabel_181
        CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond330) CFA_SP SP+0
        CFI (cfiCond330) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond331 Using cfiCommon0
        CFI (cfiCond331) NoFunction
        CFI (cfiCond331) Conditional ??CrossCallReturnLabel_182
        CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond331) CFA_SP SP+0
        CFI (cfiCond331) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond332 Using cfiCommon0
        CFI (cfiCond332) NoFunction
        CFI (cfiCond332) Conditional ??CrossCallReturnLabel_183
        CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond332) CFA_SP SP+0
        CFI (cfiCond332) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond333 Using cfiCommon0
        CFI (cfiCond333) NoFunction
        CFI (cfiCond333) Conditional ??CrossCallReturnLabel_184
        CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond333) CFA_SP SP+0
        CFI (cfiCond333) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond334 Using cfiCommon0
        CFI (cfiCond334) NoFunction
        CFI (cfiCond334) Conditional ??CrossCallReturnLabel_185
        CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond334) CFA_SP SP+0
        CFI (cfiCond334) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond335 Using cfiCommon0
        CFI (cfiCond335) NoFunction
        CFI (cfiCond335) Conditional ??CrossCallReturnLabel_186
        CFI (cfiCond335) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond335) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond335) CFA_SP SP+-5
        CFI (cfiCond335) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker336 Using cfiCommon1
        CFI (cfiPicker336) NoFunction
        CFI (cfiPicker336) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_208:
        RET
        CFI EndBlock cfiCond317
        CFI EndBlock cfiCond318
        CFI EndBlock cfiCond319
        CFI EndBlock cfiCond320
        CFI EndBlock cfiCond321
        CFI EndBlock cfiCond322
        CFI EndBlock cfiCond323
        CFI EndBlock cfiCond324
        CFI EndBlock cfiCond325
        CFI EndBlock cfiCond326
        CFI EndBlock cfiCond327
        CFI EndBlock cfiCond328
        CFI EndBlock cfiCond329
        CFI EndBlock cfiCond330
        CFI EndBlock cfiCond331
        CFI EndBlock cfiCond332
        CFI EndBlock cfiCond333
        CFI EndBlock cfiCond334
        CFI EndBlock cfiCond335
        CFI EndBlock cfiPicker336

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
        CFI Block cfiCond337 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond338 Using cfiCommon0
        CFI (cfiCond338) NoFunction
        CFI (cfiCond338) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_31
        CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond338) CFA_SP SP+0
        CFI (cfiCond338) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond339 Using cfiCommon0
        CFI (cfiCond339) NoFunction
        CFI (cfiCond339) Conditional ??CrossCallReturnLabel_204, ??CrossCallReturnLabel_32
        CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond339) CFA_SP SP+0
        CFI (cfiCond339) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond340 Using cfiCommon0
        CFI (cfiCond340) NoFunction
        CFI (cfiCond340) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_114
        CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond340) CFA_SP SP+0
        CFI (cfiCond340) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond341 Using cfiCommon0
        CFI (cfiCond341) NoFunction
        CFI (cfiCond341) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_115
        CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond341) CFA_SP SP+0
        CFI (cfiCond341) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond342 Using cfiCommon0
        CFI (cfiCond342) NoFunction
        CFI (cfiCond342) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_116
        CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond342) CFA_SP SP+0
        CFI (cfiCond342) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond343 Using cfiCommon0
        CFI (cfiCond343) NoFunction
        CFI (cfiCond343) Conditional ??CrossCallReturnLabel_205, ??CrossCallReturnLabel_117
        CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond343) CFA_SP SP+0
        CFI (cfiCond343) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond344 Using cfiCommon0
        CFI (cfiCond344) NoFunction
        CFI (cfiCond344) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_121
        CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond344) CFA_SP SP+0
        CFI (cfiCond344) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond345 Using cfiCommon0
        CFI (cfiCond345) NoFunction
        CFI (cfiCond345) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_122
        CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond345) CFA_SP SP+0
        CFI (cfiCond345) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond346 Using cfiCommon0
        CFI (cfiCond346) NoFunction
        CFI (cfiCond346) Conditional ??CrossCallReturnLabel_206, ??CrossCallReturnLabel_123
        CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond346) CFA_SP SP+0
        CFI (cfiCond346) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond347 Using cfiCommon0
        CFI (cfiCond347) NoFunction
        CFI (cfiCond347) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_127
        CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond347) CFA_SP SP+0
        CFI (cfiCond347) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond348 Using cfiCommon0
        CFI (cfiCond348) NoFunction
        CFI (cfiCond348) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_128
        CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond348) CFA_SP SP+0
        CFI (cfiCond348) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond349 Using cfiCommon0
        CFI (cfiCond349) NoFunction
        CFI (cfiCond349) Conditional ??CrossCallReturnLabel_207, ??CrossCallReturnLabel_129
        CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond349) CFA_SP SP+0
        CFI (cfiCond349) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond350 Using cfiCommon0
        CFI (cfiCond350) NoFunction
        CFI (cfiCond350) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_184
        CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond350) CFA_SP SP+0
        CFI (cfiCond350) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond351 Using cfiCommon0
        CFI (cfiCond351) NoFunction
        CFI (cfiCond351) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_185
        CFI (cfiCond351) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond351) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond351) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond351) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond351) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond351) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond351) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond351) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond351) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond351) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond351) CFA_SP SP+0
        CFI (cfiCond351) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond352 Using cfiCommon0
        CFI (cfiCond352) NoFunction
        CFI (cfiCond352) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_186
        CFI (cfiCond352) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond352) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond352) CFA_SP SP+-5
        CFI (cfiCond352) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond353 Using cfiCommon0
        CFI (cfiCond353) NoFunction
        CFI (cfiCond353) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_182
        CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond353) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond353) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond353) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond353) CFA_SP SP+0
        CFI (cfiCond353) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond354 Using cfiCommon0
        CFI (cfiCond354) NoFunction
        CFI (cfiCond354) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_183
        CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond354) CFA_SP SP+0
        CFI (cfiCond354) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond355 Using cfiCommon0
        CFI (cfiCond355) NoFunction
        CFI (cfiCond355) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_168
        CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond355) CFA_SP SP+0
        CFI (cfiCond355) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond356 Using cfiCommon0
        CFI (cfiCond356) NoFunction
        CFI (cfiCond356) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_169
        CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond356) CFA_SP SP+0
        CFI (cfiCond356) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond357 Using cfiCommon0
        CFI (cfiCond357) NoFunction
        CFI (cfiCond357) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_170
        CFI (cfiCond357) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond357) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond357) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond357) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond357) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond357) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond357) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond357) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond357) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond357) CFA_SP SP+0
        CFI (cfiCond357) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond358 Using cfiCommon0
        CFI (cfiCond358) NoFunction
        CFI (cfiCond358) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_171
        CFI (cfiCond358) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond358) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond358) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond358) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond358) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond358) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond358) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond358) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond358) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond358) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond358) CFA_SP SP+0
        CFI (cfiCond358) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond359 Using cfiCommon0
        CFI (cfiCond359) NoFunction
        CFI (cfiCond359) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_172
        CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond359) CFA_SP SP+0
        CFI (cfiCond359) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond360 Using cfiCommon0
        CFI (cfiCond360) NoFunction
        CFI (cfiCond360) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_173
        CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond360) CFA_SP SP+0
        CFI (cfiCond360) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond361 Using cfiCommon0
        CFI (cfiCond361) NoFunction
        CFI (cfiCond361) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_174
        CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond361) CFA_SP SP+0
        CFI (cfiCond361) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond362 Using cfiCommon0
        CFI (cfiCond362) NoFunction
        CFI (cfiCond362) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_175
        CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond362) CFA_SP SP+0
        CFI (cfiCond362) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond363 Using cfiCommon0
        CFI (cfiCond363) NoFunction
        CFI (cfiCond363) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_176
        CFI (cfiCond363) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond363) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond363) CFA_SP SP+-5
        CFI (cfiCond363) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond364 Using cfiCommon0
        CFI (cfiCond364) NoFunction
        CFI (cfiCond364) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_177
        CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond364) CFA_SP SP+0
        CFI (cfiCond364) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond365 Using cfiCommon0
        CFI (cfiCond365) NoFunction
        CFI (cfiCond365) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_178
        CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond365) CFA_SP SP+0
        CFI (cfiCond365) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond366 Using cfiCommon0
        CFI (cfiCond366) NoFunction
        CFI (cfiCond366) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_179
        CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond366) CFA_SP SP+0
        CFI (cfiCond366) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond367 Using cfiCommon0
        CFI (cfiCond367) NoFunction
        CFI (cfiCond367) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_180
        CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond367) CFA_SP SP+0
        CFI (cfiCond367) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond368 Using cfiCommon0
        CFI (cfiCond368) NoFunction
        CFI (cfiCond368) Conditional ??CrossCallReturnLabel_208, ??CrossCallReturnLabel_181
        CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond368) CFA_SP SP+0
        CFI (cfiCond368) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond369 Using cfiCommon0
        CFI (cfiCond369) NoFunction
        CFI (cfiCond369) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_197
        CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond369) CFA_SP SP+0
        CFI (cfiCond369) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond370 Using cfiCommon0
        CFI (cfiCond370) NoFunction
        CFI (cfiCond370) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_198
        CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond370) CFA_SP SP+0
        CFI (cfiCond370) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond371 Using cfiCommon0
        CFI (cfiCond371) NoFunction
        CFI (cfiCond371) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_199
        CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond371) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond371) CFA_SP SP+0
        CFI (cfiCond371) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond372 Using cfiCommon0
        CFI (cfiCond372) NoFunction
        CFI (cfiCond372) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_200
        CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond372) CFA_SP SP+0
        CFI (cfiCond372) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond373 Using cfiCommon0
        CFI (cfiCond373) NoFunction
        CFI (cfiCond373) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_201
        CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond373) CFA_SP SP+0
        CFI (cfiCond373) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond374 Using cfiCommon0
        CFI (cfiCond374) NoFunction
        CFI (cfiCond374) Conditional ??CrossCallReturnLabel_209, ??CrossCallReturnLabel_202
        CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond374) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond374) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond374) CFA_SP SP+0
        CFI (cfiCond374) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond375 Using cfiCommon0
        CFI (cfiCond375) NoFunction
        CFI (cfiCond375) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_5
        CFI (cfiCond375) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond375) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond375) CFA_SP SP+-5
        CFI (cfiCond375) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond376 Using cfiCommon0
        CFI (cfiCond376) NoFunction
        CFI (cfiCond376) Conditional ??CrossCallReturnLabel_203, ??CrossCallReturnLabel_6
        CFI (cfiCond376) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond376) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond376) CFA_SP SP+-5
        CFI (cfiCond376) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker377 Using cfiCommon1
        CFI (cfiPicker377) NoFunction
        CFI (cfiPicker377) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond337
        CFI EndBlock cfiCond338
        CFI EndBlock cfiCond339
        CFI EndBlock cfiCond340
        CFI EndBlock cfiCond341
        CFI EndBlock cfiCond342
        CFI EndBlock cfiCond343
        CFI EndBlock cfiCond344
        CFI EndBlock cfiCond345
        CFI EndBlock cfiCond346
        CFI EndBlock cfiCond347
        CFI EndBlock cfiCond348
        CFI EndBlock cfiCond349
        CFI EndBlock cfiCond350
        CFI EndBlock cfiCond351
        CFI EndBlock cfiCond352
        CFI EndBlock cfiCond353
        CFI EndBlock cfiCond354
        CFI EndBlock cfiCond355
        CFI EndBlock cfiCond356
        CFI EndBlock cfiCond357
        CFI EndBlock cfiCond358
        CFI EndBlock cfiCond359
        CFI EndBlock cfiCond360
        CFI EndBlock cfiCond361
        CFI EndBlock cfiCond362
        CFI EndBlock cfiCond363
        CFI EndBlock cfiCond364
        CFI EndBlock cfiCond365
        CFI EndBlock cfiCond366
        CFI EndBlock cfiCond367
        CFI EndBlock cfiCond368
        CFI EndBlock cfiCond369
        CFI EndBlock cfiCond370
        CFI EndBlock cfiCond371
        CFI EndBlock cfiCond372
        CFI EndBlock cfiCond373
        CFI EndBlock cfiCond374
        CFI EndBlock cfiCond375
        CFI EndBlock cfiCond376
        CFI EndBlock cfiPicker377

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
        CFI Block cfiCond378 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond379 Using cfiCommon0
        CFI (cfiCond379) NoFunction
        CFI (cfiCond379) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_8
        CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond379) CFA_SP SP+0
        CFI (cfiCond379) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond380 Using cfiCommon0
        CFI (cfiCond380) NoFunction
        CFI (cfiCond380) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_5
        CFI (cfiCond380) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond380) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond380) CFA_SP SP+-5
        CFI (cfiCond380) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond381 Using cfiCommon0
        CFI (cfiCond381) NoFunction
        CFI (cfiCond381) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_6
        CFI (cfiCond381) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond381) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond381) CFA_SP SP+-5
        CFI (cfiCond381) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker382 Using cfiCommon1
        CFI (cfiPicker382) NoFunction
        CFI (cfiPicker382) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond378
        CFI EndBlock cfiCond379
        CFI EndBlock cfiCond380
        CFI EndBlock cfiCond381
        CFI EndBlock cfiPicker382
        REQUIRE ??Subroutine101_0
        ; // Fall through to label ??Subroutine101_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine101_0:
        CFI Block cfiCond383 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond384 Using cfiCommon0
        CFI (cfiCond384) NoFunction
        CFI (cfiCond384) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_36
        CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond384) CFA_SP SP+0
        CFI (cfiCond384) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond385 Using cfiCommon0
        CFI (cfiCond385) NoFunction
        CFI (cfiCond385) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_118
        CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond385) CFA_SP SP+0
        CFI (cfiCond385) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond386 Using cfiCommon0
        CFI (cfiCond386) NoFunction
        CFI (cfiCond386) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_119
        CFI (cfiCond386) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond386) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond386) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond386) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond386) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond386) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond386) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond386) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond386) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond386) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond386) CFA_SP SP+0
        CFI (cfiCond386) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond387 Using cfiCommon0
        CFI (cfiCond387) NoFunction
        CFI (cfiCond387) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_120
        CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond387) CFA_SP SP+0
        CFI (cfiCond387) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond388 Using cfiCommon0
        CFI (cfiCond388) NoFunction
        CFI (cfiCond388) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_54
        CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond388) CFA_SP SP+0
        CFI (cfiCond388) CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond389 Using cfiCommon0
        CFI (cfiCond389) NoFunction
        CFI (cfiCond389) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_55
        CFI (cfiCond389) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond389) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond389) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond389) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond389) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond389) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond389) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond389) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond389) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond389) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond389) CFA_SP SP+0
        CFI (cfiCond389) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond390 Using cfiCommon0
        CFI (cfiCond390) NoFunction
        CFI (cfiCond390) Conditional ??CrossCallReturnLabel_190, ??CrossCallReturnLabel_56
        CFI (cfiCond390) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond390) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond390) CFA_SP SP+-5
        CFI (cfiCond390) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond391 Using cfiCommon0
        CFI (cfiCond391) NoFunction
        CFI (cfiCond391) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_65
        CFI (cfiCond391) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond391) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond391) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond391) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond391) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond391) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond391) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond391) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond391) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond391) CFA_SP SP+0
        CFI (cfiCond391) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond392 Using cfiCommon0
        CFI (cfiCond392) NoFunction
        CFI (cfiCond392) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_66
        CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond392) CFA_SP SP+0
        CFI (cfiCond392) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond393 Using cfiCommon0
        CFI (cfiCond393) NoFunction
        CFI (cfiCond393) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_67
        CFI (cfiCond393) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond393) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond393) CFA_SP SP+-5
        CFI Block cfiCond394 Using cfiCommon0
        CFI (cfiCond394) NoFunction
        CFI (cfiCond394) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_166
        CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond394) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond394) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond394) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond394) CFA_SP SP+0
        CFI (cfiCond394) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond395 Using cfiCommon0
        CFI (cfiCond395) NoFunction
        CFI (cfiCond395) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_167
        CFI (cfiCond395) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond395) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond395) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond395) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond395) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond395) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond395) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond395) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond395) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond395) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond395) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond395) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond395) CFA_SP SP+0
        CFI (cfiCond395) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond396 Using cfiCommon0
        CFI (cfiCond396) NoFunction
        CFI (cfiCond396) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_159
        CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond396) CFA_SP SP+0
        CFI (cfiCond396) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond397 Using cfiCommon0
        CFI (cfiCond397) NoFunction
        CFI (cfiCond397) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_160
        CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond397) CFA_SP SP+0
        CFI (cfiCond397) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond398 Using cfiCommon0
        CFI (cfiCond398) NoFunction
        CFI (cfiCond398) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_161
        CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond398) CFA_SP SP+0
        CFI (cfiCond398) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond399 Using cfiCommon0
        CFI (cfiCond399) NoFunction
        CFI (cfiCond399) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_162
        CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond399) CFA_SP SP+0
        CFI (cfiCond399) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond400 Using cfiCommon0
        CFI (cfiCond400) NoFunction
        CFI (cfiCond400) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_163
        CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond400) CFA_SP SP+0
        CFI (cfiCond400) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond401 Using cfiCommon0
        CFI (cfiCond401) NoFunction
        CFI (cfiCond401) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_164
        CFI (cfiCond401) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond401) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond401) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond401) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond401) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond401) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond401) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond401) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond401) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond401) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond401) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond401) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond401) CFA_SP SP+0
        CFI (cfiCond401) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond402 Using cfiCommon0
        CFI (cfiCond402) NoFunction
        CFI (cfiCond402) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_165
        CFI (cfiCond402) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond402) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond402) CFA_SP SP+-5
        CFI (cfiCond402) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond403 Using cfiCommon0
        CFI (cfiCond403) NoFunction
        CFI (cfiCond403) Conditional ??CrossCallReturnLabel_188, ??CrossCallReturnLabel_184
        CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond403) CFA_SP SP+0
        CFI (cfiCond403) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond404 Using cfiCommon0
        CFI (cfiCond404) NoFunction
        CFI (cfiCond404) Conditional ??CrossCallReturnLabel_188, ??CrossCallReturnLabel_185
        CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond404) CFA_SP SP+0
        CFI (cfiCond404) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond405 Using cfiCommon0
        CFI (cfiCond405) NoFunction
        CFI (cfiCond405) Conditional ??CrossCallReturnLabel_188, ??CrossCallReturnLabel_186
        CFI (cfiCond405) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond405) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond405) CFA_SP SP+-5
        CFI (cfiCond405) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond406 Using cfiCommon0
        CFI (cfiCond406) NoFunction
        CFI (cfiCond406) Conditional ??CrossCallReturnLabel_187, ??CrossCallReturnLabel_12
        CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond406) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond406) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond406) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond406) CFA_SP SP+0
        CFI (cfiCond406) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond407 Using cfiCommon0
        CFI (cfiCond407) NoFunction
        CFI (cfiCond407) Conditional ??CrossCallReturnLabel_187, ??CrossCallReturnLabel_13
        CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond407) CFA_SP SP+0
        CFI (cfiCond407) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond408 Using cfiCommon0
        CFI (cfiCond408) NoFunction
        CFI (cfiCond408) Conditional ??CrossCallReturnLabel_191, ??CrossCallReturnLabel_57
        CFI (cfiCond408) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond408) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond408) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond408) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond408) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond408) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond408) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond408) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond408) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond408) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond408) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond408) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond408) CFA_SP SP+0
        CFI (cfiCond408) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond409 Using cfiCommon0
        CFI (cfiCond409) NoFunction
        CFI (cfiCond409) Conditional ??CrossCallReturnLabel_191, ??CrossCallReturnLabel_58
        CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond409) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond409) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond409) CFA_SP SP+0
        CFI (cfiCond409) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond410 Using cfiCommon0
        CFI (cfiCond410) NoFunction
        CFI (cfiCond410) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_7
        CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond410) CFA_SP SP+0
        CFI (cfiCond410) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond411 Using cfiCommon0
        CFI (cfiCond411) NoFunction
        CFI (cfiCond411) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_8
        CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond411) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond411) CFA_SP SP+0
        CFI (cfiCond411) CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond412 Using cfiCommon0
        CFI (cfiCond412) NoFunction
        CFI (cfiCond412) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_5
        CFI (cfiCond412) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond412) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond412) CFA_SP SP+-5
        CFI (cfiCond412) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond413 Using cfiCommon0
        CFI (cfiCond413) NoFunction
        CFI (cfiCond413) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_6
        CFI (cfiCond413) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond413) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond413) CFA_SP SP+-5
        CFI (cfiCond413) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker414 Using cfiCommon1
        CFI (cfiPicker414) NoFunction
        CFI (cfiPicker414) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond383
        CFI EndBlock cfiCond384
        CFI EndBlock cfiCond385
        CFI EndBlock cfiCond386
        CFI EndBlock cfiCond387
        CFI EndBlock cfiCond388
        CFI EndBlock cfiCond389
        CFI EndBlock cfiCond390
        CFI EndBlock cfiCond391
        CFI EndBlock cfiCond392
        CFI EndBlock cfiCond393
        CFI EndBlock cfiCond394
        CFI EndBlock cfiCond395
        CFI EndBlock cfiCond396
        CFI EndBlock cfiCond397
        CFI EndBlock cfiCond398
        CFI EndBlock cfiCond399
        CFI EndBlock cfiCond400
        CFI EndBlock cfiCond401
        CFI EndBlock cfiCond402
        CFI EndBlock cfiCond403
        CFI EndBlock cfiCond404
        CFI EndBlock cfiCond405
        CFI EndBlock cfiCond406
        CFI EndBlock cfiCond407
        CFI EndBlock cfiCond408
        CFI EndBlock cfiCond409
        CFI EndBlock cfiCond410
        CFI EndBlock cfiCond411
        CFI EndBlock cfiCond412
        CFI EndBlock cfiCond413
        CFI EndBlock cfiPicker414

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock415 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        CFI EndBlock cfiBlock415
        REQUIRE ??Subroutine102_0
        ; // Fall through to label ??Subroutine102_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine102_0:
        CFI Block cfiBlock416 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock416
        REQUIRE ??Subroutine103_0
        ; // Fall through to label ??Subroutine103_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine103_0:
        CFI Block cfiBlock417 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock417

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEvent:
        CFI Block cfiBlock418 Using cfiCommon0
        CFI Function ZDSecMgrEvent
        FUNCALL ZDSecMgrEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, ZDSecMgrDeviceCtrlHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrEvent_0:
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_1 & 0xFFFF
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
??ZDSecMgrEvent_2:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDSecMgrEvent_3 & 0xFFFF
        MOV     A,R2
        ADD     A,#0x6
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_141:
        JZ      ??ZDSecMgrEvent_4
        DEC     A
        MOVX    @DPTR,A
??ZDSecMgrEvent_4:
        MOV     A,?V0 + 0
        JZ      $+5
        LJMP    ??ZDSecMgrEvent_5 & 0xFFFF
        MOV     DPTR,#ZDSecMgrCtrlData
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrEvent_5
        MOV     ?V0 + 0,#0x1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine93_0 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_201:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     R1,A
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine104_0 & 0xFFFF
??CrossCallReturnLabel_202:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_185:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??ZDSecMgrDeviceCtrlHandler?relay
        SJMP    ??ZDSecMgrEvent_3
??ZDSecMgrEvent_5:
        MOV     ?V0 + 1,#0x1
??ZDSecMgrEvent_3:
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_79:
        JNC     $+5
        LJMP    ??ZDSecMgrEvent_2 & 0xFFFF
        MOV     A,#0x1
        XRL     A,?V0 + 1
        JNZ     ??ZDSecMgrEvent_1
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
??ZDSecMgrEvent_1:
        MOV     A,#0x17
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock418

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
        CFI Block cfiCond419 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond420 Using cfiCommon0
        CFI (cfiCond420) NoFunction
        CFI (cfiCond420) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond420) CFA_SP SP+0
        CFI (cfiCond420) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker421 Using cfiCommon1
        CFI (cfiPicker421) NoFunction
        CFI (cfiPicker421) Picker
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_225:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond419
        CFI EndBlock cfiCond420
        CFI EndBlock cfiPicker421

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond422 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond423 Using cfiCommon0
        CFI (cfiCond423) NoFunction
        CFI (cfiCond423) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond423) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond423) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond423) CFA_SP SP+-5
        CFI Block cfiCond424 Using cfiCommon0
        CFI (cfiCond424) NoFunction
        CFI (cfiCond424) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond424) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond424) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond424) CFA_SP SP+-5
        CFI Block cfiCond425 Using cfiCommon0
        CFI (cfiCond425) NoFunction
        CFI (cfiCond425) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond425) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond425) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond425) CFA_SP SP+0
        CFI (cfiCond425) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond426 Using cfiCommon0
        CFI (cfiCond426) NoFunction
        CFI (cfiCond426) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond426) CFA_SP SP+0
        CFI (cfiCond426) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond427 Using cfiCommon0
        CFI (cfiCond427) NoFunction
        CFI (cfiCond427) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond427) CFA_SP SP+0
        CFI (cfiCond427) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond428 Using cfiCommon0
        CFI (cfiCond428) NoFunction
        CFI (cfiCond428) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond428) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond428) CFA_SP SP+0
        CFI (cfiCond428) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond429 Using cfiCommon0
        CFI (cfiCond429) NoFunction
        CFI (cfiCond429) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond429) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond429) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond429) CFA_SP SP+-5
        CFI (cfiCond429) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond430 Using cfiCommon0
        CFI (cfiCond430) NoFunction
        CFI (cfiCond430) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond430) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond430) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond430) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond430) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond430) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond430) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond430) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond430) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond430) CFA_SP SP+0
        CFI (cfiCond430) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker431 Using cfiCommon1
        CFI (cfiPicker431) NoFunction
        CFI (cfiPicker431) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond422
        CFI EndBlock cfiCond423
        CFI EndBlock cfiCond424
        CFI EndBlock cfiCond425
        CFI EndBlock cfiCond426
        CFI EndBlock cfiCond427
        CFI EndBlock cfiCond428
        CFI EndBlock cfiCond429
        CFI EndBlock cfiCond430
        CFI EndBlock cfiPicker431

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond432 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_197
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond433 Using cfiCommon0
        CFI (cfiCond433) NoFunction
        CFI (cfiCond433) Conditional ??CrossCallReturnLabel_198
        CFI (cfiCond433) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond433) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond433) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond433) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond433) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond433) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond433) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond433) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond433) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond433) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond433) CFA_SP SP+0
        CFI (cfiCond433) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker434 Using cfiCommon1
        CFI (cfiPicker434) NoFunction
        CFI (cfiPicker434) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond432
        CFI EndBlock cfiCond433
        CFI EndBlock cfiPicker434
        REQUIRE ??Subroutine104_0
        ; // Fall through to label ??Subroutine104_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine104_0:
        CFI Block cfiCond435 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_199
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond436 Using cfiCommon0
        CFI (cfiCond436) NoFunction
        CFI (cfiCond436) Conditional ??CrossCallReturnLabel_200
        CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond436) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond436) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond436) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond436) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond436) CFA_SP SP+0
        CFI (cfiCond436) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond437 Using cfiCommon0
        CFI (cfiCond437) NoFunction
        CFI (cfiCond437) Conditional ??CrossCallReturnLabel_201
        CFI (cfiCond437) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond437) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond437) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond437) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond437) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond437) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond437) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond437) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond437) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond437) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond437) CFA_SP SP+0
        CFI (cfiCond437) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond438 Using cfiCommon0
        CFI (cfiCond438) NoFunction
        CFI (cfiCond438) Conditional ??CrossCallReturnLabel_202
        CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond438) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond438) CFA_SP SP+0
        CFI (cfiCond438) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond439 Using cfiCommon0
        CFI (cfiCond439) NoFunction
        CFI (cfiCond439) Conditional ??CrossCallReturnLabel_197
        CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond439) CFA_SP SP+0
        CFI (cfiCond439) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond440 Using cfiCommon0
        CFI (cfiCond440) NoFunction
        CFI (cfiCond440) Conditional ??CrossCallReturnLabel_198
        CFI (cfiCond440) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond440) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond440) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond440) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond440) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond440) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond440) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond440) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond440) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond440) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond440) CFA_SP SP+0
        CFI (cfiCond440) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker441 Using cfiCommon1
        CFI (cfiPicker441) NoFunction
        CFI (cfiPicker441) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_209:
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV     A,#0xa
        RET
        CFI EndBlock cfiCond435
        CFI EndBlock cfiCond436
        CFI EndBlock cfiCond437
        CFI EndBlock cfiCond438
        CFI EndBlock cfiCond439
        CFI EndBlock cfiCond440
        CFI EndBlock cfiPicker441

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrEstablishKeyCfm:
        CFI Block cfiBlock442 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyCfm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock442

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCExtAddrCheck:
        CFI Block cfiBlock443 Using cfiCommon0
        CFI Function ZDSecMgrTCExtAddrCheck
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,#0x0
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrTCExtAddrCheck_0
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
??ZDSecMgrTCExtAddrCheck_0:
        MOV     R1,?V0 + 0
        MOV     A,#0x8
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock443

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrTCDataLoad:
        CFI Block cfiBlock444 Using cfiCommon0
        CFI Function ZDSecMgrTCDataLoad
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrMasterKeyStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_69
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_69
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_45:
        JZ      ??CrossCallReturnLabel_69
        ; Setup parameters for call to function ZDSecMgrMasterKeyStore
        MOV     R4,#(ZDSecMgrTCMasterKey & 0xff)
        MOV     R5,#((ZDSecMgrTCMasterKey >> 8) & 0xff)
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     A,#0x1
        MOV     DPTR,#ZDSecMgrTCDataLoaded
        MOVX    @DPTR,A
??ZDSecMgrTCDataLoad_0:
        MOV     A,#0x4
        LJMP    ??Subroutine88_0 & 0xFFFF
        CFI EndBlock cfiBlock444

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
        CFI Block cfiCond445 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond446 Using cfiCommon0
        CFI (cfiCond446) NoFunction
        CFI (cfiCond446) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond446) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond446) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond446) CFA_SP SP+0
        CFI (cfiCond446) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker447 Using cfiCommon1
        CFI (cfiPicker447) NoFunction
        CFI (cfiPicker447) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_234:
        LCALL   ??ZDSecMgrMasterKeyStore?relay
        RET
        CFI EndBlock cfiCond445
        CFI EndBlock cfiCond446
        CFI EndBlock cfiPicker447

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2672 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
ZDSecMgrEstablishKeyInd:
        CFI Block cfiBlock448 Using cfiCommon0
        CFI Function ZDSecMgrEstablishKeyInd
// 2673 {
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrTCExtAddrCheck
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, ZDSecMgrDeviceValidateSKKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEstablishKeyInd, APSME_EstablishKeyRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2674   ZDSecMgrDevice_t        device;
// 2675   APSME_EstablishKeyRsp_t rsp;
// 2676 
// 2677 
// 2678   // load Trust Center data if needed
// 2679   ZDSecMgrTCDataLoad( ind->initExtAddr );
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_94:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
// 2680 
// 2681   if ( ZDSecMgrTCExtAddrCheck( ind->initExtAddr ) )
        MOV     A,R6
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        ; Setup parameters for call to function ZDSecMgrTCExtAddrCheck
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDSecMgrTCExtAddrCheck?relay
        MOV     A,R1
        JZ      ??ZDSecMgrEstablishKeyInd_0
// 2682   {
// 2683     //IF (ind->srcAddr == APSME_TRUSTCENTER_NWKADDR)
// 2684     //OR
// 2685     //!ZDSecMgrTCAuthenticated
// 2686     //devtag.0604.critical
// 2687         //how is the parentAddr used here
// 2688 
// 2689     // initial SKKE from Trust Center via parent
// 2690     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
// 2691     device.parentAddr = ind->srcAddr;
// 2692   }
??CrossCallReturnLabel_12:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??ZDSecMgrEstablishKeyInd_1
// 2693   else
// 2694   {
// 2695     // Trust Center direct or E2E SKKE
// 2696     device.nwkAddr    = ind->srcAddr;
??ZDSecMgrEstablishKeyInd_0:
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_166:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
// 2697     device.parentAddr = INVALID_NODE_ADDR;
??CrossCallReturnLabel_178:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x1
??ZDSecMgrEstablishKeyInd_1:
        MOVX    @DPTR,A
// 2698   }
// 2699 
// 2700   device.extAddr = ind->initExtAddr;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine107_0 & 0xFFFF
// 2701   //devtag.pro.security.0724.todo - verify usage
// 2702   device.secure  = ind->nwkSecure;
??CrossCallReturnLabel_217:
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_86:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2703 
// 2704   // validate device for SKKE
// 2705   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrDeviceValidateSKKE
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrDeviceValidateSKKE?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrEstablishKeyInd_2
// 2706   {
// 2707     rsp.accept = TRUE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??ZDSecMgrEstablishKeyInd_3
// 2708   }
// 2709   else
// 2710   {
// 2711     rsp.accept = FALSE;
??ZDSecMgrEstablishKeyInd_2:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        CLR     A
// 2712   }
??ZDSecMgrEstablishKeyInd_3:
        LCALL   ?Subroutine20 & 0xFFFF
// 2713 
// 2714   rsp.dstAddr     = ind->srcAddr;
??CrossCallReturnLabel_13:
        LCALL   ??Subroutine99_0 & 0xFFFF
// 2715   rsp.initExtAddr = &ind->initExtAddr[0];
??CrossCallReturnLabel_183:
        MOV     A,R6
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
// 2716   //devtag.0604.todo - remove obsolete
// 2717   rsp.apsSecure   = ind->apsSecure;
??CrossCallReturnLabel_179:
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_138:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine18 & 0xFFFF
// 2718   rsp.nwkSecure   = ind->nwkSecure;
??CrossCallReturnLabel_11:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine97_0 & 0xFFFF
// 2719 
// 2720   APSME_EstablishKeyRsp( &rsp );
??CrossCallReturnLabel_152:
        LCALL   ??APSME_EstablishKeyRsp?relay
// 2721 }
        MOV     A,#0x11
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock448

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond449 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond450 Using cfiCommon0
        CFI (cfiCond450) NoFunction
        CFI (cfiCond450) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond450) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond450) CFA_SP SP+0
        CFI (cfiCond450) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker451 Using cfiCommon1
        CFI (cfiPicker451) NoFunction
        CFI (cfiPicker451) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_187:
        RET
        CFI EndBlock cfiCond449
        CFI EndBlock cfiCond450
        CFI EndBlock cfiPicker451
// 2722 //devtag.pro.security
// 2723 #if 0
// 2724 void ZDSecMgrEstablishKeyInd( ZDO_EstablishKeyInd_t* ind )
// 2725 {
// 2726   ZDSecMgrDevice_t        device;
// 2727   APSME_EstablishKeyRsp_t rsp;
// 2728 
// 2729 
// 2730   device.extAddr = ind->initExtAddr;
// 2731   device.secure  = ind->secure;
// 2732 
// 2733   if ( ind->secure == FALSE )
// 2734   {
// 2735     // SKKE from Trust Center is not secured between child and parent
// 2736     device.nwkAddr    = APSME_TRUSTCENTER_NWKADDR;
// 2737     device.parentAddr = ind->srcAddr;
// 2738   }
// 2739   else
// 2740   {
// 2741     // SKKE from initiator should be secured
// 2742     device.nwkAddr    = ind->srcAddr;
// 2743     device.parentAddr = INVALID_NODE_ADDR;
// 2744   }
// 2745 
// 2746   rsp.dstAddr     = ind->srcAddr;
// 2747   rsp.initExtAddr = &ind->initExtAddr[0];
// 2748   rsp.secure      = ind->secure;
// 2749 
// 2750   // validate device for SKKE
// 2751   if ( ZDSecMgrDeviceValidateSKKE( &device ) == ZSuccess )
// 2752   {
// 2753     rsp.accept = TRUE;
// 2754   }
// 2755   else
// 2756   {
// 2757     rsp.accept = FALSE;
// 2758   }
// 2759 
// 2760   APSME_EstablishKeyRsp( &rsp );
// 2761 }
// 2762 #endif
// 2763 
// 2764 /******************************************************************************
// 2765  * @fn          ZDSecMgrTransportKeyInd
// 2766  *
// 2767  * @brief       Process the ZDO_TransportKeyInd_t message.
// 2768  *
// 2769  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 2770  *
// 2771  * @return      none
// 2772  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2773 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
ZDSecMgrTransportKeyInd:
        CFI Block cfiBlock452 Using cfiCommon0
        CFI Function ZDSecMgrTransportKeyInd
// 2774 {
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2775   uint8 index;
// 2776 
// 2777   // load Trust Center data if needed
// 2778   ZDSecMgrTCDataLoad( ind->srcExtAddr );
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV     A,R6
        ADD     A,#0x16
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??ZDSecMgrTCDataLoad?relay
// 2779 
// 2780   if ( ind->keyType == KEY_TYPE_TC_MASTER )
        MOV     A,R6
        ADD     A,#0x4
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine94_0 & 0xFFFF
??CrossCallReturnLabel_139:
        JZ      ??ZDSecMgrTransportKeyInd_0
// 2781   {
// 2782     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2783     //ZDSecMgrTCMasterKey( ind );
// 2784     {
// 2785       if ( zgPreConfigKeys != TRUE )
// 2786       {
// 2787         // devtag.pro.security.todo - check if Trust Center address is configured and correct
// 2788         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2789       }
// 2790       else
// 2791       {
// 2792         // error condition - reject key
// 2793       }
// 2794     }
// 2795   }
// 2796   else if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 2797             ( ind->keyType == 6                 ) ||
// 2798             ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
        XRL     A,#0x1
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??ZDSecMgrTransportKeyInd_1
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrTransportKeyInd_0
// 2799   {
// 2800     // check for dummy NWK key (all zeros)
// 2801     for ( index = 0;
??ZDSecMgrTransportKeyInd_1:
        MOV     R2,#0x0
??ZDSecMgrTransportKeyInd_2:
        MOV     ?V0 + 0,R2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_210:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_3
// 2802           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 2803           index++ );
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x10
        JC      ??ZDSecMgrTransportKeyInd_2
// 2804 
// 2805     if ( index == SEC_KEY_LEN )
??ZDSecMgrTransportKeyInd_3:
        MOV     A,#0x10
        XRL     A,R2
        JNZ     ??ZDSecMgrTransportKeyInd_4
// 2806     {
// 2807       // load preconfigured key - once!!
// 2808       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 2809       {
// 2810         SSP_UpdateNwkKey( (byte*)zgPreConfigKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,#(zgPreConfigKey & 0xff)
        MOV     R3,#((zgPreConfigKey >> 8) & 0xff)
        LCALL   ??SSP_UpdateNwkKey?relay
// 2811         SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        SJMP    ??ZDSecMgrTransportKeyInd_6
// 2812       }
// 2813     }
// 2814     else
// 2815     {
// 2816       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
??ZDSecMgrTransportKeyInd_4:
        MOV     A,R6
        ADD     A,#0x5
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??SSP_UpdateNwkKey?relay
// 2817       if ( !_NIB.nwkKeyLoaded )
        MOV     DPTR,#(_NIB + 61)
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrTransportKeyInd_5
// 2818       {
// 2819         SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
??ZDSecMgrTransportKeyInd_6:
        LCALL   ??SSP_SwitchNwkKey?relay
// 2820       }
// 2821     }
// 2822 
// 2823     // handle next step in authentication process
// 2824     ZDSecMgrAuthNwkKey();
??ZDSecMgrTransportKeyInd_5:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL   ??ZDSecMgrAuthNwkKey?relay
// 2825   }
// 2826   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 2827   {
// 2828     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2829     {
// 2830       //ZDSecMgrTCLinkKey( ind );
// 2831     }
// 2832   }
// 2833   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 2834   {
// 2835     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2836     {
// 2837       uint16           ami;
// 2838       AddrMgrEntry_t   entry;
// 2839       ZDSecMgrEntry_t* entryZD;
// 2840 
// 2841       ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami );
// 2842 
// 2843       if ( ind->initiator == TRUE )
// 2844       {
// 2845         // get the ami data
// 2846         entry.user  = ADDRMGR_USER_SECURITY;
// 2847         entry.index = ami;
// 2848         AddrMgrEntryGet( &entry );
// 2849 
// 2850         if ( entry.nwkAddr != INVALID_NODE_ADDR )
// 2851         {
// 2852           APSME_EstablishKeyReq_t req;
// 2853           ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2854 
// 2855           ZDSecMgrEntryLookupAMI( ami, &entryZD );
// 2856 
// 2857           if ( entryZD == NULL )
// 2858           {
// 2859             // get new entry
// 2860             if ( ZDSecMgrEntryNew( &entryZD ) == ZSuccess )
// 2861             {
// 2862               // finish setting up entry
// 2863               entryZD->ami = ami;
// 2864             }
// 2865           }
// 2866 
// 2867           req.respExtAddr = ind->srcExtAddr;
// 2868           req.method      = APSME_SKKE_METHOD;
// 2869           req.dstAddr     = entry.nwkAddr;
// 2870           //devtag.0604.todo - remove obsolete
// 2871           req.apsSecure   = FALSE;
// 2872           req.nwkSecure   = TRUE;
// 2873           APSME_EstablishKeyReq( &req );
// 2874         }
// 2875       }
// 2876       else
// 2877       {
// 2878         if ( ami == INVALID_NODE_ADDR )
// 2879         {
// 2880           // store new EXT address
// 2881           ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2882         }
// 2883 
// 2884         ZDSecMgrMasterKeyLoad( ind->srcExtAddr, ind->key );
// 2885       }
// 2886 
// 2887       //if ( entry.nwkAddr == INVALID_NODE_ADDR )
// 2888       //{
// 2889       //  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2890       //}
// 2891     }
// 2892   }
// 2893   else if ( ind->keyType == KEY_TYPE_APP_LINK )
// 2894   {
// 2895     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 2896     {
// 2897       uint16           ami;
// 2898       ZDSecMgrEntry_t* entry;
// 2899 
// 2900       // get the address index
// 2901       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
// 2902       {
// 2903         // store new EXT address
// 2904         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
// 2905         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2906       }
// 2907 
// 2908       ZDSecMgrEntryLookupAMI( ami, &entry );
// 2909 
// 2910       if ( entry == NULL )
// 2911       {
// 2912         // get new entry
// 2913         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 2914         {
// 2915           // finish setting up entry
// 2916           entry->ami = ami;
// 2917         }
// 2918       }
// 2919 
// 2920       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
// 2921     }
// 2922   }
// 2923 }
??ZDSecMgrTransportKeyInd_0:
        LJMP    ??Subroutine89_0 & 0xFFFF
        CFI EndBlock cfiBlock452

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
        CFI Block cfiCond453 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_86
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond454 Using cfiCommon0
        CFI (cfiCond454) NoFunction
        CFI (cfiCond454) Conditional ??CrossCallReturnLabel_87
        CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond454) CFA_SP SP+0
        CFI (cfiCond454) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker455 Using cfiCommon1
        CFI (cfiPicker455) NoFunction
        CFI (cfiPicker455) Picker
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond453
        CFI EndBlock cfiCond454
        CFI EndBlock cfiPicker455
// 2924 
// 2925 /******************************************************************************
// 2926  * @fn          ZDSecMgrUpdateDeviceInd
// 2927  *
// 2928  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 2929  *
// 2930  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 2931  *
// 2932  * @return      none
// 2933  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2934 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
        CFI Block cfiBlock456 Using cfiCommon0
        CFI Function ZDSecMgrUpdateDeviceInd
// 2935 {
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
// 2936   ZDSecMgrDevice_t device;
// 2937 
// 2938 
// 2939   device.nwkAddr    = ind->devAddr;
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine105_0 & 0xFFFF
??CrossCallReturnLabel_211:
        LCALL   ?Subroutine30 & 0xFFFF
// 2940   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_186:
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
// 2941   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
// 2942 
// 2943   //if ( ( ind->status == APSME_UD_SECURED_JOIN   ) ||
// 2944   //     ( ind->status == APSME_UD_UNSECURED_JOIN )   )
// 2945   //{
// 2946   //  if ( ind->status == APSME_UD_SECURED_JOIN )
// 2947   //  {
// 2948   //    device.secure = TRUE;
// 2949   //  }
// 2950   //  else
// 2951   //  {
// 2952   //    device.secure = FALSE;
// 2953   //  }
// 2954 
// 2955     // try to join this device
// 2956     ZDSecMgrDeviceJoin( &device );
??CrossCallReturnLabel_1:
        LCALL   ??ZDSecMgrDeviceJoin?relay
        CFI EndBlock cfiBlock456
// 2957   //}
// 2958 }
        REQUIRE ?Subroutine11
        ; // Fall through to label ?Subroutine11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiBlock457 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 10)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xa
        SJMP    ??Subroutine106_0
        CFI EndBlock cfiBlock457
// 2959 
// 2960 /******************************************************************************
// 2961  * @fn          ZDSecMgrRemoveDeviceInd
// 2962  *
// 2963  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 2964  *
// 2965  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 2966  *
// 2967  * @return      none
// 2968  */
// 2969 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
// 2970 {
// 2971   ZDSecMgrDevice_t device;
// 2972 
// 2973 
// 2974   // only accept from Trust Center
// 2975   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
// 2976   {
// 2977     // look up NWK address
// 2978     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
// 2979     {
// 2980       device.parentAddr = NLME_GetShortAddr();
// 2981       device.extAddr    = ind->childExtAddr;
// 2982 
// 2983       // remove device
// 2984       ZDSecMgrDeviceRemove( &device );
// 2985     }
// 2986   }
// 2987 }
// 2988 
// 2989 /******************************************************************************
// 2990  * @fn          ZDSecMgrRequestKeyInd
// 2991  *
// 2992  * @brief       Process the ZDO_RequestKeyInd_t message.
// 2993  *
// 2994  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 2995  *
// 2996  * @return      none
// 2997  */
// 2998 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
// 2999 {
// 3000   if ( ind->keyType == KEY_TYPE_NWK )
// 3001   {
// 3002   }
// 3003   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
// 3004   {
// 3005     ZDSecMgrAppKeyReq( ind );
// 3006   }
// 3007   else if ( ind->keyType == KEY_TYPE_TC_LINK )
// 3008   {
// 3009   }
// 3010   //else ignore
// 3011 }
// 3012 
// 3013 /******************************************************************************
// 3014  * @fn          ZDSecMgrSwitchKeyInd
// 3015  *
// 3016  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 3017  *
// 3018  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 3019  *
// 3020  * @return      none
// 3021  */
// 3022 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
// 3023 {
// 3024   SSP_SwitchNwkKey( ind->keySeqNum );
// 3025 
// 3026   // Save if nv
// 3027   ZDApp_NVUpdate();
// 3028 }
// 3029 
// 3030 /******************************************************************************
// 3031  * @fn          ZDSecMgrAuthenticateInd
// 3032  *
// 3033  * @brief       Process the ZDO_AuthenticateInd_t message.
// 3034  *
// 3035  * @param       ind - [in] ZDO_AuthenticateInd_t indication
// 3036  *
// 3037  * @return      none
// 3038  */
// 3039 void ZDSecMgrAuthenticateInd( ZDO_AuthenticateInd_t* ind )
// 3040 {
// 3041   APSME_AuthenticateReq_t req;
// 3042   AddrMgrEntry_t          entry;
// 3043 
// 3044 
// 3045   // update the address manager
// 3046   //---------------------------------------------------------------------------
// 3047   // note:
// 3048   // required for EA processing, but ultimately EA logic could also use the
// 3049   // neighbor table to look up addresses -- also(IF using EA) the neighbor
// 3050   // table is supposed to have authentication states for neighbors
// 3051   //---------------------------------------------------------------------------
// 3052   entry.user    = ADDRMGR_USER_SECURITY;
// 3053   entry.nwkAddr = ind->aps.initNwkAddr;
// 3054   AddrMgrExtAddrSet( entry.extAddr, ind->aps.initExtAddr );
// 3055 
// 3056   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3057   {
// 3058     // set request fields
// 3059     req.nwkAddr   = ind->aps.initNwkAddr;
// 3060     req.extAddr   = ind->aps.initExtAddr;
// 3061     req.action    = APSME_EA_ACCEPT;
// 3062     req.challenge = ind->aps.challenge;
// 3063 
// 3064     // start EA processing
// 3065     APSME_AuthenticateReq( &req );
// 3066   }
// 3067 }
// 3068 
// 3069 /******************************************************************************
// 3070  * @fn          ZDSecMgrAuthenticateCfm
// 3071  *
// 3072  * @brief       Process the ZDO_AuthenticateCfm_t message.
// 3073  *
// 3074  * @param       cfm - [in] ZDO_AuthenticateCfm_t confirmation
// 3075  *
// 3076  * @return      none
// 3077  */
// 3078 void ZDSecMgrAuthenticateCfm( ZDO_AuthenticateCfm_t* cfm )
// 3079 {
// 3080   if ( cfm->aps.status == ZSuccess )
// 3081   {
// 3082     if ( ( cfm->aps.initiator == TRUE ) && ( devState == DEV_END_DEVICE_UNAUTH ) )
// 3083     {
// 3084       // inform ZDO that device has been authenticated
// 3085       osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
// 3086     }
// 3087   }
// 3088 }
// 3089 
// 3090 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3091 /******************************************************************************
// 3092  * @fn          ZDSecMgrUpdateNwkKey
// 3093  *
// 3094  * @brief       Load a new NWK key and trigger a network wide update.
// 3095  *
// 3096  * @param       key       - [in] new NWK key
// 3097  * @param       keySeqNum - [in] new NWK key sequence number
// 3098  *
// 3099  * @return      ZStatus_t
// 3100  */
// 3101 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
// 3102 {
// 3103   ZStatus_t               status;
// 3104   APSME_TransportKeyReq_t req;
// 3105 
// 3106   // initialize common elements of local variables
// 3107   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3108     req.keyType   = KEY_TYPE_NWK_HIGH;
// 3109   else
// 3110     req.keyType   = KEY_TYPE_NWK;
// 3111 
// 3112   req.dstAddr   = dstAddr;
// 3113   req.keySeqNum = keySeqNum;
// 3114   req.key       = key;
// 3115   req.extAddr   = NULL;
// 3116   req.nwkSecure = TRUE;
// 3117   req.apsSecure = TRUE;
// 3118   req.tunnel    = NULL;
// 3119 
// 3120   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3121   {
// 3122     ZDSecMgrEntry_t*        entry;
// 3123     uint16                  index;
// 3124     AddrMgrEntry_t          addrEntry;
// 3125 
// 3126     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3127 
// 3128     status = ZFailure;
// 3129 
// 3130     // verify data is available
// 3131     if ( ZDSecMgrEntries != NULL )
// 3132     {
// 3133       // find available entry
// 3134       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3135       {
// 3136         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3137         {
// 3138           // return successful result
// 3139           entry = &ZDSecMgrEntries[index];
// 3140 
// 3141           // get NWK address
// 3142           addrEntry.index = entry->ami;
// 3143           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3144           {
// 3145             req.dstAddr = addrEntry.nwkAddr;
// 3146             req.extAddr = addrEntry.extAddr;
// 3147             status = APSME_TransportKeyReq( &req );
// 3148           }
// 3149         }
// 3150       }
// 3151     }
// 3152   }
// 3153   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3154   {
// 3155     status = APSME_TransportKeyReq( &req );
// 3156   }
// 3157 
// 3158   SSP_UpdateNwkKey( key, keySeqNum );
// 3159 
// 3160   // Save if nv
// 3161   ZDApp_NVUpdate();
// 3162 
// 3163   return status;
// 3164 }
// 3165 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3166 
// 3167 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3168 /******************************************************************************
// 3169  * @fn          ZDSecMgrSwitchNwkKey
// 3170  *
// 3171  * @brief       Causes the NWK key to switch via a network wide command.
// 3172  *
// 3173  * @param       keySeqNum - [in] new NWK key sequence number
// 3174  *
// 3175  * @return      ZStatus_t
// 3176  */
// 3177 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
// 3178 {
// 3179   ZStatus_t            status;
// 3180   APSME_SwitchKeyReq_t req;
// 3181 
// 3182   // initialize common elements of local variables
// 3183   req.dstAddr = dstAddr;
// 3184   req.keySeqNum = keySeqNum;
// 3185 
// 3186   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_PRO_HIGH )
// 3187   {
// 3188     ZDSecMgrEntry_t*     entry;
// 3189     uint16               index;
// 3190     AddrMgrEntry_t       addrEntry;
// 3191 
// 3192     addrEntry.user = ADDRMGR_USER_SECURITY;
// 3193 
// 3194     status = ZFailure;
// 3195 
// 3196     // verify data is available
// 3197     if ( ZDSecMgrEntries != NULL )
// 3198     {
// 3199       // find available entry
// 3200       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
// 3201       {
// 3202         if ( ZDSecMgrEntries[index].ami != INVALID_NODE_ADDR )
// 3203         {
// 3204           // return successful result
// 3205           entry = &ZDSecMgrEntries[index];
// 3206 
// 3207           // get NWK address
// 3208           addrEntry.index = entry->ami;
// 3209 
// 3210           if ( AddrMgrEntryGet( &addrEntry ) == TRUE )
// 3211           {
// 3212             req.dstAddr = addrEntry.nwkAddr;
// 3213             status = APSME_SwitchKeyReq( &req );
// 3214           }
// 3215         }
// 3216       }
// 3217     }
// 3218   }
// 3219   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 3220   {
// 3221     status = APSME_SwitchKeyReq( &req );
// 3222   }
// 3223 
// 3224   SSP_SwitchNwkKey( keySeqNum );
// 3225 
// 3226   // Save if nv
// 3227   ZDApp_NVUpdate();
// 3228 
// 3229   return status;
// 3230 }
// 3231 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 3232 
// 3233 #if ( ZG_BUILD_JOINING_TYPE )
// 3234 /******************************************************************************
// 3235  * @fn          ZDSecMgrRequestAppKey
// 3236  *
// 3237  * @brief       Request an application key with partner.
// 3238  *
// 3239  * @param       partNwkAddr - [in] partner network address
// 3240  *
// 3241  * @return      ZStatus_t
// 3242  */
// 3243 ZStatus_t ZDSecMgrRequestAppKey( uint16 partNwkAddr )
// 3244 {
// 3245   ZStatus_t             status;
// 3246   APSME_RequestKeyReq_t req;
// 3247   uint8                 partExtAddr[Z_EXTADDR_LEN];
// 3248 
// 3249 
// 3250   if ( AddrMgrExtAddrLookup( partNwkAddr, partExtAddr ) )
// 3251   {
// 3252     req.dstAddr = 0;
// 3253     req.keyType = KEY_TYPE_APP_MASTER;
// 3254     req.partExtAddr = partExtAddr;
// 3255     status = APSME_RequestKeyReq( &req );
// 3256   }
// 3257   else
// 3258   {
// 3259     status = ZFailure;
// 3260   }
// 3261 
// 3262   return status;
// 3263 }
// 3264 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3265 
// 3266 #if ( ZG_BUILD_JOINING_TYPE )
// 3267 /******************************************************************************
// 3268  * @fn          ZDSecMgrSetupPartner
// 3269  *
// 3270  * @brief       Setup for application key partner.
// 3271  *
// 3272  * @param       partNwkAddr - [in] partner network address
// 3273  *
// 3274  * @return      ZStatus_t
// 3275  */
// 3276 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 3277 {
// 3278   AddrMgrEntry_t entry;
// 3279   ZStatus_t      status;
// 3280 
// 3281   status = ZFailure;
// 3282 
// 3283   // update the address manager
// 3284   entry.user    = ADDRMGR_USER_SECURITY;
// 3285   entry.nwkAddr = partNwkAddr;
// 3286   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 3287 
// 3288   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 3289   {
// 3290     status = ZSuccess;
// 3291 
// 3292     // check for address discovery
// 3293     if ( partNwkAddr == INVALID_NODE_ADDR )
// 3294     {
// 3295       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3296     }
// 3297     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 3298     {
// 3299       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 3300     }
// 3301   }
// 3302 
// 3303   return status;
// 3304 }
// 3305 #endif // ( ZG_BUILD_JOINING_TYPE )
// 3306 
// 3307 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 3308 /******************************************************************************
// 3309  * @fn          ZDSecMgrAppKeyTypeSet
// 3310  *
// 3311  * @brief       Set application key type.
// 3312  *
// 3313  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 3314  *                                                   KEY_TYPE_APP_LINK@3
// 3315  *
// 3316  * @return      ZStatus_t
// 3317  */
// 3318 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
// 3319 {
// 3320   if ( keyType == KEY_TYPE_APP_LINK )
// 3321   {
// 3322     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
// 3323   }
// 3324   else
// 3325   {
// 3326     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
// 3327   }
// 3328 
// 3329   return ZSuccess;
// 3330 }
// 3331 #endif
// 3332 
// 3333 /******************************************************************************
// 3334  * ZigBee Device Security Manager - Stub Implementations
// 3335  */
// 3336 /******************************************************************************
// 3337  * @fn          ZDSecMgrMasterKeyGet (stubs APSME_MasterKeyGet)
// 3338  *
// 3339  * @brief       Get MASTER key for specified EXT address.
// 3340  *
// 3341  * @param       extAddr - [in] EXT address
// 3342  * @param       key     - [out] MASTER key
// 3343  *
// 3344  * @return      ZStatus_t
// 3345  */
// 3346 ZStatus_t ZDSecMgrMasterKeyGet( uint8* extAddr, uint8** key )
// 3347 {
// 3348   ZStatus_t status;
// 3349   uint16    ami;
// 3350 
// 3351 
// 3352   // lookup entry for specified EXT address
// 3353   status = ZDSecMgrExtAddrLookup( extAddr, &ami );
// 3354   //status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3355 
// 3356   if ( status == ZSuccess )
// 3357   {
// 3358     ZDSecMgrMasterKeyLookup( ami, key );
// 3359   }
// 3360   else
// 3361   {
// 3362     *key = NULL;
// 3363   }
// 3364 
// 3365   return status;
// 3366 }
// 3367 
// 3368 /******************************************************************************
// 3369  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 3370  *
// 3371  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 3372  *
// 3373  * @param       extAddr - [in] EXT address
// 3374  * @param       data    - [in] APSME_LinkKeyData_t
// 3375  *
// 3376  * @return      ZStatus_t
// 3377  */
// 3378 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
// 3379 {
// 3380   ZStatus_t        status;
// 3381   ZDSecMgrEntry_t* entry;
// 3382 
// 3383 
// 3384   // lookup entry index for specified EXT address
// 3385   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3386 
// 3387   if ( status == ZSuccess )
// 3388   {
// 3389     // setup the link key data reference
// 3390     osal_memcpy( entry->lkd.key, key, SEC_KEY_LEN );
// 3391 
// 3392     entry->lkd.apsmelkd.rxFrmCntr = 0;
// 3393     entry->lkd.apsmelkd.txFrmCntr = 0;
// 3394   }
// 3395 
// 3396   return status;
// 3397 }
// 3398 
// 3399 /******************************************************************************
// 3400  * @fn          ZDSecMgrAuthenticationSet
// 3401  *
// 3402  * @brief       Mark the specific device as authenticated or not
// 3403  *
// 3404  * @param       extAddr - [in] EXT address
// 3405  * @param       option  - [in] authenticated or not
// 3406  *
// 3407  * @return      ZStatus_t
// 3408  */
// 3409 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
// 3410 {
// 3411   ZStatus_t        status;
// 3412   ZDSecMgrEntry_t* entry;
// 3413 
// 3414 
// 3415   // lookup entry index for specified EXT address
// 3416   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3417 
// 3418   if ( status == ZSuccess )
// 3419   {
// 3420     entry->authenticateOption = option;
// 3421   }
// 3422 
// 3423   return status;
// 3424 }
// 3425 
// 3426 /******************************************************************************
// 3427  * @fn          ZDSecMgrAuthenticationCheck
// 3428  *
// 3429  * @brief       Check if the specific device has been authenticated or not
// 3430  *              For non-trust center device, always return true
// 3431  *
// 3432  * @param       shortAddr - [in] short address
// 3433  *
// 3434  * @return      TRUE @ authenticated with CBKE
// 3435  *              FALSE @ not authenticated
// 3436  */
// 3437 
// 3438 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
// 3439 {
// 3440 #if defined (TC_LINKKEY_JOIN)
// 3441 
// 3442   ZDSecMgrEntry_t* entry;
// 3443   uint8 extAddr[Z_EXTADDR_LEN];
// 3444 
// 3445   // If the local device is not the trust center, always return TRUE
// 3446   if ( NLME_GetShortAddr() != TCshortAddr )
// 3447   {
// 3448     return TRUE;
// 3449   }
// 3450   // Otherwise, check the authentication option
// 3451   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
// 3452   {
// 3453     // lookup entry index for specified EXT address
// 3454     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
// 3455     {
// 3456       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
// 3457       {
// 3458         return TRUE;
// 3459       }
// 3460       else
// 3461       {
// 3462         return FALSE;
// 3463       }
// 3464     }
// 3465   }
// 3466   return FALSE;
// 3467 
// 3468 #else
// 3469   (void)shortAddr;  // Intentionally unreferenced parameter
// 3470   
// 3471   // For non AMI/SE Profile, perform no check and always return true.
// 3472   return TRUE;
// 3473 
// 3474 #endif // TC_LINKKEY_JOIN
// 3475 }
// 3476 
// 3477 
// 3478 /******************************************************************************
// 3479  * @fn          ZDSecMgrLinkKeyDataGet (stubs APSME_LinkKeyDataGet)
// 3480  *
// 3481  * @brief       Get <APSME_LinkKeyData_t> for specified NWK address.
// 3482  *
// 3483  * @param       extAddr - [in] EXT address
// 3484  * @param       data    - [out] APSME_LinkKeyData_t
// 3485  *
// 3486  * @return      ZStatus_t
// 3487  */
// 3488 ZStatus_t ZDSecMgrLinkKeyDataGet(uint8* extAddr, APSME_LinkKeyData_t** data)
// 3489 {
// 3490   ZStatus_t        status;
// 3491   ZDSecMgrEntry_t* entry;
// 3492 
// 3493 
// 3494   // lookup entry index for specified NWK address
// 3495   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
// 3496 
// 3497   if ( status == ZSuccess )
// 3498   {
// 3499     // setup the link key data reference
// 3500     (*data) = &entry->lkd.apsmelkd;
// 3501     (*data)->key = entry->lkd.key;
// 3502   }
// 3503   else
// 3504   {
// 3505     *data = NULL;
// 3506   }
// 3507 
// 3508   return status;
// 3509 }
// 3510 
// 3511 /******************************************************************************
// 3512  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 3513  *
// 3514  * @brief       Verify and process key transportation to child.
// 3515  *
// 3516  * @param       ind - [in] APSME_TransportKeyInd_t
// 3517  *
// 3518  * @return      uint8 - success(TRUE:FALSE)
// 3519  */
// 3520 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
// 3521 {
// 3522   uint8 success;
// 3523 
// 3524   success = FALSE;
// 3525 
// 3526   // verify from Trust Center
// 3527   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
// 3528   {
// 3529     success = TRUE;
// 3530 
// 3531     // check for initial NWK key
// 3532     if ( ( ind->keyType == KEY_TYPE_NWK      ) ||
// 3533          ( ind->keyType == 6                 ) ||
// 3534          ( ind->keyType == KEY_TYPE_NWK_HIGH )    )
// 3535     {
// 3536       // set association status to authenticated
// 3537       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
// 3538     }
// 3539   }
// 3540 
// 3541   return success;
// 3542 }
// 3543 
// 3544 /******************************************************************************
// 3545  * @fn          ZDSecMgrAddLinkKey
// 3546  *
// 3547  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 3548  *              as authenticated in the authenticateOption. Note that this function
// 3549  *              is hardwared to CBKE right now.
// 3550  *
// 3551  * @param       shortAddr - short address of the partner device
// 3552  * @param       extAddr - extended address of the partner device
// 3553  * @param       key - link key
// 3554  *
// 3555  * @return      ZStatus_t
// 3556  */
// 3557 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
// 3558 {
// 3559   uint16           ami;
// 3560   ZDSecMgrEntry_t* entry;
// 3561 
// 3562   /* Store the device address in the addr manager */
// 3563   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
// 3564   {
// 3565     /* Adding to Addr Manager fails */
// 3566     return ZFailure;
// 3567   }
// 3568 
// 3569   /* Lookup entry using specified address index */
// 3570   ZDSecMgrEntryLookupAMI( ami, &entry );
// 3571 
// 3572   // If no existing entry, create one
// 3573   if ( entry == NULL )
// 3574   {
// 3575     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
// 3576     {
// 3577       entry->ami = ami;
// 3578     }
// 3579     else
// 3580     {
// 3581       /* Security Manager full */
// 3582       return ZBufferFull;
// 3583     }
// 3584   }
// 3585   // Write the link key
// 3586   APSME_LinkKeySet( extAddr, key );
// 3587 
// 3588 #if defined (TC_LINKKEY_JOIN)
// 3589   // Mark the device as authenticated.
// 3590   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
// 3591 #endif
// 3592 
// 3593 #if defined NV_RESTORE
// 3594   ZDSecMgrWriteNV();  // Write the new established link key to NV.
// 3595 #endif
// 3596   
// 3597   return ZSuccess;
// 3598 }
// 3599 
// 3600 #if defined ( NV_RESTORE )
// 3601 /******************************************************************************
// 3602  * @fn          ZDSecMgrInitNV
// 3603  *
// 3604  * @brief       Initialize the SecMgr entry data in NV.
// 3605  *
// 3606  * @param       none
// 3607  *
// 3608  * @return      uint8 - <osal_nv_item_init> return codes
// 3609  */
// 3610 uint8 ZDSecMgrInitNV(void)
// 3611 {
// 3612   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE, 
// 3613                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
// 3614   if (rtrn != ZSUCCESS)  // If the item does not already exist.
// 3615   {
// 3616     nvDeviceListHdr_t hdr;
// 3617     hdr.numRecs = 0;
// 3618     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 3619   }
// 3620 
// 3621   return rtrn;
// 3622 }
// 3623 #endif // NV_RESTORE
// 3624 
// 3625 #if defined ( NV_RESTORE )
// 3626 /*********************************************************************
// 3627  * @fn      ZDSecMgrWriteNV()
// 3628  *
// 3629  * @brief   Save off the link key list to NV
// 3630  *
// 3631  * @param   none
// 3632  *
// 3633  * @return  none
// 3634  */
// 3635 static void ZDSecMgrWriteNV( void )
// 3636 {
// 3637   uint16 i;
// 3638   nvDeviceListHdr_t hdr;
// 3639 
// 3640   hdr.numRecs = 0;
// 3641 
// 3642   if (ZDSecMgrEntries != NULL)
// 3643   {
// 3644     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
// 3645     {
// 3646       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
// 3647       {
// 3648         // Save off the record
// 3649         osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 3650                 (uint16)((sizeof(nvDeviceListHdr_t)) + (hdr.numRecs * sizeof(ZDSecMgrEntry_t))),
// 3651                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
// 3652         hdr.numRecs++;
// 3653       }
// 3654     }
// 3655   }
// 3656 
// 3657   // Save off the header
// 3658   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 3659 }
// 3660 #endif // NV_RESTORE
// 3661 
// 3662 #if defined ( NV_RESTORE )
// 3663 /******************************************************************************
// 3664  * @fn          ZDSecMgrRestoreFromNV
// 3665  *
// 3666  * @brief       Restore the SecMgr entry data from NV.
// 3667  *
// 3668  * @param       none
// 3669  *
// 3670  * @return      None.
// 3671  */
// 3672 static void ZDSecMgrRestoreFromNV( void )
// 3673 {
// 3674   nvDeviceListHdr_t hdr;
// 3675 
// 3676   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 3677       (hdr.numRecs <= ZDSECMGR_ENTRY_MAX))
// 3678   {
// 3679     uint8 x;
// 3680 
// 3681     for (x = 0; x < hdr.numRecs; x++)
// 3682     {
// 3683       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 3684                 (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 3685                       sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == ZSUCCESS )
// 3686       {
// 3687         ZDSecMgrEntries[x].lkd.apsmelkd.txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
// 3688       }
// 3689     }
// 3690   }
// 3691 }
// 3692 #endif // NV_RESTORE
// 3693 
// 3694 /******************************************************************************
// 3695  * @fn          ZDSecMgrAPSRemove
// 3696  *
// 3697  * @brief       Remove device from network.
// 3698  *
// 3699  * @param       nwkAddr - device's NWK address
// 3700  * @param       extAddr - device's Extended address
// 3701  * @param       parentAddr - parent's NWK address
// 3702  *
// 3703  * @return      ZStatus_t
// 3704  */
// 3705 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
// 3706 {
// 3707   ZDSecMgrDevice_t device;
// 3708 
// 3709   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 3710        ( extAddr == NULL )              ||
// 3711        ( parentAddr == INVALID_NODE_ADDR ) )
// 3712   {
// 3713     return ( ZFailure );
// 3714   }
// 3715 
// 3716   device.nwkAddr = nwkAddr;
// 3717   device.extAddr = extAddr;
// 3718   device.parentAddr = parentAddr;
// 3719 
// 3720   // remove device
// 3721   ZDSecMgrDeviceRemove( &device );
// 3722 
// 3723   return ( ZSuccess );
// 3724 }
// 3725 
// 3726 /******************************************************************************
// 3727  * @fn          APSME_TCLinkKeyInit
// 3728  *
// 3729  * @brief       Initialize the NV table for preconfigured TC link key
// 3730  *               
// 3731  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 3732  *              Trust Center Link Key is written to NV. A single tclk is used   
// 3733  *              by all devices joining the network.
// 3734  *              
// 3735  * @param       none
// 3736  *
// 3737  * @return      none
// 3738  */
// 3739 void APSME_TCLinkKeyInit(void)
// 3740 {
// 3741   uint8             i;
// 3742   APSME_TCLinkKey_t tcLinkKey;
// 3743   
// 3744   // Initialize all NV items for preconfigured tclk with 
// 3745   // extended address all zero, if not exist already.
// 3746   osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
// 3747   for( i = 1; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3748   {
// 3749     osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i), 
// 3750                        sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 3751   }
// 3752   
// 3753   // Initialize the default tclk
// 3754   if( zgUseDefaultTCLK == TRUE )
// 3755   {
// 3756     osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
// 3757     osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
// 3758     
// 3759     // If the item doesn't exist in NV memory, create and initialize
// 3760     // it with the default value passed in.
// 3761     osal_nv_item_init( ZCD_NV_TCLK_TABLE_START, sizeof(APSME_TCLinkKey_t), &tcLinkKey );
// 3762   }
// 3763   else
// 3764   {
// 3765     osal_nv_item_init( ZCD_NV_TCLK_TABLE_START, sizeof(APSME_TCLinkKey_t), &tcLinkKey);
// 3766   }
// 3767 }
// 3768 
// 3769 /******************************************************************************
// 3770  * @fn          APSME_TCLinkKeySync
// 3771  *
// 3772  * @brief       Sync Trust Center LINK key data.
// 3773  *
// 3774  * @param       srcAddr - [in] srcAddr
// 3775  * @param       si      - [in, out] SSP_Info_t
// 3776  *
// 3777  * @return      ZStatus_t
// 3778  */
// 3779 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
// 3780 {
// 3781   ZStatus_t          status = ZSecNoKey;
// 3782   uint8              i;
// 3783   APSME_TCLinkKey_t  tcLinkKey;       
// 3784   
// 3785   // Look up the IEEE address of the trust center if it's available
// 3786   if ( AddrMgrExtAddrValid( si->extAddr ) == false )
// 3787   {
// 3788     APSME_LookupExtAddr( srcAddr, si->extAddr );
// 3789   }
// 3790   
// 3791   // Look up the TC link key associated with the device
// 3792   // or the default TC link key (extAddr is all FFs), whichever is found
// 3793   for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3794   {
// 3795     // Read entry i of the TC link key table from NV
// 3796     osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3797                  sizeof(APSME_TCLinkKey_t), &tcLinkKey );
// 3798     
// 3799     if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
// 3800         APSME_IsDefaultTCLK(tcLinkKey.extAddr))
// 3801     {
// 3802       // verify that the incoming frame counter is valid
// 3803       if ( si->frmCntr >= tcLinkKey.rxFrmCntr )
// 3804       {
// 3805         // set the key to use
// 3806         osal_memcpy( si->key, tcLinkKey.key, SEC_KEY_LEN );
// 3807         
// 3808         // update the rx frame counter
// 3809         tcLinkKey.rxFrmCntr = si->frmCntr + 1;
// 3810         
// 3811         // Write the tc link key back to the NV
// 3812         osal_nv_write( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3813                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
// 3814         
// 3815         status = ZSuccess;
// 3816         
// 3817       }
// 3818       else
// 3819       {
// 3820         status = ZSecOldFrmCount;
// 3821       }
// 3822       
// 3823       return status;
// 3824     }
// 3825   }
// 3826   
// 3827   
// 3828   return status;
// 3829 }
// 3830 
// 3831 /******************************************************************************
// 3832  * @fn          APSME_TCLinkKeyLoad
// 3833  *
// 3834  * @brief       Load Trust Center LINK key data.
// 3835  *
// 3836  * @param       dstAddr - [in] dstAddr
// 3837  * @param       si      - [in, out] SSP_Info_t
// 3838  *
// 3839  * @return      ZStatus_t
// 3840  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine77:
        CFI Block cfiCond458 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_213
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond459 Using cfiCommon0
        CFI (cfiCond459) NoFunction
        CFI (cfiCond459) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond459) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond459) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond459) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond459) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond459) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond459) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond459) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond459) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond459) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond459) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond459) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond459) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond459) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond459) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond459) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond459) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond459) CFA_SP SP+0
        CFI (cfiCond459) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker460 Using cfiCommon1
        CFI (cfiPicker460) NoFunction
        CFI (cfiPicker460) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        CFI EndBlock cfiCond458
        CFI EndBlock cfiCond459
        CFI EndBlock cfiPicker460
        REQUIRE ??Subroutine105_0
        ; // Fall through to label ??Subroutine105_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine105_0:
        CFI Block cfiCond461 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_140
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond462 Using cfiCommon0
        CFI (cfiCond462) NoFunction
        CFI (cfiCond462) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_141
        CFI (cfiCond462) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond462) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond462) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond462) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond462) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond462) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond462) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond462) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond462) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond462) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond462) CFA_SP SP+0
        CFI (cfiCond462) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond463 Using cfiCommon0
        CFI (cfiCond463) NoFunction
        CFI (cfiCond463) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_142
        CFI (cfiCond463) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond463) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond463) CFA_SP SP+-5
        CFI Block cfiCond464 Using cfiCommon0
        CFI (cfiCond464) NoFunction
        CFI (cfiCond464) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_138
        CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond464) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond464) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond464) CFA_SP SP+0
        CFI (cfiCond464) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond465 Using cfiCommon0
        CFI (cfiCond465) NoFunction
        CFI (cfiCond465) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_139
        CFI (cfiCond465) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond465) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond465) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond465) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond465) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond465) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond465) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond465) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond465) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond465) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond465) CFA_SP SP+0
        CFI (cfiCond465) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond466 Using cfiCommon0
        CFI (cfiCond466) NoFunction
        CFI (cfiCond466) Conditional ??CrossCallReturnLabel_210
        CFI (cfiCond466) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond466) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond466) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond466) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond466) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond466) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond466) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond466) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond466) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond466) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond466) CFA_SP SP+0
        CFI (cfiCond466) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond467 Using cfiCommon0
        CFI (cfiCond467) NoFunction
        CFI (cfiCond467) Conditional ??CrossCallReturnLabel_211
        CFI (cfiCond467) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond467) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond467) CFA_SP SP+-5
        CFI (cfiCond467) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond468 Using cfiCommon0
        CFI (cfiCond468) NoFunction
        CFI (cfiCond468) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_229
        CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond468) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond468) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond468) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond468) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond468) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond468) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond468) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond468) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond468) CFA_SP SP+0
        CFI (cfiCond468) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond469 Using cfiCommon0
        CFI (cfiCond469) NoFunction
        CFI (cfiCond469) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_230
        CFI (cfiCond469) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond469) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond469) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond469) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond469) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond469) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond469) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond469) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond469) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond469) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond469) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond469) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond469) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond469) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond469) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond469) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond469) CFA_SP SP+0
        CFI (cfiCond469) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond470 Using cfiCommon0
        CFI (cfiCond470) NoFunction
        CFI (cfiCond470) Conditional ??CrossCallReturnLabel_213
        CFI (cfiCond470) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond470) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond470) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond470) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond470) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond470) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond470) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond470) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond470) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond470) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond470) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond470) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond470) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond470) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond470) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond470) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond470) CFA_SP SP+0
        CFI (cfiCond470) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiCond471 Using cfiCommon0
        CFI (cfiCond471) NoFunction
        CFI (cfiCond471) Conditional ??CrossCallReturnLabel_214
        CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond471) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond471) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond471) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond471) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond471) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond471) CFA_SP SP+0
        CFI (cfiCond471) CFA_XSP16 add(XSP16, 61)
        CFI Block cfiPicker472 Using cfiCommon1
        CFI (cfiPicker472) NoFunction
        CFI (cfiPicker472) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond461
        CFI EndBlock cfiCond462
        CFI EndBlock cfiCond463
        CFI EndBlock cfiCond464
        CFI EndBlock cfiCond465
        CFI EndBlock cfiCond466
        CFI EndBlock cfiCond467
        CFI EndBlock cfiCond468
        CFI EndBlock cfiCond469
        CFI EndBlock cfiCond470
        CFI EndBlock cfiCond471
        CFI EndBlock cfiPicker472

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond473 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond474 Using cfiCommon0
        CFI (cfiCond474) NoFunction
        CFI (cfiCond474) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond474) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond474) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond474) CFA_SP SP+-5
        CFI (cfiCond474) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker475 Using cfiCommon1
        CFI (cfiPicker475) NoFunction
        CFI (cfiPicker475) Picker
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_203:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine68 & 0xFFFF
??CrossCallReturnLabel_193:
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond473
        CFI EndBlock cfiCond474
        CFI EndBlock cfiPicker475

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock476 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0x2
        CFI EndBlock cfiBlock476
        REQUIRE ??Subroutine106_0
        ; // Fall through to label ??Subroutine106_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine106_0:
        CFI Block cfiBlock477 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 8)
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        CFI Valid
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock477

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRemoveDeviceInd:
        CFI Block cfiBlock478 Using cfiCommon0
        CFI Function ZDSecMgrRemoveDeviceInd
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrRemoveDeviceInd_0
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrRemoveDeviceInd_0:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
        MOV     A,R2
        ADD     A,#0x4
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_81:
        JNZ     ??ZDSecMgrRemoveDeviceInd_1
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine97_0 & 0xFFFF
??CrossCallReturnLabel_153:
        LCALL   ??ZDSecMgrDeviceRemove?relay
??ZDSecMgrRemoveDeviceInd_1:
        MOV     A,#0xa
        LJMP    ??Subroutine91_0 & 0xFFFF
        CFI EndBlock cfiBlock478

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
        CFI Block cfiCond479 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 49)
        CFI Block cfiCond480 Using cfiCommon0
        CFI (cfiCond480) NoFunction
        CFI (cfiCond480) Conditional ??CrossCallReturnLabel_81
        CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond480) CFA_SP SP+0
        CFI (cfiCond480) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker481 Using cfiCommon1
        CFI (cfiPicker481) NoFunction
        CFI (cfiPicker481) Picker
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LookupNwkAddr?relay
        MOV     A,R1
        XRL     A,#0x1
        RET
        CFI EndBlock cfiCond479
        CFI EndBlock cfiCond480
        CFI EndBlock cfiPicker481

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRequestKeyInd:
        CFI Block cfiBlock482 Using cfiCommon0
        CFI Function ZDSecMgrRequestKeyInd
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        XRL     A,R4
        JZ      ??ZDSecMgrRequestKeyInd_0
        MOV     A,#0x2
        XRL     A,R4
        JNZ     ??ZDSecMgrRequestKeyInd_0
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL   ??ZDSecMgrAppKeyReq?relay
??ZDSecMgrRequestKeyInd_0:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock482

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSwitchKeyInd:
        CFI Block cfiBlock483 Using cfiCommon0
        CFI Function ZDSecMgrSwitchKeyInd
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SSP_SwitchNwkKey?relay
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   ??ZDApp_NVUpdate?relay
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock483

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticateInd:
        CFI Block cfiBlock484 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateInd
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticateInd, APSME_AuthenticateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
        MOV     DPH,A
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_164:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_180:
        LCALL   ?Subroutine64 & 0xFFFF
??CrossCallReturnLabel_95:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     R4,?V0 + 0
        MOV     R5,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateInd_0
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_167:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_128:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine107_0 & 0xFFFF
??CrossCallReturnLabel_218:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ??APSME_AuthenticateReq?relay
??ZDSecMgrAuthenticateInd_0:
        MOV     A,#0x14
        LJMP    ??Subroutine102_0 & 0xFFFF
        CFI EndBlock cfiBlock484

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
        CFI Block cfiCond485 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond486 Using cfiCommon0
        CFI (cfiCond486) NoFunction
        CFI (cfiCond486) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond486) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond486) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond486) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond486) CFA_SP SP+0
        CFI (cfiCond486) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker487 Using cfiCommon1
        CFI (cfiPicker487) NoFunction
        CFI (cfiPicker487) Picker
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond485
        CFI EndBlock cfiCond486
        CFI EndBlock cfiPicker487

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond488 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_219
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond489 Using cfiCommon0
        CFI (cfiCond489) NoFunction
        CFI (cfiCond489) Conditional ??CrossCallReturnLabel_220
        CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond489) CFA_SP SP+0
        CFI (cfiCond489) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker490 Using cfiCommon1
        CFI (cfiPicker490) NoFunction
        CFI (cfiPicker490) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        CFI EndBlock cfiCond488
        CFI EndBlock cfiCond489
        CFI EndBlock cfiPicker490
        REQUIRE ??Subroutine107_0
        ; // Fall through to label ??Subroutine107_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine107_0:
        CFI Block cfiCond491 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_216
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond492 Using cfiCommon0
        CFI (cfiCond492) NoFunction
        CFI (cfiCond492) Conditional ??CrossCallReturnLabel_217
        CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond492) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond492) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond492) CFA_SP SP+0
        CFI (cfiCond492) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond493 Using cfiCommon0
        CFI (cfiCond493) NoFunction
        CFI (cfiCond493) Conditional ??CrossCallReturnLabel_218
        CFI (cfiCond493) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond493) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond493) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond493) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond493) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond493) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond493) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond493) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond493) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond493) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond493) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond493) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond493) CFA_SP SP+0
        CFI (cfiCond493) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond494 Using cfiCommon0
        CFI (cfiCond494) NoFunction
        CFI (cfiCond494) Conditional ??CrossCallReturnLabel_219
        CFI (cfiCond494) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond494) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond494) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond494) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond494) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond494) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond494) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond494) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond494) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond494) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond494) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond494) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond494) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond494) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond494) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond494) CFA_SP SP+0
        CFI (cfiCond494) CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond495 Using cfiCommon0
        CFI (cfiCond495) NoFunction
        CFI (cfiCond495) Conditional ??CrossCallReturnLabel_220
        CFI (cfiCond495) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond495) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond495) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond495) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond495) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond495) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond495) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond495) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond495) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond495) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond495) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond495) CFA_SP SP+0
        CFI (cfiCond495) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker496 Using cfiCommon1
        CFI (cfiPicker496) NoFunction
        CFI (cfiPicker496) Picker
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond491
        CFI EndBlock cfiCond492
        CFI EndBlock cfiCond493
        CFI EndBlock cfiCond494
        CFI EndBlock cfiCond495
        CFI EndBlock cfiPicker496

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond497 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond498 Using cfiCommon0
        CFI (cfiCond498) NoFunction
        CFI (cfiCond498) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond498) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond498) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond498) CFA_SP SP+-5
        CFI (cfiCond498) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond499 Using cfiCommon0
        CFI (cfiCond499) NoFunction
        CFI (cfiCond499) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond499) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond499) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond499) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond499) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond499) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond499) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond499) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond499) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond499) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond499) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond499) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond499) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond499) CFA_SP SP+0
        CFI (cfiCond499) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond500 Using cfiCommon0
        CFI (cfiCond500) NoFunction
        CFI (cfiCond500) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond500) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond500) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond500) CFA_SP SP+-5
        CFI (cfiCond500) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond501 Using cfiCommon0
        CFI (cfiCond501) NoFunction
        CFI (cfiCond501) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond501) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond501) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond501) CFA_SP SP+-5
        CFI (cfiCond501) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker502 Using cfiCommon1
        CFI (cfiPicker502) NoFunction
        CFI (cfiPicker502) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_155:
        RET
        CFI EndBlock cfiCond497
        CFI EndBlock cfiCond498
        CFI EndBlock cfiCond499
        CFI EndBlock cfiCond500
        CFI EndBlock cfiCond501
        CFI EndBlock cfiPicker502

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
        CFI Block cfiCond503 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_143
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond504 Using cfiCommon0
        CFI (cfiCond504) NoFunction
        CFI (cfiCond504) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_144
        CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond504) CFA_SP SP+0
        CFI (cfiCond504) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond505 Using cfiCommon0
        CFI (cfiCond505) NoFunction
        CFI (cfiCond505) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_145
        CFI (cfiCond505) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond505) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond505) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond505) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond505) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond505) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond505) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond505) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond505) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond505) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond505) CFA_SP SP+0
        CFI (cfiCond505) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond506 Using cfiCommon0
        CFI (cfiCond506) NoFunction
        CFI (cfiCond506) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_146
        CFI (cfiCond506) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond506) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond506) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond506) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond506) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond506) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond506) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond506) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond506) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond506) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond506) CFA_SP SP+0
        CFI (cfiCond506) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond507 Using cfiCommon0
        CFI (cfiCond507) NoFunction
        CFI (cfiCond507) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_147
        CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond507) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond507) CFA_SP SP+0
        CFI (cfiCond507) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond508 Using cfiCommon0
        CFI (cfiCond508) NoFunction
        CFI (cfiCond508) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_148
        CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond508) CFA_SP SP+0
        CFI (cfiCond508) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond509 Using cfiCommon0
        CFI (cfiCond509) NoFunction
        CFI (cfiCond509) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_149
        CFI (cfiCond509) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond509) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond509) CFA_SP SP+-5
        CFI (cfiCond509) CFA_XSP16 add(XSP16, 8)
        CFI Block cfiCond510 Using cfiCommon0
        CFI (cfiCond510) NoFunction
        CFI (cfiCond510) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_150
        CFI (cfiCond510) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond510) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond510) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond510) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond510) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond510) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond510) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond510) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond510) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond510) CFA_SP SP+0
        CFI (cfiCond510) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond511 Using cfiCommon0
        CFI (cfiCond511) NoFunction
        CFI (cfiCond511) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_151
        CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond511) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond511) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond511) CFA_SP SP+0
        CFI (cfiCond511) CFA_XSP16 add(XSP16, 35)
        CFI Block cfiCond512 Using cfiCommon0
        CFI (cfiCond512) NoFunction
        CFI (cfiCond512) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_152
        CFI (cfiCond512) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond512) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond512) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond512) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond512) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond512) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond512) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond512) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond512) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond512) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond512) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond512) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond512) CFA_SP SP+0
        CFI (cfiCond512) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond513 Using cfiCommon0
        CFI (cfiCond513) NoFunction
        CFI (cfiCond513) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_153
        CFI (cfiCond513) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond513) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond513) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond513) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond513) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond513) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond513) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond513) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond513) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond513) CFA_SP SP+0
        CFI (cfiCond513) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond514 Using cfiCommon0
        CFI (cfiCond514) NoFunction
        CFI (cfiCond514) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_0
        CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond514) CFA_SP SP+0
        CFI (cfiCond514) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond515 Using cfiCommon0
        CFI (cfiCond515) NoFunction
        CFI (cfiCond515) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_1
        CFI (cfiCond515) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond515) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond515) CFA_SP SP+-5
        CFI (cfiCond515) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond516 Using cfiCommon0
        CFI (cfiCond516) NoFunction
        CFI (cfiCond516) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_2
        CFI (cfiCond516) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond516) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond516) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond516) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond516) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond516) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond516) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond516) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond516) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond516) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond516) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond516) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond516) CFA_SP SP+0
        CFI (cfiCond516) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond517 Using cfiCommon0
        CFI (cfiCond517) NoFunction
        CFI (cfiCond517) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_3
        CFI (cfiCond517) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond517) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond517) CFA_SP SP+-5
        CFI (cfiCond517) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond518 Using cfiCommon0
        CFI (cfiCond518) NoFunction
        CFI (cfiCond518) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_4
        CFI (cfiCond518) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond518) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond518) CFA_SP SP+-5
        CFI (cfiCond518) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker519 Using cfiCommon1
        CFI (cfiPicker519) NoFunction
        CFI (cfiPicker519) Picker
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_158:
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond503
        CFI EndBlock cfiCond504
        CFI EndBlock cfiCond505
        CFI EndBlock cfiCond506
        CFI EndBlock cfiCond507
        CFI EndBlock cfiCond508
        CFI EndBlock cfiCond509
        CFI EndBlock cfiCond510
        CFI EndBlock cfiCond511
        CFI EndBlock cfiCond512
        CFI EndBlock cfiCond513
        CFI EndBlock cfiCond514
        CFI EndBlock cfiCond515
        CFI EndBlock cfiCond516
        CFI EndBlock cfiCond517
        CFI EndBlock cfiCond518
        CFI EndBlock cfiPicker519

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticateCfm:
        CFI Block cfiBlock520 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticateCfm
        FUNCALL ZDSecMgrAuthenticateCfm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        ADD     A,#0xb
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_142:
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDSecMgrAuthenticateCfm_0
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#-0x80
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
??ZDSecMgrAuthenticateCfm_0:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock520

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrRequestAppKey:
        CFI Block cfiBlock521 Using cfiCommon0
        CFI Function ZDSecMgrRequestAppKey
        FUNCALL ZDSecMgrRequestAppKey, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??AddrMgrExtAddrLookup?relay
        MOV     A,R1
        JZ      ??ZDSecMgrRequestAppKey_0
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ??APSME_RequestKeyReq?relay
        SJMP    ??ZDSecMgrRequestAppKey_1
??ZDSecMgrRequestAppKey_0:
        MOV     R1,#0x1
??ZDSecMgrRequestAppKey_1:
        MOV     A,#0xc
        LJMP    ??Subroutine106_0 & 0xFFFF
        CFI EndBlock cfiBlock521

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrSetupPartner:
        CFI Block cfiBlock522 Using cfiCommon0
        CFI Function ZDSecMgrSetupPartner
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetupPartner, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 2,#0x1
        MOV     A,#0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_90:
        JNZ     ??ZDSecMgrSetupPartner_0
        MOV     ?V0 + 2,#0x0
        MOV     A,#-0x2
        XRL     A,?V0 + 0
        JNZ     ??ZDSecMgrSetupPartner_1
        MOV     A,#-0x1
        XRL     A,?V0 + 1
??ZDSecMgrSetupPartner_1:
        JNZ     ??ZDSecMgrSetupPartner_2
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDP_NwkAddrReq?relay
        SJMP    ??ZDSecMgrSetupPartner_3
??ZDSecMgrSetupPartner_2:
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrSetupPartner_0
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDP_IEEEAddrReq?relay
??ZDSecMgrSetupPartner_3:
        MOV     A,R1
        MOV     ?V0 + 2,A
??ZDSecMgrSetupPartner_0:
        MOV     R1,?V0 + 2
        MOV     A,#0xd
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock522

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_MasterKeyGet:
        CFI Block cfiBlock523 Using cfiCommon0
        CFI Function APSME_MasterKeyGet
        FUNCALL APSME_MasterKeyGet, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_MasterKeyGet, ZDSecMgrMasterKeyLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrExtAddrLookup?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
        JNZ     ??APSME_MasterKeyGet_0
        ; Setup parameters for call to function ZDSecMgrMasterKeyLookup
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_71:
        SJMP    ??APSME_MasterKeyGet_1
??APSME_MasterKeyGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??APSME_MasterKeyGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock523

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
        CFI Block cfiCond524 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond525 Using cfiCommon0
        CFI (cfiCond525) NoFunction
        CFI (cfiCond525) Conditional ??CrossCallReturnLabel_71
        CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond525) CFA_SP SP+0
        CFI (cfiCond525) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker526 Using cfiCommon1
        CFI (cfiPicker526) NoFunction
        CFI (cfiPicker526) Picker
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_104:
        RET
        CFI EndBlock cfiCond524
        CFI EndBlock cfiCond525
        CFI EndBlock cfiPicker526

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
        CFI Block cfiCond527 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond528 Using cfiCommon0
        CFI (cfiCond528) NoFunction
        CFI (cfiCond528) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_44
        CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond528) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond528) CFA_SP SP+0
        CFI (cfiCond528) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond529 Using cfiCommon0
        CFI (cfiCond529) NoFunction
        CFI (cfiCond529) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_45
        CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond529) CFA_SP SP+0
        CFI (cfiCond529) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond530 Using cfiCommon0
        CFI (cfiCond530) NoFunction
        CFI (cfiCond530) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_70
        CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond530) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond530) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond530) CFA_SP SP+0
        CFI (cfiCond530) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond531 Using cfiCommon0
        CFI (cfiCond531) NoFunction
        CFI (cfiCond531) Conditional ??CrossCallReturnLabel_104, ??CrossCallReturnLabel_71
        CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond531) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond531) CFA_SP SP+0
        CFI (cfiCond531) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker532 Using cfiCommon1
        CFI (cfiPicker532) NoFunction
        CFI (cfiPicker532) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDSecMgrMasterKeyLookup?relay
        RET
        CFI EndBlock cfiCond527
        CFI EndBlock cfiCond528
        CFI EndBlock cfiCond529
        CFI EndBlock cfiCond530
        CFI EndBlock cfiCond531
        CFI EndBlock cfiPicker532

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_LinkKeySet:
        CFI Block cfiBlock533 Using cfiCommon0
        CFI Function APSME_LinkKeySet
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        MOV     ?V0 + 3,A
        JNZ     ??APSME_LinkKeySet_0
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_239:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x18
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   ?L_MOV_TO_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x14
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?L_MOV_TO_X
??APSME_LinkKeySet_0:
        MOV     R1,?V0 + 3
        MOV     A,#0x2
        CFI EndBlock cfiBlock533
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock534 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock534

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
        CFI Block cfiCond535 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_61
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond536 Using cfiCommon0
        CFI (cfiCond536) NoFunction
        CFI (cfiCond536) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond536) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond536) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond536) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond536) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond536) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond536) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond536) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond536) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond536) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond536) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond536) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond536) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond536) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond536) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond536) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond536) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond536) CFA_SP SP+0
        CFI (cfiCond536) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker537 Using cfiCommon1
        CFI (cfiPicker537) NoFunction
        CFI (cfiPicker537) Picker
        LCALL   ?Subroutine71 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond535
        CFI EndBlock cfiCond536
        CFI EndBlock cfiPicker537

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
        CFI Block cfiCond538 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_105
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond539 Using cfiCommon0
        CFI (cfiCond539) NoFunction
        CFI (cfiCond539) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_61
        CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond539) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond539) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond539) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond539) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond539) CFA_SP SP+0
        CFI (cfiCond539) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond540 Using cfiCommon0
        CFI (cfiCond540) NoFunction
        CFI (cfiCond540) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_62
        CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond540) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond540) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond540) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond540) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond540) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond540) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond540) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond540) CFA_SP SP+0
        CFI (cfiCond540) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker541 Using cfiCommon1
        CFI (cfiPicker541) NoFunction
        CFI (cfiPicker541) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond538
        CFI EndBlock cfiCond539
        CFI EndBlock cfiCond540
        CFI EndBlock cfiPicker541

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticationSet:
        CFI Block cfiBlock542 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationSet
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAuthenticationSet_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1c
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R6
        MOVX    @DPTR,A
??ZDSecMgrAuthenticationSet_0:
        LJMP    ??Subroutine90_0 & 0xFFFF
        CFI EndBlock cfiBlock542

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAuthenticationCheck:
        CFI Block cfiBlock543 Using cfiCommon0
        CFI Function ZDSecMgrAuthenticationCheck
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R1,#0x1
        LJMP    ?BRET
        CFI EndBlock cfiBlock543

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_LinkKeyDataGet:
        CFI Block cfiBlock544 Using cfiCommon0
        CFI Function APSME_LinkKeyDataGet
        FUNCALL APSME_LinkKeyDataGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDSecMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??APSME_LinkKeyDataGet_0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x12
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine108_0 & 0xFFFF
??CrossCallReturnLabel_222:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??APSME_LinkKeyDataGet_1
??APSME_LinkKeyDataGet_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??APSME_LinkKeyDataGet_1:
        MOVX    @DPTR,A
        LJMP    ??Subroutine90_0 & 0xFFFF
        CFI EndBlock cfiBlock544

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
        CFI Block cfiCond545 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond546 Using cfiCommon0
        CFI (cfiCond546) NoFunction
        CFI (cfiCond546) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond546) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond546) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond546) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond546) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond546) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond546) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond546) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond546) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond546) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond546) CFA_SP SP+0
        CFI (cfiCond546) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker547 Using cfiCommon1
        CFI (cfiPicker547) NoFunction
        CFI (cfiPicker547) Picker
        MOVX    A,@DPTR
        ADD     A,#0x2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond545
        CFI EndBlock cfiCond546
        CFI EndBlock cfiPicker547

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
        CFI Block cfiCond548 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_223
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond549 Using cfiCommon0
        CFI (cfiCond549) NoFunction
        CFI (cfiCond549) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond549) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond549) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond549) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond549) CFA_SP SP+0
        CFI (cfiCond549) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker550 Using cfiCommon1
        CFI (cfiPicker550) NoFunction
        CFI (cfiPicker550) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond548
        CFI EndBlock cfiCond549
        CFI EndBlock cfiPicker550
        REQUIRE ??Subroutine108_0
        ; // Fall through to label ??Subroutine108_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine108_0:
        CFI Block cfiCond551 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_221
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond552 Using cfiCommon0
        CFI (cfiCond552) NoFunction
        CFI (cfiCond552) Conditional ??CrossCallReturnLabel_222
        CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond552) CFA_SP SP+0
        CFI (cfiCond552) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond553 Using cfiCommon0
        CFI (cfiCond553) NoFunction
        CFI (cfiCond553) Conditional ??CrossCallReturnLabel_223
        CFI (cfiCond553) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond553) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond553) CFA_SP SP+-5
        CFI (cfiCond553) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond554 Using cfiCommon0
        CFI (cfiCond554) NoFunction
        CFI (cfiCond554) Conditional ??CrossCallReturnLabel_224
        CFI (cfiCond554) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond554) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond554) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond554) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond554) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond554) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond554) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond554) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond554) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond554) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond554) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond554) CFA_SP SP+0
        CFI (cfiCond554) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker555 Using cfiCommon1
        CFI (cfiPicker555) NoFunction
        CFI (cfiPicker555) Picker
        LCALL   ?Subroutine72 & 0xFFFF
??CrossCallReturnLabel_226:
        RET
        CFI EndBlock cfiCond551
        CFI EndBlock cfiCond552
        CFI EndBlock cfiCond553
        CFI EndBlock cfiCond554
        CFI EndBlock cfiPicker555

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
        CFI Block cfiCond556 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond557 Using cfiCommon0
        CFI (cfiCond557) NoFunction
        CFI (cfiCond557) Conditional ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_53
        CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond557) CFA_SP SP+0
        CFI (cfiCond557) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond558 Using cfiCommon0
        CFI (cfiCond558) NoFunction
        CFI (cfiCond558) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_223
        CFI (cfiCond558) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond558) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond558) CFA_SP SP+-5
        CFI (cfiCond558) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond559 Using cfiCommon0
        CFI (cfiCond559) NoFunction
        CFI (cfiCond559) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_224
        CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond559) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond559) CFA_SP SP+0
        CFI (cfiCond559) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond560 Using cfiCommon0
        CFI (cfiCond560) NoFunction
        CFI (cfiCond560) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_221
        CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond560) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond560) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond560) CFA_SP SP+0
        CFI (cfiCond560) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond561 Using cfiCommon0
        CFI (cfiCond561) NoFunction
        CFI (cfiCond561) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_222
        CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond561) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond561) CFA_SP SP+0
        CFI (cfiCond561) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker562 Using cfiCommon1
        CFI (cfiPicker562) NoFunction
        CFI (cfiPicker562) Picker
        LCALL   ?Subroutine79 & 0xFFFF
??CrossCallReturnLabel_228:
        RET
        CFI EndBlock cfiCond556
        CFI EndBlock cfiCond557
        CFI EndBlock cfiCond558
        CFI EndBlock cfiCond559
        CFI EndBlock cfiCond560
        CFI EndBlock cfiCond561
        CFI EndBlock cfiPicker562

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine79:
        CFI Block cfiCond563 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond564 Using cfiCommon0
        CFI (cfiCond564) NoFunction
        CFI (cfiCond564) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_98, ??CrossCallReturnLabel_51
        CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond564) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond564) CFA_SP SP+0
        CFI (cfiCond564) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond565 Using cfiCommon0
        CFI (cfiCond565) NoFunction
        CFI (cfiCond565) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_46
        CFI (cfiCond565) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond565) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond565) CFA_SP SP+-5
        CFI (cfiCond565) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond566 Using cfiCommon0
        CFI (cfiCond566) NoFunction
        CFI (cfiCond566) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_97, ??CrossCallReturnLabel_47
        CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond566) CFA_SP SP+0
        CFI (cfiCond566) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond567 Using cfiCommon0
        CFI (cfiCond567) NoFunction
        CFI (cfiCond567) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_41
        CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond567) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond567) CFA_SP SP+0
        CFI (cfiCond567) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond568 Using cfiCommon0
        CFI (cfiCond568) NoFunction
        CFI (cfiCond568) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_96, ??CrossCallReturnLabel_42
        CFI (cfiCond568) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond568) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond568) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond568) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond568) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond568) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond568) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond568) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond568) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond568) CFA_SP SP+0
        CFI (cfiCond568) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond569 Using cfiCommon0
        CFI (cfiCond569) NoFunction
        CFI (cfiCond569) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_52
        CFI (cfiCond569) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond569) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond569) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond569) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond569) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond569) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond569) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond569) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond569) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond569) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond569) CFA_SP SP+0
        CFI (cfiCond569) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond570 Using cfiCommon0
        CFI (cfiCond570) NoFunction
        CFI (cfiCond570) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_225, ??CrossCallReturnLabel_53
        CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond570) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond570) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond570) CFA_SP SP+0
        CFI (cfiCond570) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond571 Using cfiCommon0
        CFI (cfiCond571) NoFunction
        CFI (cfiCond571) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_223
        CFI (cfiCond571) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond571) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond571) CFA_SP SP+-5
        CFI (cfiCond571) CFA_XSP16 add(XSP16, 2)
        CFI Block cfiCond572 Using cfiCommon0
        CFI (cfiCond572) NoFunction
        CFI (cfiCond572) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_224
        CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond572) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond572) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond572) CFA_SP SP+0
        CFI (cfiCond572) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond573 Using cfiCommon0
        CFI (cfiCond573) NoFunction
        CFI (cfiCond573) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_221
        CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond573) CFA_SP SP+0
        CFI (cfiCond573) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond574 Using cfiCommon0
        CFI (cfiCond574) NoFunction
        CFI (cfiCond574) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_222
        CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond574) CFA_SP SP+0
        CFI (cfiCond574) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker575 Using cfiCommon1
        CFI (cfiPicker575) NoFunction
        CFI (cfiPicker575) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond563
        CFI EndBlock cfiCond564
        CFI EndBlock cfiCond565
        CFI EndBlock cfiCond566
        CFI EndBlock cfiCond567
        CFI EndBlock cfiCond568
        CFI EndBlock cfiCond569
        CFI EndBlock cfiCond570
        CFI EndBlock cfiCond571
        CFI EndBlock cfiCond572
        CFI EndBlock cfiCond573
        CFI EndBlock cfiCond574
        CFI EndBlock cfiPicker575

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_KeyFwdToChild:
        CFI Block cfiBlock576 Using cfiCommon0
        CFI Function APSME_KeyFwdToChild
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R6,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??APSME_KeyFwdToChild_0
        INC     DPTR
        MOVX    A,@DPTR
??APSME_KeyFwdToChild_0:
        JNZ     ??APSME_KeyFwdToChild_1
        INC     R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x6
        XRL     A,R4
        JZ      ??APSME_KeyFwdToChild_2
        MOV     A,#0x5
        XRL     A,R4
        JNZ     ??APSME_KeyFwdToChild_1
??APSME_KeyFwdToChild_2:
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        ; Setup parameters for call to function AssocGetWithExt
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   ??ZDSecMgrAssocDeviceAuth?relay
??APSME_KeyFwdToChild_1:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine92_0 & 0xFFFF
        CFI EndBlock cfiBlock576

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
        CFI Block cfiCond577 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond578 Using cfiCommon0
        CFI (cfiCond578) NoFunction
        CFI (cfiCond578) Conditional ??CrossCallReturnLabel_73
        CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond578) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond578) CFA_SP SP+0
        CFI (cfiCond578) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker579 Using cfiCommon1
        CFI (cfiPicker579) NoFunction
        CFI (cfiPicker579) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_235:
        LCALL   ??AssocGetWithExt?relay
        RET
        CFI EndBlock cfiCond577
        CFI EndBlock cfiCond578
        CFI EndBlock cfiPicker579

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAddLinkKey:
        CFI Block cfiBlock580 Using cfiCommon0
        CFI Function ZDSecMgrAddLinkKey
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??ZDSecMgrAddrStore?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        JZ      ??ZDSecMgrAddLinkKey_0
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAddLinkKey_1
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDSecMgrAddLinkKey_2
        INC     DPTR
        MOVX    A,@DPTR
??ZDSecMgrAddLinkKey_2:
        JNZ     ??CrossCallReturnLabel_181
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrEntryNew?relay
        MOV     A,R1
        JNZ     ??ZDSecMgrAddLinkKey_3
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_58:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        LCALL   ??Subroutine100_0 & 0xFFFF
??CrossCallReturnLabel_181:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??APSME_LinkKeySet?relay
        MOV     R1,#0x0
??ZDSecMgrAddLinkKey_1:
        LJMP    ?Subroutine4 & 0xFFFF
??ZDSecMgrAddLinkKey_3:
        MOV     R1,#0x11
        SJMP    ??ZDSecMgrAddLinkKey_1
        CFI EndBlock cfiBlock580

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
        CFI Block cfiCond581 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond582 Using cfiCommon0
        CFI (cfiCond582) NoFunction
        CFI (cfiCond582) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond582) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond582) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond582) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond582) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond582) CFA_SP SP+0
        CFI (cfiCond582) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker583 Using cfiCommon1
        CFI (cfiPicker583) NoFunction
        CFI (cfiPicker583) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_233:
        LCALL   ??ZDSecMgrEntryLookupAMI?relay
        RET
        CFI EndBlock cfiCond581
        CFI EndBlock cfiCond582
        CFI EndBlock cfiPicker583

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
        CFI Block cfiCond584 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 25)
        CFI Block cfiCond585 Using cfiCommon0
        CFI (cfiCond585) NoFunction
        CFI (cfiCond585) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond585) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond585) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond585) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond585) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond585) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond585) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond585) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond585) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond585) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond585) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond585) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond585) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond585) CFA_SP SP+0
        CFI (cfiCond585) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker586 Using cfiCommon1
        CFI (cfiPicker586) NoFunction
        CFI (cfiPicker586) Picker
        LCALL   ??Subroutine101_0 & 0xFFFF
??CrossCallReturnLabel_191:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond584
        CFI EndBlock cfiCond585
        CFI EndBlock cfiPicker586

        RSEG BANKED_CODE:CODE:NOROOT(0)
ZDSecMgrAPSRemove:
        CFI Block cfiBlock587 Using cfiCommon0
        CFI Function ZDSecMgrAPSRemove
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine98_0 & 0xFFFF
??CrossCallReturnLabel_165:
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??ZDSecMgrAPSRemove_0
        MOV     A,#-0x1
        XRL     A,R3
??ZDSecMgrAPSRemove_0:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,R4
        JNZ     ??ZDSecMgrAPSRemove_2
        MOV     A,R5
??ZDSecMgrAPSRemove_2:
        JZ      ??ZDSecMgrAPSRemove_1
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??ZDSecMgrAPSRemove_3
        MOV     A,#-0x1
        XRL     A,R1
??ZDSecMgrAPSRemove_3:
        JNZ     ??ZDSecMgrAPSRemove_4
??ZDSecMgrAPSRemove_1:
        MOV     R1,#0x1
        SJMP    ??ZDSecMgrAPSRemove_5
??ZDSecMgrAPSRemove_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ??ZDSecMgrDeviceRemove?relay
        MOV     R1,#0x0
??ZDSecMgrAPSRemove_5:
        LJMP    ?Subroutine11 & 0xFFFF
        CFI EndBlock cfiBlock587

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_TCLinkKeyInit:
        CFI Block cfiBlock588 Using cfiCommon0
        CFI Function APSME_TCLinkKeyInit
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        MOV     DPTR,#zgUseDefaultTCLK
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyInit_0
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(defaultTCLinkKey & 0xff)
        MOV     ?V0 + 1,#((defaultTCLinkKey >> 8) & 0xff)
        MOV     ?V0 + 2,#-0x80
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_240:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        ; Setup parameters for call to function osal_nv_item_init
??APSME_TCLinkKeyInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x20
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock588

        RSEG BANKED_CODE:CODE:NOROOT(0)
APSME_TCLinkKeySync:
        CFI Block cfiBlock589 Using cfiCommon0
        CFI Function APSME_TCLinkKeySync
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_0
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??APSME_LookupExtAddr?relay
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeySync_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JNZ     $+5
        LJMP    ??APSME_TCLinkKeySync_2 & 0xFFFF
??APSME_TCLinkKeySync_1:
        MOV     A,R6
        ADD     A,#0x12
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GT_X
        JC      ??APSME_TCLinkKeySync_3
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 51)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R7
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_229:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,#0x0
        SJMP    ??APSME_TCLinkKeySync_4
??APSME_TCLinkKeySync_3:
        MOV     R1,#-0x5e
        SJMP    ??APSME_TCLinkKeySync_4
??APSME_TCLinkKeySync_2:
        MOV     R1,#-0x5f
??APSME_TCLinkKeySync_4:
        MOV     A,#0x20
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock589

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond590 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_229
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond591 Using cfiCommon0
        CFI (cfiCond591) NoFunction
        CFI (cfiCond591) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond591) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond591) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond591) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond591) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond591) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond591) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond591) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond591) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond591) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond591) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond591) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond591) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond591) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond591) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond591) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond591) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond591) CFA_SP SP+0
        CFI (cfiCond591) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiPicker592 Using cfiCommon1
        CFI (cfiPicker592) NoFunction
        CFI (cfiPicker592) Picker
        LCALL   ??Subroutine105_0 & 0xFFFF
        CFI EndBlock cfiCond590
        CFI EndBlock cfiCond591
        CFI EndBlock cfiPicker592
??CrossCallReturnLabel_212:
        REQUIRE ??Subroutine109_0
        ; // Fall through to label ??Subroutine109_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine109_0:
        CFI Block cfiCond593 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_231
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond594 Using cfiCommon0
        CFI (cfiCond594) NoFunction
        CFI (cfiCond594) Conditional ??CrossCallReturnLabel_229
        CFI (cfiCond594) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond594) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond594) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond594) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond594) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond594) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond594) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond594) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond594) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond594) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond594) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond594) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond594) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond594) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond594) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond594) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond594) CFA_SP SP+0
        CFI (cfiCond594) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond595 Using cfiCommon0
        CFI (cfiCond595) NoFunction
        CFI (cfiCond595) Conditional ??CrossCallReturnLabel_230
        CFI (cfiCond595) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond595) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond595) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond595) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond595) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond595) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond595) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond595) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond595) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond595) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond595) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond595) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond595) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond595) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond595) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond595) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond595) CFA_SP SP+0
        CFI (cfiCond595) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiPicker596 Using cfiCommon1
        CFI (cfiPicker596) NoFunction
        CFI (cfiPicker596) Picker
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_237:
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_241:
        RET
        CFI EndBlock cfiCond593
        CFI EndBlock cfiCond594
        CFI EndBlock cfiCond595
        CFI EndBlock cfiPicker596

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine78:
        CFI Block cfiCond597 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_238
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond598 Using cfiCommon0
        CFI (cfiCond598) NoFunction
        CFI (cfiCond598) Conditional ??CrossCallReturnLabel_239
        CFI (cfiCond598) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond598) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond598) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond598) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond598) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond598) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond598) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond598) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond598) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond598) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond598) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond598) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond598) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond598) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond598) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond598) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond598) CFA_SP SP+0
        CFI (cfiCond598) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond599 Using cfiCommon0
        CFI (cfiCond599) NoFunction
        CFI (cfiCond599) Conditional ??CrossCallReturnLabel_240
        CFI (cfiCond599) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond599) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond599) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond599) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond599) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond599) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond599) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond599) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond599) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond599) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond599) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond599) CFA_SP SP+0
        CFI (cfiCond599) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond600 Using cfiCommon0
        CFI (cfiCond600) NoFunction
        CFI (cfiCond600) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_229
        CFI (cfiCond600) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond600) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond600) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond600) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond600) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond600) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond600) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond600) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond600) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond600) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond600) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond600) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond600) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond600) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond600) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond600) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond600) CFA_SP SP+0
        CFI (cfiCond600) CFA_XSP16 add(XSP16, 51)
        CFI Block cfiCond601 Using cfiCommon0
        CFI (cfiCond601) NoFunction
        CFI (cfiCond601) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_230
        CFI (cfiCond601) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond601) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond601) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond601) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond601) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond601) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond601) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond601) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond601) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond601) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond601) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond601) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond601) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond601) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond601) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond601) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond601) CFA_SP SP+0
        CFI (cfiCond601) CFA_XSP16 add(XSP16, 64)
        CFI Block cfiCond602 Using cfiCommon0
        CFI (cfiCond602) NoFunction
        CFI (cfiCond602) Conditional ??CrossCallReturnLabel_241, ??CrossCallReturnLabel_231
        CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond602) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond602) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond602) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond602) CFA_SP SP+0
        CFI (cfiCond602) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker603 Using cfiCommon1
        CFI (cfiPicker603) NoFunction
        CFI (cfiPicker603) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond597
        CFI EndBlock cfiCond598
        CFI EndBlock cfiCond599
        CFI EndBlock cfiCond600
        CFI EndBlock cfiCond601
        CFI EndBlock cfiCond602
        CFI EndBlock cfiPicker603

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3841 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
        CFI Block cfiBlock604 Using cfiCommon0
        CFI Function APSME_TCLinkKeyLoad
// 3842 {
        FUNCALL APSME_TCLinkKeyLoad, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrEqual
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_IsDefaultTCLK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 65, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 65, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 45
        MOV     A,#-0x2d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 3843   uint8              i;
// 3844   APSME_TCLinkKey_t  tcLinkKey;
// 3845   AddrMgrEntry_t     addrEntry;  
// 3846   
// 3847   // Look up the ami of the srcAddr if available
// 3848   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 3849   addrEntry.nwkAddr = dstAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
// 3850 
// 3851   APSME_LookupExtAddr( dstAddr, si->extAddr );
??CrossCallReturnLabel_29:
        MOV     A,R4
        ADD     A,#0x6
        MOV     R6,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??APSME_LookupExtAddr?relay
// 3852 
// 3853   if ( AddrMgrExtAddrValid( si->extAddr ) == TRUE )
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??APSME_TCLinkKeyLoad_0 & 0xFFFF
// 3854   {
// 3855     // Look up the TC link key associated with the device
// 3856     // or the master TC link key (ami = 0xFFFF), whichever is found
// 3857     for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
// 3858     {
// 3859       // Read entry i of the TC link key table from NV
// 3860       osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3861                    sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V0 + 2,#0x20
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 65)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 3862       
// 3863       if( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) || 
// 3864          APSME_IsDefaultTCLK(tcLinkKey.extAddr))
        ; Setup parameters for call to function AddrMgrExtAddrEqual
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrEqual?relay
        MOV     A,R1
        JNZ     ??APSME_TCLinkKeyLoad_1
        ; Setup parameters for call to function APSME_IsDefaultTCLK
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??APSME_IsDefaultTCLK?relay
        MOV     A,R1
        JNZ     $+5
        LJMP    ??APSME_TCLinkKeyLoad_0 & 0xFFFF
// 3865       {
// 3866         // set the key to use
// 3867         osal_memcpy( si->key, tcLinkKey.key, SEC_KEY_LEN);  
??APSME_TCLinkKeyLoad_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 64)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,?V0 + 0
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_230:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 3868         
// 3869         // update link key related fields
// 3870         si->keyID   = SEC_KEYID_LINK;
        MOV     A,?V0 + 0
        ADD     A,#0xe
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_213:
        CLR     A
        MOVX    @DPTR,A
// 3871         si->frmCntr = tcLinkKey.txFrmCntr;
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ADD     A,#0x12
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_214:
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
// 3872       
// 3873         // update outgoing frame counter
// 3874         tcLinkKey.txFrmCntr++;
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
// 3875         
// 3876         // Write the tc link key back to the NV
// 3877         osal_nv_write( (ZCD_NV_TCLK_TABLE_START + i), 0, 
// 3878                       sizeof(APSME_TCLinkKey_t), &tcLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 63)
        MOV     ?V0 + 0,#0x20
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 65)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x1
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 61)
// 3879         
// 3880         return ZSuccess;
        MOV     R1,#0x0
        SJMP    ??APSME_TCLinkKeyLoad_2
// 3881       }
// 3882     }
// 3883   }
// 3884     
// 3885   // If no TC link key found, remove the device from the address manager
// 3886   if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??APSME_TCLinkKeyLoad_3
// 3887   {
// 3888     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryRelease?relay
// 3889   }
// 3890 
// 3891   return ZSecNoKey;
??APSME_TCLinkKeyLoad_3:
        MOV     R1,#-0x5f
??APSME_TCLinkKeyLoad_2:
        MOV     A,#0x2d
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock604
// 3892 }
// 3893 
// 3894 /******************************************************************************
// 3895  * @fn          APSME_IsDefaultTCLK
// 3896  *
// 3897  * @brief       Return true or false based on the extended address.  If the 
// 3898  *              input ext address is all FFs, it means the trust center link
// 3899  *              assoiciated with the address is the default trust center link key
// 3900  *
// 3901  * @param       extAddr - [in] extended address
// 3902  *
// 3903  * @return      uint8 TRUE/FALSE
// 3904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3905 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
        CFI Block cfiBlock605 Using cfiCommon0
        CFI Function APSME_IsDefaultTCLK
// 3906 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3907   uint8 i = 0;
        MOV     R4,#0x0
// 3908   
// 3909   if( extAddr == NULL )
        MOV     A,R2
        JNZ     ??APSME_IsDefaultTCLK_0
        MOV     A,R3
??APSME_IsDefaultTCLK_0:
        JNZ     ??APSME_IsDefaultTCLK_1
// 3910   {
// 3911     return FALSE;
??APSME_IsDefaultTCLK_2:
        MOV     R1,#0x0
        SJMP    ??APSME_IsDefaultTCLK_3
// 3912   }
// 3913   
// 3914   while( i++ < Z_EXTADDR_LEN )
// 3915   {
// 3916     if( *extAddr++ != 0xFF )
??APSME_IsDefaultTCLK_4:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??APSME_IsDefaultTCLK_2
// 3917     {
// 3918       return FALSE;
// 3919     }
// 3920   }
??APSME_IsDefaultTCLK_1:
        MOV     A,R4
        INC     R4
        CLR     C
        SUBB    A,#0x8
        JC      ??APSME_IsDefaultTCLK_4
// 3921   
// 3922   return TRUE;
        MOV     R1,#0x1
??APSME_IsDefaultTCLK_3:
        LJMP    ??Subroutine96_0 & 0xFFFF
        CFI EndBlock cfiBlock605
// 3923 }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrTCMasterKey>`:
        DB 0, 0, 0, 0, 0, 0, 0, 0, 137, 103, 69, 35, 1, 239, 205, 171

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for ZDSecMgrAppKeyType>`:
        DB 3

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1:
        DD 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrExtAddrLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyStore?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupAMI?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryLookupExt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryFree?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEntryNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlRelease?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlRelease

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlLookup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlTerm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlTerm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrCtrlReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrMasterKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrMasterKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAppKeyReq?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendMasterKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendMasterKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSendNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemoveByExtAddr?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddrMgrUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddrMgrUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceEntryAdd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceEntryAdd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlHandler?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlHandler

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlSetup?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlSetup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceCtrlUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceCtrlUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_SKA_TimerExpired?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_SKA_TimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateSKKE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateSKKE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateRM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidateCM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidateCM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceValidate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoin?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinDirect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceJoinFwd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrDeviceNew?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAssocDeviceAuth?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthInitiate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthInitiate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthNwkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoining?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrPermitJoiningTimeout?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrNewDeviceEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCExtAddrCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTCDataLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrEstablishKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrEstablishKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrTransportKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrUpdateDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRemoveDeviceInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSwitchKeyInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateInd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticateCfm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticateCfm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrRequestAppKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrSetupPartner?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrSetupPartner

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_MasterKeyGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_MasterKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeySet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAuthenticationCheck?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_LinkKeyDataGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_LinkKeyDataGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_KeyFwdToChild?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAddLinkKey?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDSecMgrAPSRemove?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeySync?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_TCLinkKeyLoad?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??APSME_IsDefaultTCLK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    APSME_IsDefaultTCLK

        END
// 3924 
// 3925 
// 3926 /******************************************************************************
// 3927 ******************************************************************************/
// 3928 
// 
// 7 332 bytes in segment BANKED_CODE
//   456 bytes in segment BANK_RELAYS
//    17 bytes in segment XDATA_I
//    17 bytes in segment XDATA_ID
//     8 bytes in segment XDATA_ROM_C
//    50 bytes in segment XDATA_Z
// 
// 7 805 bytes of CODE  memory
//     0 bytes of CONST memory (+ 8 bytes shared)
//    67 bytes of XDATA memory
//
//Errors: none
//Warnings: none
