###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             17/Feb/2013  12:16:47 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\ZD #
#                          Object.c                                           #
#    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530À #
#                          ı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sam #
#                          ples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "C:\Documents and     #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\Z #
#                          DObject.c" -D ZIGBEEPRO -D ZTOOL_P1 -D             #
#                          NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D         #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterE #
#                          B-Pro\List\" -lA "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\" #
#                           --diag_suppress Pe001,Pa010 -o "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\Obj\"  #
#                          -e --require_prototypes --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I "C:\Documents  #
#                          and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ #
#                          ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp    #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\SOURCE\" -I      #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\. #
#                          .\ZMAIN\TI2530DB\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "C:\Documents and                   #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I "C:\Documents and         #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "C:\Documents and           #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\List\ZDObject.lst                             #
#    Object file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\Obj\ZDObject.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2009-12-29 11:40:43 -0800 (Tue, 29 Dec 2009) $
      4            Revision:       $Revision: 21414 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          // Status fields used by ZDO_ProcessMgmtRtgReq
     84          #define ZDO_MGMT_RTG_ENTRY_ACTIVE             0x00
     85          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY 0x01
     86          #define ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED   0x02
     87          #define ZDO_MGMT_RTG_ENTRY_INACTIVE           0x03
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    139          
    140          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    142          #endif
    143          
    144          #if defined ( MANAGED_SCAN )
    145            uint32 managedScanNextChannel = 0;
    146            uint32 managedScanChannelMask = 0;
    147            uint8  managedScanTimesPerChannel = 0;
    148          #endif
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void ZDODeviceSetup( void );
    158          #if defined ( MANAGED_SCAN )
    159            static void ZDOManagedScan_Next( void );
    160          #endif
    161          #if defined ( REFLECTOR )
    162            static void ZDO_RemoveEndDeviceBind( void );
    163            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    164          #endif
    165          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    166                                          byte numList2, uint16 *list2, uint16 *pMatches );
    167          static void ZDO_RemoveMatchMemory( void );
    168          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    169          static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    170          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    171          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    172          
    173          /*********************************************************************
    174           * @fn          ZDO_Init
    175           *
    176           * @brief       ZDObject and ZDProfile initialization.
    177           *
    178           * @param       none
    179           *
    180           * @return      none
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void ZDO_Init( void )
   \                     ZDO_Init:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            // Initialize ZD items
    185            #if defined ( REFLECTOR )
    186            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    187            #endif
    188          
    189            // Initialize default ZDO_UseExtendedPANID to the APS one.
    190            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#(AIB_apsUseExtendedPANID & 0xff)
   \   00000D   7D..         MOV     R5,#((AIB_apsUseExtendedPANID >> 8) & 0xff)
   \   00000F   7A..         MOV     R2,#(ZDO_UseExtendedPANID & 0xff)
   \   000011   7B..         MOV     R3,#((ZDO_UseExtendedPANID >> 8) & 0xff)
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
    191          
    192            // Setup the device - type of device to create.
    193            ZDODeviceSetup();
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7004         JNZ     ??ZDO_Init_0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   8002         SJMP    ??ZDO_Init_1
   \                     ??ZDO_Init_0:
   \   000020   7901         MOV     R1,#0x1
   \                     ??ZDO_Init_1:
   \   000022                ; Setup parameters for call to function APS_ReflectorInit
   \   000022   12....       LCALL   ??APS_ReflectorInit?relay
   \   000025                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000025   12....       LCALL   ??NLME_DeviceJoiningInit?relay
    194          }
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    195          
    196          #if defined ( MANAGED_SCAN )
    197          /*********************************************************************
    198           * @fn      ZDOManagedScan_Next()
    199           *
    200           * @brief   Setup a managed scan.
    201           *
    202           * @param   none
    203           *
    204           * @return  none
    205           */
    206          static void ZDOManagedScan_Next( void )
    207          {
    208            // Is it the first time
    209            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    210            {
    211              // Setup the defaults
    212              managedScanNextChannel  = 1;
    213          
    214              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    215                managedScanNextChannel <<= 1;
    216          
    217              managedScanChannelMask = managedScanNextChannel;
    218              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    219            }
    220            else
    221            {
    222              // Do we need to go to the next channel
    223              if ( managedScanTimesPerChannel == 0 )
    224              {
    225                // Find next active channel
    226                managedScanChannelMask  = managedScanNextChannel;
    227                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    228              }
    229              else
    230              {
    231                managedScanTimesPerChannel--;
    232          
    233                if ( managedScanTimesPerChannel == 0 )
    234                {
    235                  managedScanNextChannel  <<= 1;
    236                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    237                    managedScanNextChannel <<= 1;
    238          
    239                  if ( managedScanNextChannel == 0 )
    240                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    241                }
    242              }
    243            }
    244          }
    245          #endif // MANAGED_SCAN
    246          
    247          /*********************************************************************
    248           * @fn      ZDODeviceSetup()
    249           *
    250           * @brief   Call set functions depending on the type of device compiled.
    251           *
    252           * @param   none
    253           *
    254           * @return  none
    255           */
    256          static void ZDODeviceSetup( void )
    257          {
    258            if ( ZG_BUILD_COORDINATOR_TYPE )
    259            {
    260              NLME_CoordinatorInit();
    261            }
    262          
    263          #if defined ( REFLECTOR )
    264            APS_ReflectorInit( (ZG_DEVICE_COORDINATOR_TYPE) ? APS_REFLECTOR_PUBLIC :  APS_REFLECTOR_PRIVATE );
    265          #endif
    266          
    267            if ( ZG_BUILD_JOINING_TYPE )
    268            {
    269              NLME_DeviceJoiningInit();
    270            }
    271          }
    272          
    273          /*********************************************************************
    274           * @fn          ZDO_StartDevice
    275           *
    276           * @brief       This function starts a device in a network.
    277           *
    278           * @param       logicalType     - Device type to start
    279           *              startMode       - indicates mode of device startup
    280           *              beaconOrder     - indicates time betwen beacons
    281           *              superframeOrder - indicates length of active superframe
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    286          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    287            ZStatus_t ret;
    288          #if defined ( ZIGBEE_FREQ_AGILITY )
    289            static uint8 discRetries = 0;
    290          #endif
    291          #if defined ( ZIGBEE_COMMISSIONING )
    292            static uint8 scanCnt = 0;
    293          #endif
    294          
    295            ret = ZUnsupportedMode;
    296          
    297            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    298            {
    299              if ( startMode == MODE_HARD )
    300              {
    301                devState = DEV_COORD_STARTING;
    302                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    303                                                    zgDefaultStartingScanDuration, beaconOrder,
    304                                                    superframeOrder, false );
    305              }
    306              else if ( startMode == MODE_RESUME )
    307              {
    308                // Just start the coordinator
    309                devState = DEV_COORD_STARTING;
    310                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    311              }
    312              else
    313              {
    314          #if defined( LCD_SUPPORTED )
    315                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    316          #endif
    317              }
    318            }
    319          
    320            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   6E           XRL     A,R6
   \   000011   6005         JZ      ??ZDO_StartDevice_0
   \   000013   7402         MOV     A,#0x2
   \   000015   6E           XRL     A,R6
   \   000016   7069         JNZ     ??ZDO_StartDevice_1
    321            {
    322              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   000018   EF           MOV     A,R7
   \   000019   6005         JZ      ??ZDO_StartDevice_2
   \   00001B   7403         MOV     A,#0x3
   \   00001D   6F           XRL     A,R7
   \   00001E   7076         JNZ     ??ZDO_StartDevice_3
    323              {
    324                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?Subroutine37 & 0xFFFF
    325          
    326            #if defined( MANAGED_SCAN )
    327                ZDOManagedScan_Next();
    328                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    329            #else
    330                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_51:
   \   000025   12....       LCALL   ?L_MOV_X
   \   000028   AA..         MOV     R2,?V0 + 0
   \   00002A   AB..         MOV     R3,?V0 + 1
   \   00002C   AC..         MOV     R4,?V0 + 2
   \   00002E   AD..         MOV     R5,?V0 + 3
   \   000030   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   000033   E9           MOV     A,R1
   \   000034   FA           MOV     R2,A
    331              #if defined ( ZIGBEE_FREQ_AGILITY )
    332                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    333                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   000035   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 2)
   \   000038   E0           MOVX    A,@DPTR
   \   000039   A2E3         MOV     C,0xE0 /* A   */.3
   \   00003B   401D         JC      ??ZDO_StartDevice_4
   \   00003D   EA           MOV     A,R2
   \   00003E   701A         JNZ     ??ZDO_StartDevice_4
   \   000040   90....       MOV     DPTR,#??discRetries
   \   000043   E0           MOVX    A,@DPTR
   \   000044   04           INC     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   6404         XRL     A,#0x4
   \   000048   7010         JNZ     ??ZDO_StartDevice_4
    334                {
    335                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    336                  // change will not be recieved. On these devices or routers that have
    337                  // lost the network, an active scan shall be conducted on the Default
    338                  // Channel list using the extended PANID to find the network. If the
    339                  // extended PANID isn't found using the Default Channel list, an scan
    340                  // should be completed using all channels.
    341                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   00004A   90....       MOV     DPTR,#__Constant_7fff800
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?L_MOV_X
   \   000052   90....       MOV     DPTR,#zgDefaultChannelList
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?L_MOV_TO_X
    342                }
    343              #endif // ZIGBEE_FREQ_AGILITY
    344              #if defined ( ZIGBEE_COMMISSIONING )
    345                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??ZDO_StartDevice_4:
   \   00005A   7403         MOV     A,#0x3
   \   00005C   6F           XRL     A,R7
   \   00005D   701F         JNZ     ??ZDO_StartDevice_5
   \   00005F   90....       MOV     DPTR,#??scanCnt
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FB           MOV     R3,A
   \   000064   7401         MOV     A,#0x1
   \   000066   2B           ADD     A,R3
   \   000067   F0           MOVX    @DPTR,A
   \   000068   EB           MOV     A,R3
   \   000069   C3           CLR     C
   \   00006A   9405         SUBB    A,#0x5
   \   00006C   4010         JC      ??ZDO_StartDevice_5
    346                {
    347                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    348                  // application specific means, the device shall conduct an active scan
    349                  // on the Default Channel list and join the PAN with the same
    350                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    351                  // on all channels.
    352                  // When devices rejoin the network and the PAN is not found from
    353                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   00006E   90....       MOV     DPTR,#__Constant_7fff800
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?L_MOV_X
   \   000076   90....       MOV     DPTR,#zgDefaultChannelList
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?L_MOV_TO_X
    354                }
    355              #endif // ZIGBEE_COMMISSIONING
    356            #endif
    357              }
    358              else if ( startMode == MODE_RESUME )
    359              {
    360                if ( logicalType == NODETYPE_ROUTER )
    361                {
    362                  ZMacScanCnf_t scanCnf;
    363                  devState = DEV_NWK_ORPHAN;
    364          
    365                  /* if router and nvram is available, fake successful orphan scan */
    366                  scanCnf.hdr.Status = ZSUCCESS;
    367                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    368                  scanCnf.UnscannedChannels = 0;
    369                  scanCnf.ResultListSize = 0;
    370                  nwk_ScanJoiningOrphan(&scanCnf);
    371          
    372                  ret = ZSuccess;
    373                }
    374                else
    375                {
    376                  devState = DEV_NWK_ORPHAN;
    377                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    378                                                zgDefaultStartingScanDuration );
    379                }
    380              }
    381              else
    382              {
    383          #if defined( LCD_SUPPORTED )
    384                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    385          #endif
    386              }
    387            }
    388          
    389            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_5:
   \   00007E   EA           MOV     A,R2
   \   00007F   6010         JZ      ??ZDO_StartDevice_6
    390              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   000081                ; Setup parameters for call to function osal_start_timerEx
   \   000081   7CE8         MOV     R4,#-0x18
   \   000083   7D03         MOV     R5,#0x3
   \   000085   7A01         MOV     R2,#0x1
   \   000087   7B00         MOV     R3,#0x0
   \   000089   90....       MOV     DPTR,#ZDAppTaskID
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??osal_start_timerEx?relay
    391          }
   \                     ??ZDO_StartDevice_6:
   \   000091   740B         MOV     A,#0xb
   \   000093   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??ZDO_StartDevice_3:
   \   000096   7401         MOV     A,#0x1
   \   000098   6F           XRL     A,R7
   \   000099   7051         JNZ     ??ZDO_StartDevice_7
   \   00009B   7401         MOV     A,#0x1
   \   00009D   6E           XRL     A,R6
   \   00009E   7035         JNZ     ??ZDO_StartDevice_8
   \   0000A0   740A         MOV     A,#0xa
   \   0000A2   90....       MOV     DPTR,#devState
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   7401         MOV     A,#0x1
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E4           CLR     A
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   7402         MOV     A,#0x2
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   90....       MOV     DPTR,#__Constant_0
   \   0000B8   78..         MOV     R0,#?V0 + 0
   \   0000BA   12....       LCALL   ?L_MOV_X
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?L_MOV_TO_X
   \   0000C7   7408         MOV     A,#0x8
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E4           CLR     A
   \   0000CD   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000D0   12....       LCALL   ??nwk_ScanJoiningOrphan?relay
   \   0000D3   80BC         SJMP    ??ZDO_StartDevice_6
   \                     ??ZDO_StartDevice_8:
   \   0000D5   740A         MOV     A,#0xa
   \   0000D7   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0000DA   12....       LCALL   ?L_MOV_X
   \   0000DD   AA..         MOV     R2,?V0 + 0
   \   0000DF   AB..         MOV     R3,?V0 + 1
   \   0000E1   AC..         MOV     R4,?V0 + 2
   \   0000E3   AD..         MOV     R5,?V0 + 3
   \   0000E5   12....       LCALL   ??NLME_OrphanJoinRequest?relay
   \   0000E8   E9           MOV     A,R1
   \   0000E9   FA           MOV     R2,A
   \   0000EA   8092         SJMP    ??ZDO_StartDevice_5
   \                     ??ZDO_StartDevice_7:
   \   0000EC                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000EC   7C..         MOV     R4,#(`?<Constant "MODE unknown">` & 0xff)
   \   0000EE   7D..         MOV     R5,#((`?<Constant "MODE unknown">` >> 8) & 0xff)
   \   0000F0   7A..         MOV     R2,#(`?<Constant "StartDevice ERR">` & 0xff)
   \   0000F2   7B..         MOV     R3,#((`?<Constant "StartDevice ERR">` >> 8) & 0xff)
   \   0000F4   12....       LCALL   ??HalLcdWriteScreen?relay
   \   0000F7   8088         SJMP    ??ZDO_StartDevice_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000004                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000004   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#zgDefaultChannelList
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine180_0
   \   000003                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    411          {
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    413          
    414            if (NULL == pMsg)
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
    425                pMsg->status = state;
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
    434            }
    435          }
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   8014         SJMP    ??CrossCallReturnLabel_175
    462          
    463            while (pItem != NULL)
    464            {
    465              if (pItem->epDesc->endPoint != ZDO_EP)
    466              {
    467                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V0 + 1
   \   000017   F0           MOVX    @DPTR,A
    468              }
    469          
    470              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000024   FF           MOV     R7,A
   \   000025   EE           MOV     A,R6
   \   000026   7001         JNZ     ??ZDO_UpdateNwkStatus_2
   \   000028   EF           MOV     A,R7
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000029   604D         JZ      ??ZDO_UpdateNwkStatus_3
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   E0           MOVX    A,@DPTR
   \   000037   60DF         JZ      ??ZDO_UpdateNwkStatus_1
   \   000039   A3           INC     DPTR
   \   00003A   12....       LCALL   ??Subroutine198_0 & 0xFFFF
    471            }
   \                     ??CrossCallReturnLabel_357:
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F                ; Setup parameters for call to function osal_msg_find
   \   00003F   7AD1         MOV     R2,#-0x2f
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??osal_msg_find?relay
   \   000045   EA           MOV     A,R2
   \   000046   7001         JNZ     ??ZDO_UpdateNwkStatus_4
   \   000048   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000049   70C5         JNZ     ??ZDO_UpdateNwkStatus_0
   \   00004B                ; Setup parameters for call to function osal_msg_allocate
   \   00004B   7A02         MOV     R2,#0x2
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ??osal_msg_allocate?relay
   \   000052   EA           MOV     A,R2
   \   000053   7001         JNZ     ??ZDO_UpdateNwkStatus_5
   \   000055   EB           MOV     A,R3
   \                     ??ZDO_UpdateNwkStatus_5:
   \   000056   700E         JNZ     ??ZDO_UpdateNwkStatus_6
   \   000058                ; Setup parameters for call to function osal_set_event
   \   000058   7A10         MOV     R2,#0x10
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   90....       MOV     DPTR,#ZDAppTaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??osal_set_event?relay
   \   000064   80B2         SJMP    ??ZDO_UpdateNwkStatus_1
   \                     ??ZDO_UpdateNwkStatus_6:
   \   000066   74D1         MOV     A,#-0x2f
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E5..         MOV     A,?V0 + 1
   \   000070   F0           MOVX    @DPTR,A
   \   000071                ; Setup parameters for call to function osal_msg_send
   \   000071   A9..         MOV     R1,?V0 + 0
   \   000073   12....       LCALL   ??osal_msg_send?relay
   \   000076   80A0         SJMP    ??ZDO_UpdateNwkStatus_1
    472          #if defined MT_ZDO_CB_FUNC
    473            zdoSendStateChangeMsg(state, MT_TaskID);
    474          #endif
    475          
    476            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000078                ; Setup parameters for call to function NLME_GetShortAddr
   \   000078   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00007B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007E   12....       LCALL   ?Subroutine32 & 0xFFFF
    477            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_30:
   \   000081                ; Setup parameters for call to function NLME_GetExtAddr
   \   000081   12....       LCALL   ??NLME_GetExtAddr?relay
    478          }
   \   000084   80..         SJMP    ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000003   E8           MOV     A,R0
   \   000004   FE           MOV     R6,A
   \   000005   E9           MOV     A,R1
   \   000006   22           RET
    479          
    480          #if defined ( REFLECTOR )
    481          /*********************************************************************
    482           * @fn          ZDO_RemoveEndDeviceBind
    483           *
    484           * @brief       Remove the end device bind
    485           *
    486           * @param  none
    487           *
    488           * @return      none
    489           */
    490          static void ZDO_RemoveEndDeviceBind( void )
    491          {
    492            if ( ZDO_EDBind != NULL )
    493            {
    494              // Free the RAM
    495              if ( ZDO_EDBind->inClusters != NULL )
    496                osal_mem_free( ZDO_EDBind->inClusters );
    497              if ( ZDO_EDBind->outClusters != NULL )
    498                osal_mem_free( ZDO_EDBind->outClusters );
    499              osal_mem_free( ZDO_EDBind );
    500              ZDO_EDBind = NULL;
    501            }
    502          }
    503          #endif // REFLECTOR
    504          
    505          #if defined ( REFLECTOR )
    506          /*********************************************************************
    507           * @fn          ZDO_RemoveEndDeviceBind
    508           *
    509           * @brief       Remove the end device bind
    510           *
    511           * @param  none
    512           *
    513           * @return      none
    514           */
    515          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    516          {
    517            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    518          
    519          #if defined( LCD_SUPPORTED )
    520            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    521            if ( Status == ZDP_SUCCESS )
    522              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    523            else
    524              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    525          #endif
    526          
    527          }
    528          #endif // REFLECTOR
    529          
    530          /*********************************************************************
    531           * @fn          ZDO_CompareClusterLists
    532           *
    533           * @brief       Compare one list to another list
    534           *
    535           * @param       numList1 - number of items in list 1
    536           * @param       list1 - first list of cluster IDs
    537           * @param       numList2 - number of items in list 2
    538           * @param       list2 - second list of cluster IDs
    539           * @param       pMatches - buffer to put matches
    540           *
    541           * @return      number of matches
    542           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    543          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    544                                    byte numList2, uint16 *list2, uint16 *pMatches )
    545          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8C..         MOV     ?V0 + 0,R4
   \   000009   740F         MOV     A,#0xf
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000011   7411         MOV     A,#0x11
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine86 & 0xFFFF
    546            byte x, y;
    547            uint16 z;
    548            byte numMatches = 0;
   \                     ??CrossCallReturnLabel_139:
   \   000019   75..00       MOV     ?V0 + 1,#0x0
    549          
    550            // Check the first in against the seconds out
    551            for ( x = 0; x < numList1; x++ )
   \   00001C   75..00       MOV     ?V0 + 6,#0x0
   \   00001F   804A         SJMP    ??ZDO_CompareClusterLists_0
    552            {
    553              for ( y = 0; y < numList2; y++ )
    554              {
    555                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   E5..         MOV     A,?V0 + 3
   \   000023   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 5,A
    556                if ( list1[x] == z )
   \   00002C   E5..         MOV     A,?V0 + 6
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   FE           MOV     R6,A
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   FF           MOV     R7,A
   \   000034   EA           MOV     A,R2
   \   000035   2E           ADD     A,R6
   \   000036   F582         MOV     DPL,A
   \   000038   EB           MOV     A,R3
   \   000039   3F           ADDC    A,R7
   \   00003A   F583         MOV     DPH,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V0 + 4
   \   00003F   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V0 + 5
   \                     ??ZDO_CompareClusterLists_2:
   \   000045   7019         JNZ     ??ZDO_CompareClusterLists_3
    557                  pMatches[numMatches++] = z;
   \   000047   E5..         MOV     A,?V0 + 1
   \   000049   C3           CLR     C
   \   00004A   33           RLC     A
   \   00004B   FE           MOV     R6,A
   \   00004C   E4           CLR     A
   \   00004D   33           RLC     A
   \   00004E   FF           MOV     R7,A
   \   00004F   EC           MOV     A,R4
   \   000050   2E           ADD     A,R6
   \   000051   F582         MOV     DPL,A
   \   000053   ED           MOV     A,R5
   \   000054   3F           ADDC    A,R7
   \   000055   F583         MOV     DPH,A
   \   000057   E5..         MOV     A,?V0 + 4
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E5..         MOV     A,?V0 + 5
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   05..         INC     ?V0 + 1
    558              }
   \                     ??ZDO_CompareClusterLists_3:
   \   000060   05..         INC     ?V0 + 3
   \                     ??ZDO_CompareClusterLists_4:
   \   000062   E5..         MOV     A,?V0 + 3
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V0 + 0
   \   000067   40B8         JC      ??ZDO_CompareClusterLists_1
   \   000069   05..         INC     ?V0 + 6
   \                     ??ZDO_CompareClusterLists_0:
   \   00006B   E5..         MOV     A,?V0 + 6
   \   00006D   C3           CLR     C
   \   00006E   95..         SUBB    A,?V0 + 2
   \   000070   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000072   75..00       MOV     ?V0 + 3,#0x0
   \   000075   80EB         SJMP    ??ZDO_CompareClusterLists_4
    559            }
    560          
    561            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000077   A9..         MOV     R1,?V0 + 1
   \   000079   02....       LJMP    ??Subroutine200_0 & 0xFFFF
    562          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FE           MOV     R6,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FF           MOV     R7,A
   \   000006   E8           MOV     A,R0
   \   000007   2E           ADD     A,R6
   \   000008   F582         MOV     DPL,A
   \   00000A   E9           MOV     A,R1
   \   00000B   3F           ADDC    A,R7
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    563          
    564          /*********************************************************************
    565           * Utility functions
    566           */
    567          
    568          /*********************************************************************
    569           * @fn          ZDO_CompareByteLists
    570           *
    571           * @brief       Compares two lists for matches.
    572           *
    573           * @param       ACnt  - number of entries in list A
    574           * @param       AList  - List A
    575           * @param       BCnt  - number of entries in list B
    576           * @param       BList  - List B
    577           *
    578           * @return      true if a match is found
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    581          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   740C         MOV     A,#0xc
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine192_0 & 0xFFFF
    582            byte x, y;
    583          
    584            for ( x = 0; x < ACnt; x++ )
   \                     ??CrossCallReturnLabel_336:
   \   00000F   75..00       MOV     ?V0 + 2,#0x0
   \   000012   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000014   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_0:
   \   000016   E5..         MOV     A,?V0 + 2
   \   000018   C3           CLR     C
   \   000019   95..         SUBB    A,?V0 + 3
   \   00001B   5031         JNC     ??ZDO_AnyClusterMatches_2
    585            {
    586              for ( y = 0; y < BCnt; y++ )
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   8001         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000021   0D           INC     R5
   \                     ??ZDO_AnyClusterMatches_3:
   \   000022   ED           MOV     A,R5
   \   000023   C3           CLR     C
   \   000024   9C           SUBB    A,R4
   \   000025   50ED         JNC     ??ZDO_AnyClusterMatches_1
    587              {
    588                if ( AList[x] == BList[y] )
   \   000027   E5..         MOV     A,?V0 + 2
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   FE           MOV     R6,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   FF           MOV     R7,A
   \   00002F   EA           MOV     A,R2
   \   000030   2E           ADD     A,R6
   \   000031   F582         MOV     DPL,A
   \   000033   EB           MOV     A,R3
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00003A   F5..         MOV     ?V0 + 1,A
   \   00003C   ED           MOV     A,R5
   \   00003D   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000040   65..         XRL     A,?V0 + 0
   \   000042   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   65..         XRL     A,?V0 + 1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000048   70D7         JNZ     ??ZDO_AnyClusterMatches_4
    589                {
    590                  return true;
   \   00004A   7901         MOV     R1,#0x1
   \   00004C   8002         SJMP    ??ZDO_AnyClusterMatches_6
    591                }
    592              }
    593            }
    594          
    595            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00004E   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000050   02....       LJMP    ??Subroutine180_0 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
    597          
    598          /*********************************************************************
    599           * Callback functions from ZDProfile
    600           */
    601          
    602          /*********************************************************************
    603           * @fn          ZDO_ProcessNodeDescReq
    604           *
    605           * @brief       This function processes and responds to the
    606           *              Node_Desc_req message.
    607           *
    608           * @param       inMsg - incoming message
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    613          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine63 & 0xFFFF
    614            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    615            NodeDescriptorFormat_t *desc = NULL;
    616          
    617            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_104:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    618            {
    619              desc = &ZDO_Config_Node_Descriptor;
    620            }
    621          
    622            if ( desc != NULL )
    623            {
    624              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#(ZDO_Config_Node_Descriptor & 0xff)
   \   000012   75....       MOV     ?V0 + 1,#((ZDO_Config_Node_Descriptor >> 8) & 0xff)
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessNodeDescReq_2
    625            }
    626            else
    627            {
    628              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    629                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine61 & 0xFFFF
    630            }
   \                     ??CrossCallReturnLabel_102:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    631          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000040   80..         SJMP    ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000007   FC           MOV     R4,A
   \   000008   E9           MOV     A,R1
   \   000009   FD           MOV     R5,A
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6C           XRL     A,R4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000006   FD           MOV     R5,A
   \   000007   7C80         MOV     R4,#-0x80
   \   000009   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00000C   EE           MOV     A,R6
   \   00000D   240F         ADD     A,#0xf
   \   00000F   F582         MOV     DPL,A
   \   000011   EF           MOV     A,R7
   \   000012   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000015   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000018   7404         MOV     A,#0x4
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   EA           MOV     A,R2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    632          
    633          /*********************************************************************
    634           * @fn          ZDO_ProcessPowerDescReq
    635           *
    636           * @brief       This function processes and responds to the
    637           *              Node_Power_req message.
    638           *
    639           * @param       inMsg  - incoming request
    640           *
    641           * @return      none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    644          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine63 & 0xFFFF
    645            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    646            NodePowerDescriptorFormat_t *desc = NULL;
    647          
    648            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_105:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    649            {
    650              desc = &ZDO_Config_Power_Descriptor;
    651            }
    652          
    653            if ( desc != NULL )
    654            {
    655              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#(ZDO_Config_Power_Descriptor & 0xff)
   \   000012   75....       MOV     ?V0 + 1,#((ZDO_Config_Power_Descriptor >> 8) & 0xff)
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801A         SJMP    ??ZDO_ProcessPowerDescReq_2
    656            }
    657            else
    658            {
    659              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    660                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine61 & 0xFFFF
    661            }
   \                     ??CrossCallReturnLabel_103:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
    662          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000040   80..         SJMP    ??Subroutine182_0
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessSimpleDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Simple_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message (request)
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine181_0
   \   000002                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine182_0
   \   000003                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    675          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    676            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    677            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00001B   E4           CLR     A
   \   00001C   2C           ADD     A,R4
   \   00001D   FA           MOV     R2,A
    678            byte endPoint = inMsg->asdu[2];
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
    679            byte free = false;
   \   000026   75..00       MOV     ?V0 + 1,#0x0
    680            byte stat = ZDP_SUCCESS;
   \   000029   75..00       MOV     ?V0 + 0,#0x0
    681          
    682            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002C   6004         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   00002E   94F1         SUBB    A,#-0xf
   \   000030   4005         JC      ??ZDO_ProcessSimpleDescReq_1
    683            {
    684              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000032   75..82       MOV     ?V0 + 0,#-0x7e
   \   000035   8031         SJMP    ??ZDO_ProcessSimpleDescReq_2
    685            }
    686            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000037   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6A           XRL     A,R2
   \   00003C   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000041   7022         JNZ     ??ZDO_ProcessSimpleDescReq_4
    687            {
    688              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000043                ; Setup parameters for call to function afFindSimpleDesc
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??afFindSimpleDesc?relay
   \   000050   E9           MOV     A,R1
   \   000051   F5..         MOV     ?V0 + 1,A
    689              if ( sDesc == NULL )
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7002         JNZ     ??ZDO_ProcessSimpleDescReq_5
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005E   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    690              {
    691                stat = ZDP_NOT_ACTIVE;
   \   000060   75..83       MOV     ?V0 + 0,#-0x7d
   \   000063   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    692              }
    693            }
    694            else
    695            {
    696              if ( ZSTACK_ROUTER_BUILD )
    697              {
    698                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000065   75..81       MOV     ?V0 + 0,#-0x7f
    699              }
    700              else if ( ZSTACK_END_DEVICE_BUILD )
    701              {
    702                stat = ZDP_INVALID_REQTYPE;
    703              }
    704            }
    705          
    706            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000068                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000071   A9..         MOV     R1,?V0 + 0
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ??ZDP_SimpleDescMsg?relay
    707          
    708            if ( free && sDesc )
   \   00007A   E5..         MOV     A,?V0 + 1
   \   00007C   6016         JZ      ??CrossCallReturnLabel_113
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   7002         JNZ     ??ZDO_ProcessSimpleDescReq_6
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000089   6009         JZ      ??CrossCallReturnLabel_113
    709            {
    710              osal_mem_free( sDesc );
   \   00008B                ; Setup parameters for call to function osal_mem_free
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   12....       LCALL   ?Subroutine70 & 0xFFFF
    711            }
    712          }
   \                     ??CrossCallReturnLabel_113:
   \   000094   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000003   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   22           RET
    713          
    714          /*********************************************************************
    715           * @fn          ZDO_ProcessActiveEPReq
    716           *
    717           * @brief       This function processes and responds to the
    718           *              Active_EP_req message.
    719           *
    720           * @param       inMsg  - incoming message (request)
    721           *
    722           * @return      none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    725          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    726            byte cnt = 0;
   \   000009   75..00       MOV     ?V0 + 2,#0x0
    727            uint16 aoi;
    728            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
    729          
    730            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   E9           MOV     A,R1
   \   000015   F5..         MOV     ?V0 + 1,A
    731          
    732            if ( aoi == NLME_GetShortAddr() )
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001A   EA           MOV     A,R2
   \   00001B   65..         XRL     A,?V0 + 0
   \   00001D   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   00001F   EB           MOV     A,R3
   \   000020   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000022   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    733            {
    734              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000024                ; Setup parameters for call to function afNumEndPoints
   \   000024   12....       LCALL   ??afNumEndPoints?relay
   \   000027   E9           MOV     A,R1
   \   000028   14           DEC     A
   \   000029   F5..         MOV     ?V0 + 2,A
    735              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002B                ; Setup parameters for call to function afEndPoints
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   7A..         MOV     R2,#(ZDOBuildBuf & 0xff)
   \   00002F   7B..         MOV     R3,#((ZDOBuildBuf >> 8) & 0xff)
   \   000031   12....       LCALL   ??afEndPoints?relay
   \   000034   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    736            }
    737            else
    738            {
    739              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000036   75..80       MOV     ?V0 + 3,#-0x80
    740            }
    741          
    742            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    743                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000039                ; Setup parameters for call to function ZDP_EPRsp
   \   000039   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00003C   F5..         MOV     ?V0 + 4,A
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000043   75....       MOV     ?V0 + 4,#(ZDOBuildBuf & 0xff)
   \   000046   75....       MOV     ?V0 + 5,#((ZDOBuildBuf >> 8) & 0xff)
   \   000049   78..         MOV     R0,#?V0 + 4
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   78..         MOV     R0,#?V0 + 2
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   E5..         MOV     A,?V0 + 3
   \   00005A   F5..         MOV     ?V0 + 0,A
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000064   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000067   7A05         MOV     R2,#0x5
   \   000069   7B80         MOV     R3,#-0x80
   \   00006B   12....       LCALL   ??ZDP_EPRsp?relay
   \   00006E   7407         MOV     A,#0x7
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    744          }
   \   000073   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine206_0
   \   000006                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    745          
    746          /*********************************************************************
    747           * @fn          ZDO_ConvertOTAClusters
    748           *
    749           * @brief       This function will convert the over-the-air cluster list
    750           *              format to an internal format.
    751           *
    752           * @param       inMsg  - incoming message (request)
    753           *
    754           * @return      pointer to incremented inBuf
    755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    756          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    757          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    758            uint8 x;
    759          
    760            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   8027         SJMP    ??ZDO_ConvertOTAClusters_0
    761            {
    762              // convert ota format to internal
    763              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000012   F9           MOV     R1,A
   \   000013   E4           CLR     A
   \   000014   25..         ADD     A,?V0 + 0
   \   000016   E9           MOV     A,R1
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   EF           MOV     A,R7
   \   00001A   33           RLC     A
   \   00001B   F8           MOV     R0,A
   \   00001C   E4           CLR     A
   \   00001D   33           RLC     A
   \   00001E   F9           MOV     R1,A
   \   00001F   EC           MOV     A,R4
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   ED           MOV     A,R5
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V0 + 1
   \   00002D   F0           MOVX    @DPTR,A
    764              inBuf += sizeof( uint16 );
   \   00002E   12....       LCALL   ?Subroutine124 & 0xFFFF
    765            }
   \                     ??CrossCallReturnLabel_206:
   \   000031   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000032   EF           MOV     A,R7
   \   000033   C3           CLR     C
   \   000034   9E           SUBB    A,R6
   \   000035   40D4         JC      ??ZDO_ConvertOTAClusters_1
    766            return ( inBuf );
   \   000037   7F03         MOV     R7,#0x3
   \   000039   02....       LJMP    ?BANKED_LEAVE_XDATA
    767          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
    768          
    769          /*********************************************************************
    770           * @fn          ZDO_ProcessMatchDescReq
    771           *
    772           * @brief       This function processes and responds to the
    773           *              Match_Desc_req message.
    774           *
    775           * @param       inMsg  - incoming message (request)
    776           *
    777           * @return      none
    778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    780          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
    781            uint8 epCnt = 0;
   \   00000E   E4           CLR     A
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    782            uint8 numInClusters;
    783            uint16 *inClusters = NULL;
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    784            uint8 numOutClusters;
    785            uint16 *outClusters = NULL;
   \   00001F   F5..         MOV     ?V0 + 14,A
   \   000021   F5..         MOV     ?V0 + 15,A
    786            epList_t *epDesc;
    787            SimpleDescriptionFormat_t *sDesc = NULL;
    788            uint8 allocated;
    789            uint8 *msg;
    790            uint16 aoi;
    791            uint16 profileID;
    792          
    793            // Parse the incoming message
    794            msg = inMsg->asdu;
   \   000023   12....       LCALL   ?Subroutine59 & 0xFFFF
    795            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_494:
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   EA           MOV     A,R2
   \   00002B   F5..         MOV     ?V0 + 2,A
   \   00002D   E9           MOV     A,R1
   \   00002E   F5..         MOV     ?V0 + 3,A
    796            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   EA           MOV     A,R2
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   E9           MOV     A,R1
   \   000045   F5..         MOV     ?V0 + 1,A
    797            msg += 4;
   \   000047   EE           MOV     A,R6
   \   000048   2404         ADD     A,#0x4
   \   00004A   FE           MOV     R6,A
   \   00004B   EF           MOV     A,R7
   \   00004C   3400         ADDC    A,#0x0
   \   00004E   FF           MOV     R7,A
   \   00004F                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00004F   AA..         MOV     R2,?V0 + 2
   \   000051   AB..         MOV     R3,?V0 + 3
    798          
    799            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000053   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000056   E9           MOV     A,R1
   \   000057   6401         XRL     A,#0x1
   \   000059   702D         JNZ     ??ZDO_ProcessMatchDescReq_0
    800            {
    801              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    802                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   00005B                ; Setup parameters for call to function ZDP_EPRsp
   \   00005B   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   75..00       MOV     ?V0 + 0,#0x0
   \   000064   75..00       MOV     ?V0 + 1,#0x0
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000074   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000077   75..80       MOV     ?V0 + 0,#-0x80
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    803              return;
   \   000085   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    804            }
    805            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000088                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000088   AA..         MOV     R2,?V0 + 2
   \   00008A   AB..         MOV     R3,?V0 + 3
   \   00008C   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00008F   E9           MOV     A,R1
   \   000090   700E         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   000092   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000095   E0           MOVX    A,@DPTR
   \   000096   65..         XRL     A,?V0 + 2
   \   000098   7004         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   65..         XRL     A,?V0 + 3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   00009E   70BB         JNZ     ??ZDO_ProcessMatchDescReq_1
    806            {
    807              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    808                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    809              return;
    810            }
    811          
    812            if ((numInClusters = *msg++) &&
    813                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000A0   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0000A3   8A..         MOV     ?V0 + 3,R2
   \   0000A5   6038         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000A7                ; Setup parameters for call to function osal_mem_alloc
   \   0000A7   C3           CLR     C
   \   0000A8   33           RLC     A
   \   0000A9   FA           MOV     R2,A
   \   0000AA   E4           CLR     A
   \   0000AB   33           RLC     A
   \   0000AC   FB           MOV     R3,A
   \   0000AD   12....       LCALL   ??osal_mem_alloc?relay
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   7002         JNZ     ??ZDO_ProcessMatchDescReq_6
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000C2   601B         JZ      ??ZDO_ProcessMatchDescReq_5
    814            {
    815              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000C4                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine86 & 0xFFFF
    816            }
   \                     ??CrossCallReturnLabel_141:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   FB           MOV     R3,A
   \   0000D0   A9..         MOV     R1,?V0 + 3
   \   0000D2   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000D5   8A..         MOV     ?V0 + 4,R2
   \   0000D7   8B..         MOV     ?V0 + 5,R3
   \   0000D9   AE..         MOV     R6,?V0 + 4
   \   0000DB   AF..         MOV     R7,?V0 + 5
   \   0000DD   8003         SJMP    ??ZDO_ProcessMatchDescReq_7
    817            else
    818            {
    819              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000DF   75..00       MOV     ?V0 + 3,#0x0
    820            }
    821          
    822            if ((numOutClusters = *msg++) &&
    823                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   0000E2   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000E5   8A..         MOV     ?V0 + 2,R2
   \   0000E7   601C         JZ      ??ZDO_ProcessMatchDescReq_8
   \   0000E9                ; Setup parameters for call to function osal_mem_alloc
   \   0000E9   C3           CLR     C
   \   0000EA   33           RLC     A
   \   0000EB   FA           MOV     R2,A
   \   0000EC   E4           CLR     A
   \   0000ED   33           RLC     A
   \   0000EE   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000F1   7001         JNZ     ??ZDO_ProcessMatchDescReq_9
   \   0000F3   EB           MOV     A,R3
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0000F4   600F         JZ      ??ZDO_ProcessMatchDescReq_8
    824            {
    825              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0000F6                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F6   AC..         MOV     R4,?V0 + 14
   \   0000F8   AD..         MOV     R5,?V0 + 15
   \   0000FA   EE           MOV     A,R6
   \   0000FB   FA           MOV     R2,A
   \   0000FC   EF           MOV     A,R7
   \   0000FD   FB           MOV     R3,A
   \   0000FE   A9..         MOV     R1,?V0 + 2
   \   000100   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000103   8003         SJMP    ??ZDO_ProcessMatchDescReq_10
    826            }
    827            else
    828            {
    829              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000105   75..00       MOV     ?V0 + 2,#0x0
    830            }
    831          
    832            // First count the number of endpoints that match.
    833            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000108   90....       MOV     DPTR,#epList
   \   00010B   804E         SJMP    ??ZDO_ProcessMatchDescReq_11
    834            while ( epDesc )
    835            {
    836              // Don't search endpoint 0 and check if response is allowed
    837              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    838              {
    839                if ( epDesc->pfnDescCB )
    840                {
    841                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    842                  allocated = TRUE;
    843                }
    844                else
    845                {
    846                  sDesc = epDesc->epDesc->simpleDesc;
    847                  allocated = FALSE;
    848                }
    849          
    850                if ( sDesc && sDesc->AppProfId == profileID )
    851                {
    852                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    853          
    854                  // If there are no search input/ouput clusters - respond
    855                  if ( ((numInClusters == 0) && (numOutClusters == 0))
    856                      // Are there matching input clusters?
    857                       || (ZDO_AnyClusterMatches( numInClusters, inClusters,
    858                            sDesc->AppNumInClusters, sDesc->pAppInClusterList ))
    859                      // Are there matching output clusters?
    860                       || (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    861                            sDesc->AppNumOutClusters, sDesc->pAppOutClusterList ))     )
    862                  {
    863                    // Notify the endpoint of the match.
    864                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    865                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    866          
    867                    if (pRspSent)
    868                    {
    869                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    870                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    871                      pRspSent->numInClusters = numInClusters;
    872                      pRspSent->numOutClusters = numOutClusters;
    873          
    874                      if (numInClusters)
    875                      {
    876                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    877                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    878                      }
    879                      else
    880                      {
    881                        pRspSent->pInClusters = NULL;
    882                      }
    883          
    884                      if (numOutClusters)
    885                      {
    886                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    887                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    888                      }
    889                      else
    890                      {
    891                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00010D   E4           CLR     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   F0           MOVX    @DPTR,A
    892                      }
    893          
    894                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000111                ; Setup parameters for call to function osal_msg_send
   \   000111   EE           MOV     A,R6
   \   000112   FA           MOV     R2,A
   \   000113   EF           MOV     A,R7
   \   000114   FB           MOV     R3,A
   \   000115   85..82       MOV     DPL,?V0 + 10
   \   000118   85..83       MOV     DPH,?V0 + 11
   \   00011B   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00011E   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000121   F9           MOV     R1,A
   \   000122   12....       LCALL   ??osal_msg_send?relay
    895                    }
    896          
    897                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000125   85..82       MOV     DPL,?V0 + 8
   \   000128   85..83       MOV     DPH,?V0 + 9
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   C0E0         PUSH    A
   \   00012E   85..82       MOV     DPL,?XSP + 0
   \   000131   85..83       MOV     DPH,?XSP + 1
   \   000134   E0           MOVX    A,@DPTR
   \   000135   24..         ADD     A,#(ZDOBuildBuf & 0xff)
   \   000137   F582         MOV     DPL,A
   \   000139   E4           CLR     A
   \   00013A   34..         ADDC    A,#((ZDOBuildBuf >> 8) & 0xff)
   \   00013C   F583         MOV     DPH,A
   \   00013E   D0E0         POP     A
   \   000140   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000143   04           INC     A
   \   000144   F0           MOVX    @DPTR,A
    898                  }
    899                }
    900          
    901                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000145   E5..         MOV     A,?V0 + 7
   \   000147   6007         JZ      ??ZDO_ProcessMatchDescReq_16
    902                  osal_mem_free( sDesc );
   \   000149                ; Setup parameters for call to function osal_mem_free
   \   000149   AA..         MOV     R2,?V0 + 8
   \   00014B   AB..         MOV     R3,?V0 + 9
   \   00014D   12....       LCALL   ??osal_mem_free?relay
    903              }
    904              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000150   85..82       MOV     DPL,?V0 + 10
   \   000153   85..83       MOV     DPH,?V0 + 11
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F5..         MOV     ?V0 + 10,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F5..         MOV     ?V0 + 11,A
   \   000162   E5..         MOV     A,?V0 + 10
   \   000164   7002         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   000166   E5..         MOV     A,?V0 + 11
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000168   7003         JNZ     $+5
   \   00016A   02....       LJMP    ??ZDO_ProcessMatchDescReq_18 & 0xFFFF
   \   00016D   85..82       MOV     DPL,?V0 + 10
   \   000170   85..83       MOV     DPH,?V0 + 11
   \   000173   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000176   FA           MOV     R2,A
   \   000177   E9           MOV     A,R1
   \   000178   FB           MOV     R3,A
   \   000179   8A82         MOV     DPL,R2
   \   00017B   8B83         MOV     DPH,R3
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   60D0         JZ      ??ZDO_ProcessMatchDescReq_16
   \   000180   85..82       MOV     DPL,?V0 + 10
   \   000183   85..83       MOV     DPH,?V0 + 11
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   E0           MOVX    A,@DPTR
   \   000189   A2E0         MOV     C,0xE0 /* A   */.0
   \   00018B   50C3         JNC     ??ZDO_ProcessMatchDescReq_16
   \   00018D   85..82       MOV     DPL,?V0 + 10
   \   000190   85..83       MOV     DPH,?V0 + 11
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000199   FC           MOV     R4,A
   \   00019A   E9           MOV     A,R1
   \   00019B   FD           MOV     R5,A
   \   00019C   EC           MOV     A,R4
   \   00019D   7001         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   00019F   ED           MOV     A,R5
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0001A0   8A82         MOV     DPL,R2
   \   0001A2   8B83         MOV     DPH,R3
   \   0001A4   6014         JZ      ??ZDO_ProcessMatchDescReq_20
   \   0001A6                ; Setup parameters for indirect call
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FA           MOV     R2,A
   \   0001A8   7901         MOV     R1,#0x1
   \   0001AA   8C82         MOV     DPL,R4
   \   0001AC   8D83         MOV     DPH,R5
   \   0001AE   12....       LCALL   ?CALL_IND
   \   0001B1   8A..         MOV     ?V0 + 8,R2
   \   0001B3   8B..         MOV     ?V0 + 9,R3
   \   0001B5   75..01       MOV     ?V0 + 7,#0x1
   \   0001B8   800D         SJMP    ??ZDO_ProcessMatchDescReq_21
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F5..         MOV     ?V0 + 8,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   F5..         MOV     ?V0 + 9,A
   \   0001C4   75..00       MOV     ?V0 + 7,#0x0
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0001C7   E5..         MOV     A,?V0 + 8
   \   0001C9   7002         JNZ     ??ZDO_ProcessMatchDescReq_22
   \   0001CB   E5..         MOV     A,?V0 + 9
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0001CD   7003         JNZ     $+5
   \   0001CF   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001D2   85..82       MOV     DPL,?V0 + 8
   \   0001D5   85..83       MOV     DPH,?V0 + 9
   \   0001D8   A3           INC     DPTR
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   65..         XRL     A,?V0 + 0
   \   0001DC   7004         JNZ     ??ZDO_ProcessMatchDescReq_23
   \   0001DE   A3           INC     DPTR
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0001E2   6003         JZ      $+5
   \   0001E4   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0001E7   E5..         MOV     A,?V0 + 3
   \   0001E9   7004         JNZ     ??ZDO_ProcessMatchDescReq_24
   \   0001EB   E5..         MOV     A,?V0 + 2
   \   0001ED   606B         JZ      ??ZDO_ProcessMatchDescReq_25
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0001EF                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001EF   85..82       MOV     DPL,?V0 + 8
   \   0001F2   85..83       MOV     DPH,?V0 + 9
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001FF   85..82       MOV     DPL,?V0 + 8
   \   000202   85..83       MOV     DPH,?V0 + 9
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   FC           MOV     R4,A
   \   00020D   7403         MOV     A,#0x3
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000215   A9..         MOV     R1,?V0 + 3
   \   000217   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   00021A   7402         MOV     A,#0x2
   \   00021C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00021F   E9           MOV     A,R1
   \   000220   7038         JNZ     ??ZDO_ProcessMatchDescReq_25
   \   000222                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000222   85..82       MOV     DPL,?V0 + 8
   \   000225   85..83       MOV     DPH,?V0 + 9
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000235   85..82       MOV     DPL,?V0 + 8
   \   000238   85..83       MOV     DPH,?V0 + 9
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FC           MOV     R4,A
   \   000246   AA..         MOV     R2,?V0 + 14
   \   000248   AB..         MOV     R3,?V0 + 15
   \   00024A   A9..         MOV     R1,?V0 + 2
   \   00024C   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   00024F   7402         MOV     A,#0x2
   \   000251   12....       LCALL   ?DEALLOC_XSTACK8
   \   000254   E9           MOV     A,R1
   \   000255   7003         JNZ     $+5
   \   000257   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   00025A                ; Setup parameters for call to function osal_msg_allocate
   \   00025A   E5..         MOV     A,?V0 + 3
   \   00025C   25..         ADD     A,?V0 + 2
   \   00025E   C3           CLR     C
   \   00025F   33           RLC     A
   \   000260   240A         ADD     A,#0xa
   \   000262   FA           MOV     R2,A
   \   000263   7B00         MOV     R3,#0x0
   \   000265   12....       LCALL   ??osal_msg_allocate?relay
   \   000268   8A..         MOV     ?V0 + 4,R2
   \   00026A   8B..         MOV     ?V0 + 5,R3
   \   00026C   AE..         MOV     R6,?V0 + 4
   \   00026E   AF..         MOV     R7,?V0 + 5
   \   000270   EE           MOV     A,R6
   \   000271   7001         JNZ     ??ZDO_ProcessMatchDescReq_26
   \   000273   EF           MOV     A,R7
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   000274   7003         JNZ     $+5
   \   000276   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   000279   74D2         MOV     A,#-0x2e
   \   00027B   8E82         MOV     DPL,R6
   \   00027D   8F83         MOV     DPH,R7
   \   00027F   F0           MOVX    @DPTR,A
   \   000280   85..82       MOV     DPL,?V0 + 12
   \   000283   85..83       MOV     DPH,?V0 + 13
   \   000286   A3           INC     DPTR
   \   000287   A3           INC     DPTR
   \   000288   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00028B   E8           MOV     A,R0
   \   00028C   F0           MOVX    @DPTR,A
   \   00028D   A3           INC     DPTR
   \   00028E   E9           MOV     A,R1
   \   00028F   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000292   A3           INC     DPTR
   \   000293   A3           INC     DPTR
   \   000294   E5..         MOV     A,?V0 + 3
   \   000296   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000299   E5..         MOV     A,?V0 + 2
   \   00029B   F0           MOVX    @DPTR,A
   \   00029C   EE           MOV     A,R6
   \   00029D   2405         ADD     A,#0x5
   \   00029F   FA           MOV     R2,A
   \   0002A0   EF           MOV     A,R7
   \   0002A1   3400         ADDC    A,#0x0
   \   0002A3   FB           MOV     R3,A
   \   0002A4   E5..         MOV     A,?V0 + 3
   \   0002A6   603A         JZ      ??ZDO_ProcessMatchDescReq_27
   \   0002A8   EE           MOV     A,R6
   \   0002A9   240A         ADD     A,#0xa
   \   0002AB   F8           MOV     R0,A
   \   0002AC   EF           MOV     A,R7
   \   0002AD   3400         ADDC    A,#0x0
   \   0002AF   F9           MOV     R1,A
   \   0002B0   8A82         MOV     DPL,R2
   \   0002B2   8B83         MOV     DPH,R3
   \   0002B4   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   0002B7                ; Setup parameters for call to function osal_memcpy
   \   0002B7   7401         MOV     A,#0x1
   \   0002B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BC   E0           MOVX    A,@DPTR
   \   0002BD   F5..         MOV     ?V0 + 4,A
   \   0002BF   A3           INC     DPTR
   \   0002C0   E0           MOVX    A,@DPTR
   \   0002C1   F5..         MOV     ?V0 + 5,A
   \   0002C3   75..00       MOV     ?V0 + 6,#0x0
   \   0002C6   78..         MOV     R0,#?V0 + 4
   \   0002C8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002CB   E5..         MOV     A,?V0 + 3
   \   0002CD   C3           CLR     C
   \   0002CE   33           RLC     A
   \   0002CF   FC           MOV     R4,A
   \   0002D0   E4           CLR     A
   \   0002D1   33           RLC     A
   \   0002D2   FD           MOV     R5,A
   \   0002D3   8A82         MOV     DPL,R2
   \   0002D5   8B83         MOV     DPH,R3
   \   0002D7   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0002DA   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0002DD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002E0   8008         SJMP    ??ZDO_ProcessMatchDescReq_28
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0002E2   8A82         MOV     DPL,R2
   \   0002E4   8B83         MOV     DPH,R3
   \   0002E6   E4           CLR     A
   \   0002E7   F0           MOVX    @DPTR,A
   \   0002E8   A3           INC     DPTR
   \   0002E9   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   0002EA   EE           MOV     A,R6
   \   0002EB   2408         ADD     A,#0x8
   \   0002ED   F582         MOV     DPL,A
   \   0002EF   EF           MOV     A,R7
   \   0002F0   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   0002F3   E5..         MOV     A,?V0 + 2
   \   0002F5   7003         JNZ     $+5
   \   0002F7   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002FA   E5..         MOV     A,?V0 + 3
   \   0002FC   C3           CLR     C
   \   0002FD   33           RLC     A
   \   0002FE   F8           MOV     R0,A
   \   0002FF   E4           CLR     A
   \   000300   33           RLC     A
   \   000301   F9           MOV     R1,A
   \   000302   EE           MOV     A,R6
   \   000303   28           ADD     A,R0
   \   000304   F8           MOV     R0,A
   \   000305   EF           MOV     A,R7
   \   000306   39           ADDC    A,R1
   \   000307   F9           MOV     R1,A
   \   000308   740A         MOV     A,#0xa
   \   00030A   28           ADD     A,R0
   \   00030B   FA           MOV     R2,A
   \   00030C   E4           CLR     A
   \   00030D   39           ADDC    A,R1
   \   00030E   FB           MOV     R3,A
   \   00030F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000312                ; Setup parameters for call to function osal_memcpy
   \   000312   85....       MOV     ?V0 + 4,?V0 + 14
   \   000315   85....       MOV     ?V0 + 5,?V0 + 15
   \   000318   75..00       MOV     ?V0 + 6,#0x0
   \   00031B   78..         MOV     R0,#?V0 + 4
   \   00031D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000320   E5..         MOV     A,?V0 + 2
   \   000322   C3           CLR     C
   \   000323   33           RLC     A
   \   000324   FC           MOV     R4,A
   \   000325   E4           CLR     A
   \   000326   33           RLC     A
   \   000327   FD           MOV     R5,A
   \   000328   12....       LCALL   ?Subroutine131 & 0xFFFF
    905            }
   \                     ??CrossCallReturnLabel_223:
   \   00032B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00032E   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
    906          
    907            // Send the message only if at least one match found.
    908            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000331   85..82       MOV     DPL,?XSP + 0
   \   000334   85..83       MOV     DPH,?XSP + 1
   \   000337   E0           MOVX    A,@DPTR
   \   000338   6039         JZ      ??ZDO_ProcessMatchDescReq_29
    909            {
    910              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    911                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00033A                ; Setup parameters for call to function ZDP_EPRsp
   \   00033A   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00033D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000340   75....       MOV     ?V0 + 0,#(ZDOBuildBuf & 0xff)
   \   000343   75....       MOV     ?V0 + 1,#((ZDOBuildBuf >> 8) & 0xff)
   \   000346   78..         MOV     R0,#?V0 + 0
   \   000348   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00034B   7403         MOV     A,#0x3
   \   00034D   12....       LCALL   ?XSTACK_DISP0_8
   \   000350   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000353   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000356   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000359   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00035C   75..00       MOV     ?V0 + 0,#0x0
   \   00035F   78..         MOV     R0,#?V0 + 0
   \   000361   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000364   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000367   12....       LCALL   ?DEALLOC_XSTACK8
   \   00036A   E9           MOV     A,R1
   \   00036B   7011         JNZ     ??ZDO_ProcessMatchDescReq_30
    912              {
    913          #if defined( LCD_SUPPORTED )
    914                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   00036D                ; Setup parameters for call to function HalLcdWriteScreen
   \   00036D   7C..         MOV     R4,#(`?<Constant "Rsp Sent">` & 0xff)
   \   00036F   7D..         MOV     R5,#((`?<Constant "Rsp Sent">` >> 8) & 0xff)
   \   000371   8004         SJMP    ??ZDO_ProcessMatchDescReq_31
    915          #endif
    916              }
    917            }
    918            else
    919            {
    920          #if defined( LCD_SUPPORTED )
    921              HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_29:
   \   000373                ; Setup parameters for call to function HalLcdWriteScreen
   \   000373   7C..         MOV     R4,#(`?<Constant "Non Matched">` & 0xff)
   \   000375   7D..         MOV     R5,#((`?<Constant "Non Matched">` >> 8) & 0xff)
   \                     ??ZDO_ProcessMatchDescReq_31:
   \   000377   7A..         MOV     R2,#(`?<Constant "Match Desc Req">` & 0xff)
   \   000379   7B..         MOV     R3,#((`?<Constant "Match Desc Req">` >> 8) & 0xff)
   \   00037B   12....       LCALL   ??HalLcdWriteScreen?relay
    922          #endif
    923            }
    924          
    925            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_30:
   \   00037E   7401         MOV     A,#0x1
   \   000380   12....       LCALL   ?XSTACK_DISP0_8
   \   000383   E0           MOVX    A,@DPTR
   \   000384   7002         JNZ     ??ZDO_ProcessMatchDescReq_32
   \   000386   A3           INC     DPTR
   \   000387   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMatchDescReq_32:
   \   000388   6008         JZ      ??CrossCallReturnLabel_114
    926              osal_mem_free( inClusters );
   \   00038A                ; Setup parameters for call to function osal_mem_free
   \   00038A   7401         MOV     A,#0x1
   \   00038C   12....       LCALL   ?XSTACK_DISP0_8
   \   00038F   12....       LCALL   ?Subroutine70 & 0xFFFF
    927            if ( outClusters != NULL )
   \                     ??CrossCallReturnLabel_114:
   \   000392   E5..         MOV     A,?V0 + 14
   \   000394   7002         JNZ     ??ZDO_ProcessMatchDescReq_33
   \   000396   E5..         MOV     A,?V0 + 15
   \                     ??ZDO_ProcessMatchDescReq_33:
   \   000398   6007         JZ      ??ZDO_ProcessMatchDescReq_2
    928              osal_mem_free( outClusters );
   \   00039A                ; Setup parameters for call to function osal_mem_free
   \   00039A   AA..         MOV     R2,?V0 + 14
   \   00039C   AB..         MOV     R3,?V0 + 15
   \   00039E   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   0003A1   7403         MOV     A,#0x3
   \   0003A3                REQUIRE ?Subroutine5
   \   0003A3                ; // Fall through to label ?Subroutine5
    929          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine184_0
   \   000003                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V0 + 12
   \   00000C   240F         ADD     A,#0xf
   \   00000E   F582         MOV     DPL,A
   \   000010   E5..         MOV     A,?V0 + 13
   \   000012   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000015   7A06         MOV     R2,#0x6
   \   000017   7B80         MOV     R3,#-0x80
   \   000019   12....       LCALL   ??ZDP_EPRsp?relay
   \   00001C   7407         MOV     A,#0x7
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine190_0
   \   000001                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   240E         ADD     A,#0xe
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 13
   \   000008                REQUIRE ??Subroutine210_0
   \   000008                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000003                REQUIRE ??Subroutine211_0
   \   000003                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003                REQUIRE ??Subroutine223_0
   \   000003                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   AE82         MOV     R6,DPL
   \   000009   AF83         MOV     R7,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   FB           MOV     R3,A
   \   000001   12....       LCALL   ??osal_mem_alloc?relay
   \   000004   8A..         MOV     ?V0 + 14,R2
   \   000006   8B..         MOV     ?V0 + 15,R3
   \   000008   EA           MOV     A,R2
   \   000009   22           RET
    930          
    931          
    932          /*********************************************************************
    933           * @fn      ZDO_ProcessBindUnbindReq()
    934           *
    935           * @brief   Called to process a Bind or Unbind Request message.
    936           *
    937           * @param   inMsg  - incoming message (request)
    938           * @param   pReq - place to put parsed information
    939           *
    940           * @return  none
    941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    942          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    943          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    944            zAddrType_t SourceAddr;       // Binding Source addres
    945            byte bindStat;
    946          
    947            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    948            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??sAddrExtCpy?relay
    949          
    950          
    951            // If the local device is not the primary binding cache
    952            // check the src address of the bind request.
    953            // If it is not the local device's extended address
    954            // discard the request.
    955            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    956                  (pReq->dstAddress.addrMode != Addr64Bit &&
    957                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000024   E5..         MOV     A,?V0 + 6
   \   000026   240C         ADD     A,#0xc
   \   000028   F5..         MOV     ?V0 + 10,A
   \   00002A   E5..         MOV     A,?V0 + 7
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 11,A
   \   000030                ; Setup parameters for call to function sAddrExtCmp
   \   000030                ; Setup parameters for call to function NLME_GetExtAddr
   \   000030   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000033   EA           MOV     A,R2
   \   000034   FC           MOV     R4,A
   \   000035   EB           MOV     A,R3
   \   000036   FD           MOV     R5,A
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   AA82         MOV     R2,DPL
   \   00003E   AB83         MOV     R3,DPH
   \   000040   12....       LCALL   ??sAddrExtCmp?relay
   \   000043   E9           MOV     A,R1
   \   000044   6012         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000046   EE           MOV     A,R6
   \   000047   2413         ADD     A,#0x13
   \   000049   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FA           MOV     R2,A
   \   00004E   7403         MOV     A,#0x3
   \   000050   6A           XRL     A,R2
   \   000051   600A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   000053   7401         MOV     A,#0x1
   \   000055   6A           XRL     A,R2
   \   000056   6005         JZ      ??ZDO_ProcessBindUnbindReq_1
    958            {
    959              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   7484         MOV     A,#-0x7c
   \   00005A   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    960            }
    961            else
    962            {
    963              // Check source & destination endpoints
    964              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    965                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    966                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00005D   EE           MOV     A,R6
   \   00005E   2408         ADD     A,#0x8
   \   000060   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   601E         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000067   C3           CLR     C
   \   000068   94F1         SUBB    A,#-0xf
   \   00006A   5019         JNC     ??ZDO_ProcessBindUnbindReq_3
   \   00006C   EE           MOV     A,R6
   \   00006D   2414         ADD     A,#0x14
   \   00006F   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000072   7403         MOV     A,#0x3
   \   000074   6A           XRL     A,R2
   \   000075   7013         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000077   85..82       MOV     DPL,?V0 + 2
   \   00007A   85..83       MOV     DPH,?V0 + 3
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000080   C3           CLR     C
   \   000081   94F1         SUBB    A,#-0xf
   \   000083   4005         JC      ??ZDO_ProcessBindUnbindReq_4
    967              {
    968                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   000085   7482         MOV     A,#-0x7e
   \   000087   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    969              }
    970              else
    971              {
    972                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   00008A   EE           MOV     A,R6
   \   00008B   2409         ADD     A,#0x9
   \   00008D   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000090   EE           MOV     A,R6
   \   000091   240B         ADD     A,#0xb
   \   000093   FE           MOV     R6,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   FF           MOV     R7,A
   \   000098   85..82       MOV     DPL,?V0 + 10
   \   00009B   85..83       MOV     DPH,?V0 + 11
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6421         XRL     A,#0x21
   \   0000A1   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A5   6003         JZ      $+5
   \   0000A7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
    973                {
    974                  // Assume the table is full
    975                  bindStat = ZDP_TABLE_FULL;
   \   0000AA   7487         MOV     A,#-0x79
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   F0           MOVX    @DPTR,A
    976          
    977                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   \   0000B3                ; Setup parameters for call to function bindNumOfEntries
   \   0000B3   12....       LCALL   ??bindNumOfEntries?relay
   \   0000B6   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B9   E4           CLR     A
   \   0000BA   93           MOVC    A,@A+DPTR
   \   0000BB   F8           MOV     R0,A
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   93           MOVC    A,@A+DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   C3           CLR     C
   \   0000C1   EA           MOV     A,R2
   \   0000C2   98           SUBB    A,R0
   \   0000C3   EB           MOV     A,R3
   \   0000C4   99           SUBB    A,R1
   \   0000C5   4003         JC      $+5
   \   0000C7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
    978                  {
    979                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
    980                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \   0000CA                ; Setup parameters for call to function APSME_BindRequest
   \   0000CA   85..82       MOV     DPL,?V0 + 2
   \   0000CD   85..83       MOV     DPH,?V0 + 3
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F5..         MOV     ?V0 + 2,A
   \   0000D3   78..         MOV     R0,#?V0 + 2
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   EE           MOV     A,R6
   \   0000D9   FC           MOV     R4,A
   \   0000DA   EF           MOV     A,R7
   \   0000DB   FD           MOV     R5,A
   \   0000DC   85..82       MOV     DPL,?V0 + 0
   \   0000DF   85..83       MOV     DPH,?V0 + 1
   \   0000E2   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   0000E5   85..82       MOV     DPL,?V0 + 4
   \   0000E8   85..83       MOV     DPH,?V0 + 5
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F9           MOV     R1,A
   \   0000ED   12....       LCALL   ??APSME_BindRequest?relay
   \   0000F0   7401         MOV     A,#0x1
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV     A,R1
   \   0000F6   7074         JNZ     ??ZDO_ProcessBindUnbindReq_7
    981                    {
    982                      uint16 nwkAddr;
    983          
    984                      // valid entry
    985                      bindStat = ZDP_SUCCESS;
   \   0000F8   E4           CLR     A
   \   0000F9   85..82       MOV     DPL,?XSP + 0
   \   0000FC   85..83       MOV     DPH,?XSP + 1
   \   0000FF   F0           MOVX    @DPTR,A
    986          
    987                      // Notify to save info into NV
    988                      ZDApp_NVUpdate();
   \   000100                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000100   12....       LCALL   ??ZDApp_NVUpdate?relay
    989          
    990                      // Check for the destination address
    991                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   000103   85..82       MOV     DPL,?V0 + 8
   \   000106   85..83       MOV     DPH,?V0 + 9
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   6403         XRL     A,#0x3
   \   00010C   705E         JNZ     ??ZDO_ProcessBindUnbindReq_7
    992                      {
    993                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   00010E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00010E   7401         MOV     A,#0x1
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   AC82         MOV     R4,DPL
   \   000115   AD83         MOV     R5,DPH
   \   000117   EE           MOV     A,R6
   \   000118   FA           MOV     R2,A
   \   000119   EF           MOV     A,R7
   \   00011A   FB           MOV     R3,A
   \   00011B   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   00011E   E9           MOV     A,R1
   \   00011F   704B         JNZ     ??ZDO_ProcessBindUnbindReq_7
    994                        {
    995                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000121                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000121   7D00         MOV     R5,#0x0
   \   000123   7C00         MOV     R4,#0x0
   \   000125   7900         MOV     R1,#0x0
   \   000127   EE           MOV     A,R6
   \   000128   FA           MOV     R2,A
   \   000129   EF           MOV     A,R7
   \   00012A   FB           MOV     R3,A
   \   00012B   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   00012E   803C         SJMP    ??ZDO_ProcessBindUnbindReq_7
    996                        }
    997                      }
    998                    }
    999                  }
   1000                }
   1001                else // Unbind_req
   1002                {
   1003                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1004                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000130                ; Setup parameters for call to function APSME_UnBindRequest
   \   000130   85..82       MOV     DPL,?V0 + 2
   \   000133   85..83       MOV     DPH,?V0 + 3
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F5..         MOV     ?V0 + 2,A
   \   000139   78..         MOV     R0,#?V0 + 2
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013E   EE           MOV     A,R6
   \   00013F   FC           MOV     R4,A
   \   000140   EF           MOV     A,R7
   \   000141   FD           MOV     R5,A
   \   000142   85..82       MOV     DPL,?V0 + 0
   \   000145   85..83       MOV     DPH,?V0 + 1
   \   000148   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00014B   12....       LCALL   ??APSME_UnBindRequest?relay
   \   00014E   7401         MOV     A,#0x1
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   \   000153   E9           MOV     A,R1
   \   000154   700D         JNZ     ??ZDO_ProcessBindUnbindReq_8
   1005                  {
   1006                    bindStat = ZDP_SUCCESS;
   \   000156   E4           CLR     A
   \   000157   85..82       MOV     DPL,?XSP + 0
   \   00015A   85..83       MOV     DPH,?XSP + 1
   \   00015D   F0           MOVX    @DPTR,A
   1007          
   1008                    // Notify to save info into NV
   1009                    ZDApp_NVUpdate();
   \   00015E                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00015E   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   000161   8009         SJMP    ??ZDO_ProcessBindUnbindReq_7
   1010                  }
   1011                  else
   1012                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000163   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000165   85..82       MOV     DPL,?XSP + 0
   \   000168   85..83       MOV     DPH,?XSP + 1
   \   00016B   F0           MOVX    @DPTR,A
   1013                }
   1014              }
   1015            }
   1016          
   1017            // Send back a response message
   1018            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1019                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1020                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00016C                ; Setup parameters for call to function ZDP_SendData
   \   00016C   E5..         MOV     A,?V0 + 6
   \   00016E   240E         ADD     A,#0xe
   \   000170   F582         MOV     DPL,A
   \   000172   E5..         MOV     A,?V0 + 7
   \   000174   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000177   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017A   7401         MOV     A,#0x1
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   8582..       MOV     ?V0 + 0,DPL
   \   000182   8583..       MOV     ?V0 + 1,DPH
   \   000185   78..         MOV     R0,#?V0 + 0
   \   000187   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018A   85..82       MOV     DPL,?V0 + 10
   \   00018D   85..83       MOV     DPH,?V0 + 11
   \   000190   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000193   4480         ORL     A,#0x80
   \   000195   F5..         MOV     ?V0 + 1,A
   \   000197   78..         MOV     R0,#?V0 + 0
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019C   7901         MOV     R1,#0x1
   \   00019E   E5..         MOV     A,?V0 + 6
   \   0001A0   2402         ADD     A,#0x2
   \   0001A2   FC           MOV     R4,A
   \   0001A3   E5..         MOV     A,?V0 + 7
   \   0001A5   3400         ADDC    A,#0x0
   \   0001A7   FD           MOV     R5,A
   \   0001A8   E5..         MOV     A,?V0 + 6
   \   0001AA   240F         ADD     A,#0xf
   \   0001AC   FA           MOV     R2,A
   \   0001AD   E5..         MOV     A,?V0 + 7
   \   0001AF   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   0001B2   12....       LCALL   ?DEALLOC_XSTACK8
   1021          }
   \   0001B5   740C         MOV     A,#0xc
   \   0001B7                REQUIRE ?Subroutine6
   \   0001B7                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine185_0
   \   000003                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine196_0
   \   000001                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL   ??ZDP_SendData?relay
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F5..         MOV     ?V0 + 8,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   85..82       MOV     DPL,?V0 + 8
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   85..82       MOV     DPL,?V0 + 4
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine222_0
   \   000003                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET
   1022          
   1023          /*********************************************************************
   1024           * @fn      ZDO_UpdateAddrManager
   1025           *
   1026           * @brief   Update the Address Manager.
   1027           *
   1028           * @param   nwkAddr - network address
   1029           * @param   extAddr - extended address
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1034          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1035            AddrMgrEntry_t addrEntry;
   1036          
   1037            // Update the address manager
   1038            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   E4           CLR     A
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   1039            addrEntry.nwkAddr = nwkAddr;
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine32 & 0xFFFF
   1040            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_33:
   \   000019                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000019   7403         MOV     A,#0x3
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1041            AddrMgrEntryUpdate( &addrEntry );
   \   000025                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   AA82         MOV     R2,DPL
   \   00002D   AB83         MOV     R3,DPH
   \   00002F   12....       LCALL   ??AddrMgrEntryUpdate?relay
   1042          }
   \   000032   740D         MOV     A,#0xd
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   02....       LJMP    ?Subroutine0 & 0xFFFF
   1043          
   1044          /*********************************************************************
   1045           * @fn      ZDO_ProcessServerDiscReq
   1046           *
   1047           * @brief   Process the Server_Discovery_req message.
   1048           *
   1049           * @param   inMsg  - incoming message (request)
   1050           *
   1051           * @return  none
   1052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1053          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1054          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine64 & 0xFFFF
   1055            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1056            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_296:
   \   000008   F8           MOV     R0,A
   \   000009   90....       MOV     DPTR,#(ZDO_Config_Node_Descriptor + 8)
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   58           ANL     A,R0
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   59           ANL     A,R1
   \   000013   F5..         MOV     ?V0 + 1,A
   1057          
   1058            if ( matchMask )
   \   000015   E5..         MOV     A,?V0 + 0
   \   000017   7002         JNZ     ??ZDO_ProcessServerDiscReq_0
   \   000019   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00001B   601F         JZ      ??ZDO_ProcessServerDiscReq_1
   1059            {
   1060              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1061                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000025   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000028   12....       LCALL   ?Subroutine117 & 0xFFFF
   1062            }
   \                     ??CrossCallReturnLabel_290:
   \   00002B   FD           MOV     R5,A
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000031   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000034   12....       LCALL   ??ZDP_ServerDiscRsp?relay
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   1063          }
   \                     ??ZDO_ProcessServerDiscReq_1:
   \   00003C   02....       LJMP    ??Subroutine182_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine186_0
   \   000004                ; // Fall through to label ??Subroutine186_0
   1064          
   1065          /*********************************************************************
   1066           * Call Back Functions from APS  - API
   1067           */
   1068          
   1069          /*********************************************************************
   1070           * @fn          ZDO_EndDeviceTimeoutCB
   1071           *
   1072           * @brief       This function handles the binding timer for the End
   1073           *              Device Bind command.
   1074           *
   1075           * @param       none
   1076           *
   1077           * @return      none
   1078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1079          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1080          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1081          #if defined ( REFLECTOR )
   1082            byte stat;
   1083            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7002         JNZ     ??ZDO_EndDeviceTimeoutCB_0
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000012   7003         JNZ     $+5
   \   000014   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_1 & 0xFFFF
   1084            {
   1085              stat = ZDO_EDBind->status;
   1086          
   1087              // Send the response message to the first sent
   1088              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1089                                  stat, ZDO_EDBind->SecurityUse );
   \   000017   90....       MOV     DPTR,#ZDO_EDBind
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   2415         ADD     A,#0x15
   \   00001D   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000020   FA           MOV     R2,A
   \   000021   90....       MOV     DPTR,#ZDO_EDBind
   \   000024   E0           MOVX    A,@DPTR
   \   000025   2416         ADD     A,#0x16
   \   000027   08           INC     R0
   \   000028   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#ZDO_EDBind
   \   000035   E0           MOVX    A,@DPTR
   \   000036   2401         ADD     A,#0x1
   \   000038   FC           MOV     R4,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   FD           MOV     R5,A
   \   00003E   90....       MOV     DPTR,#ZDO_EDBind
   \   000041   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000044   C0E0         PUSH    A
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E                ; Setup parameters for call to function ZDP_SendData
   \   00004E   EA           MOV     A,R2
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7401         MOV     A,#0x1
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   8582..       MOV     ?V0 + 0,DPL
   \   00005E   8583..       MOV     ?V0 + 1,DPH
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   75..20       MOV     ?V0 + 0,#0x20
   \   000069   75..80       MOV     ?V0 + 1,#-0x80
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7901         MOV     R1,#0x1
   \   000073   7406         MOV     A,#0x6
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082                ; Setup parameters for call to function HalLcdWriteString
   \   000082   7901         MOV     R1,#0x1
   \   000084   7A..         MOV     R2,#(`?<Constant "End Device Bind">` & 0xff)
   \   000086   7B..         MOV     R3,#((`?<Constant "End Device Bind">` >> 8) & 0xff)
   \   000088   12....       LCALL   ??HalLcdWriteString?relay
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7902         MOV     R1,#0x2
   \   000094   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_2
   \   000096                ; Setup parameters for call to function HalLcdWriteString
   \   000096   7A..         MOV     R2,#(`?<Constant "Success Sent">` & 0xff)
   \   000098   7B..         MOV     R3,#((`?<Constant "Success Sent">` >> 8) & 0xff)
   \   00009A   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_3
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   00009C                ; Setup parameters for call to function HalLcdWriteString
   \   00009C   7A..         MOV     R2,#(`?<Constant "Timeout">` & 0xff)
   \   00009E   7B..         MOV     R3,#((`?<Constant "Timeout">` >> 8) & 0xff)
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000A0   12....       LCALL   ??HalLcdWriteString?relay
   1090          
   1091              ZDO_RemoveEndDeviceBind();
   \   0000A3   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   7002         JNZ     ??ZDO_EndDeviceTimeoutCB_4
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000AB   602F         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   0000AD   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   2410         ADD     A,#0x10
   \   0000B3   12....       LCALL   ?Subroutine57 & 0xFFFF
   1092            }
   \                     ??CrossCallReturnLabel_92:
   \   0000B6   7001         JNZ     ??ZDO_EndDeviceTimeoutCB_5
   \   0000B8   EB           MOV     A,R3
   \                     ??ZDO_EndDeviceTimeoutCB_5:
   \   0000B9   6003         JZ      ??ZDO_EndDeviceTimeoutCB_6
   \   0000BB                ; Setup parameters for call to function osal_mem_free
   \   0000BB   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_6:
   \   0000BE   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   2413         ADD     A,#0x13
   \   0000C4   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000C7   7001         JNZ     ??ZDO_EndDeviceTimeoutCB_7
   \   0000C9   EB           MOV     A,R3
   \                     ??ZDO_EndDeviceTimeoutCB_7:
   \   0000CA   6003         JZ      ??ZDO_EndDeviceTimeoutCB_8
   \   0000CC                ; Setup parameters for call to function osal_mem_free
   \   0000CC   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_8:
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   90....       MOV     DPTR,#ZDO_EDBind
   \   0000D2   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000D5   90....       MOV     DPTR,#ZDO_EDBind
   \   0000D8   E4           CLR     A
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   F0           MOVX    @DPTR,A
   1093          #endif  // REFLECTOR
   1094          }
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000DC   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine203_0
   \   000001                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine208_0
   \   000001                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000003                REQUIRE ??Subroutine218_0
   \   000003                ; // Fall through to label ??Subroutine218_0
   1095          
   1096          /*********************************************************************
   1097           * Optional Management Messages
   1098           */
   1099          
   1100          /*********************************************************************
   1101           * @fn          ZDO_ProcessMgmtLqiReq
   1102           *
   1103           * @brief       This function handles parsing the incoming Management
   1104           *              LQI request and generate the response.
   1105           *
   1106           *   Note:      This function will limit the number of items returned
   1107           *              to ZDO_MAX_LQI_ITEMS items.
   1108           *
   1109           * @param       inMsg - incoming message (request)
   1110           *
   1111           * @return      none
   1112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1113          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1114          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   1115            byte x;
   1116            byte index;
   1117            byte numItems;
   1118            byte maxItems;
   1119            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V0 + 6,#0x0
   \   000011   75..00       MOV     ?V0 + 7,#0x0
   1120            ZDP_MgmtLqiItem_t* item;
   1121            neighborEntry_t    entry;
   1122            byte aItems;
   1123            associated_devices_t *aDevice;
   1124            AddrMgrEntry_t  nwkEntry;
   1125            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000017   F5..         MOV     ?V0 + 12,A
   1126          
   1127            // Get the number of neighbor items
   1128            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000019                ; Setup parameters for call to function NLME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   799C         MOV     R1,#-0x64
   \   000029   12....       LCALL   ??NLME_GetRequest?relay
   1129          
   1130            // Get the number of associated items
   1131            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002C                ; Setup parameters for call to function AssocCount
   \   00002C   7A04         MOV     R2,#0x4
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??AssocCount?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 8,A
   1132          
   1133            // Total number of items
   1134            maxItems += aItems;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   25..         ADD     A,?V0 + 8
   \   00003F   F0           MOVX    @DPTR,A
   1135          
   1136            // Start with the supplied index
   1137            if ( maxItems > StartIndex )
   \   000040   FA           MOV     R2,A
   \   000041   E5..         MOV     A,?V0 + 12
   \   000043   C3           CLR     C
   \   000044   9A           SUBB    A,R2
   \   000045   4003         JC      $+5
   \   000047   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1138            {
   1139              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V0 + 12
   \   00004E   F5..         MOV     ?V0 + 5,A
   1140          
   1141              // limit the size of the list
   1142              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR     C
   \   000051   9404         SUBB    A,#0x4
   \   000053   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1143                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV     ?V0 + 5,#0x3
   1144          
   1145              // Allocate the memory to build the table
   1146              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1147                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV     A,?V0 + 5
   \   00005A   75F01A       MOV     B,#0x1a
   \   00005D   A4           MUL     AB
   \   00005E   FA           MOV     R2,A
   \   00005F   ABF0         MOV     R3,B
   \   000061   12....       LCALL   ??osal_mem_alloc?relay
   \   000064   8A..         MOV     ?V0 + 6,R2
   \   000066   8B..         MOV     ?V0 + 7,R3
   1148          
   1149              if ( table != NULL )
   \   000068   EA           MOV     A,R2
   \   000069   7001         JNZ     ??ZDO_ProcessMgmtLqiReq_2
   \   00006B   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1150              {
   1151                x = 0;
   \   000071   75..00       MOV     ?V0 + 9,#0x0
   1152                item = table;
   \   000074   AE..         MOV     R6,?V0 + 6
   \   000076   AF..         MOV     R7,?V0 + 7
   1153                index = StartIndex;
   \   000078   85....       MOV     ?V0 + 4,?V0 + 12
   \   00007B   02....       LJMP    ??CrossCallReturnLabel_55 & 0xFFFF
   1154          
   1155                // Loop through associated items and build list
   1156                for ( ; x < numItems; x++ )
   1157                {
   1158                  if ( index < aItems )
   1159                  {
   1160                    // get next associated device
   1161                    aDevice = AssocFindDevice( index++ );
   1162          
   1163                    // set basic fields
   1164                    item->panID   = _NIB.nwkPanId;
   1165                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1166                    item->nwkAddr = aDevice->shortAddr;
   1167                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1168                    item->depth   = 0xFF;
   1169                    item->lqi     = aDevice->linkInfo.rxLqi;
   1170          
   1171                    // set extented address
   1172                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1173                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1174          
   1175                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1176                    {
   1177                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1178                    }
   1179                    else
   1180                    {
   1181                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007E                ; Setup parameters for call to function osal_memset
   \   00007E   7C08         MOV     R4,#0x8
   \   000080   7D00         MOV     R5,#0x0
   \   000082   79FF         MOV     R1,#-0x1
   \   000084   AA..         MOV     R2,?V0 + 10
   \   000086   AB..         MOV     R3,?V0 + 11
   \   000088   12....       LCALL   ??osal_memset?relay
   1182                    }
   1183          
   1184                    // use association info to set other fields
   1185                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   00008B   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00008E   EE           MOV     A,R6
   \   00008F   2416         ADD     A,#0x16
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   3400         ADDC    A,#0x0
   \   000095   FB           MOV     R3,A
   \   000096   EE           MOV     A,R6
   \   000097   2415         ADD     A,#0x15
   \   000099   FC           MOV     R4,A
   \   00009A   EF           MOV     A,R7
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   FD           MOV     R5,A
   \   00009E   EE           MOV     A,R6
   \   00009F   2414         ADD     A,#0x14
   \   0000A1   F5..         MOV     ?V0 + 10,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   3400         ADDC    A,#0x0
   \   0000A6   F5..         MOV     ?V0 + 11,A
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   7036         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1186                    {
   1187                      if (  aDevice->shortAddr == 0 )
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000BA   700A         JNZ     ??ZDO_ProcessMgmtLqiReq_8
   1188                      {
   1189                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000BC   E4           CLR     A
   \   0000BD   85..82       MOV     DPL,?V0 + 10
   \   0000C0   85..83       MOV     DPH,?V0 + 11
   \   0000C3   F0           MOVX    @DPTR,A
   1190                        item->depth = 0;
   \   0000C4   800E         SJMP    ??ZDO_ProcessMgmtLqiReq_9
   1191                      }
   1192                      else
   1193                      {
   1194                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   85..82       MOV     DPL,?V0 + 10
   \   0000CB   85..83       MOV     DPH,?V0 + 11
   \   0000CE   F0           MOVX    @DPTR,A
   1195                        item->depth = _NIB.nodeDepth - 1;
   \   0000CF   90....       MOV     DPTR,#(_NIB + 52)
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0000D4   85..82       MOV     DPL,?V0 + 2
   \   0000D7   85..83       MOV     DPH,?V0 + 3
   \   0000DA   F0           MOVX    @DPTR,A
   1196                      }
   1197          
   1198                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   0000DB   7402         MOV     A,#0x2
   \   0000DD   8C82         MOV     DPL,R4
   \   0000DF   8D83         MOV     DPH,R5
   \   0000E1   F0           MOVX    @DPTR,A
   1199                      item->relation = ZDP_MGMT_REL_PARENT;
   \   0000E2   E4           CLR     A
   \   0000E3   8030         SJMP    ??ZDO_ProcessMgmtLqiReq_10
   1200                    }
   1201                    else
   1202                    {
   1203                      // If not parent, then it's a child
   1204                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000E5   90....       MOV     DPTR,#(_NIB + 52)
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   04           INC     A
   \   0000EA   85..82       MOV     DPL,?V0 + 2
   \   0000ED   85..83       MOV     DPH,?V0 + 3
   \   0000F0   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   1205          
   1206                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_477:
   \   0000F3   C3           CLR     C
   \   0000F4   9403         SUBB    A,#0x3
   \   0000F6   4003         JC      $+5
   \   0000F8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   1207                      {
   1208                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   85..82       MOV     DPL,?V0 + 10
   \   000100   85..83       MOV     DPH,?V0 + 11
   \   000103   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   1209          
   1210                        if ( aDevice->nodeRelation == CHILD_RFD )
   \                     ??CrossCallReturnLabel_478:
   \   000106   6401         XRL     A,#0x1
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   1211                        {
   1212                          item->rxOnIdle = FALSE;
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   00010D   E4           CLR     A
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   00010E   8C82         MOV     DPL,R4
   \   000110   8D83         MOV     DPH,R5
   \   000112   F0           MOVX    @DPTR,A
   1213                        }
   1214                        else
   1215                        {
   1216                          item->rxOnIdle = TRUE;
   1217                        }
   1218                      }
   1219                      else
   1220                      {
   1221                        item->devType = ZDP_MGMT_DT_ROUTER;
   1222          
   1223                        if ( aDevice->nodeRelation == CHILD_FFD )
   1224                        {
   1225                          item->rxOnIdle = FALSE;
   1226                        }
   1227                        else
   1228                        {
   1229                          item->rxOnIdle = TRUE;
   1230                        }
   1231                      }
   1232          
   1233                      item->relation = ZDP_MGMT_REL_CHILD;
   \   000113   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000115   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000118   E5..         MOV     A,?V0 + 9
   \   00011A   C3           CLR     C
   \   00011B   95..         SUBB    A,?V0 + 5
   \   00011D   4003         JC      $+5
   \   00011F   02....       LJMP    ??CrossCallReturnLabel_56 & 0xFFFF
   \   000122   E5..         MOV     A,?V0 + 4
   \   000124   C3           CLR     C
   \   000125   95..         SUBB    A,?V0 + 8
   \   000127   4003         JC      $+5
   \   000129   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \   00012C                ; Setup parameters for call to function AssocFindDevice
   \   00012C   A9..         MOV     R1,?V0 + 4
   \   00012E   12....       LCALL   ??AssocFindDevice?relay
   \   000131   8A..         MOV     ?V0 + 0,R2
   \   000133   8B..         MOV     ?V0 + 1,R3
   \   000135   05..         INC     ?V0 + 4
   \   000137   90....       MOV     DPTR,#(_NIB + 33)
   \   00013A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00013D   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000140   EE           MOV     A,R6
   \   000141   2412         ADD     A,#0x12
   \   000143   F582         MOV     DPL,A
   \   000145   EF           MOV     A,R7
   \   000146   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000149   E8           MOV     A,R0
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   A3           INC     DPTR
   \   00014C   E9           MOV     A,R1
   \   00014D   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000150   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000153   74FF         MOV     A,#-0x1
   \   000155   85..82       MOV     DPL,?V0 + 2
   \   000158   85..83       MOV     DPH,?V0 + 3
   \   00015B   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   C0E0         PUSH    A
   \   000169   EE           MOV     A,R6
   \   00016A   2419         ADD     A,#0x19
   \   00016C   F582         MOV     DPL,A
   \   00016E   EF           MOV     A,R7
   \   00016F   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000172   D0E0         POP     A
   \   000174   F0           MOVX    @DPTR,A
   \   000175   7401         MOV     A,#0x1
   \   000177   12....       LCALL   ?XSTACK_DISP0_8
   \   00017A   E4           CLR     A
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   00017F   7402         MOV     A,#0x2
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000187   EE           MOV     A,R6
   \   000188   240A         ADD     A,#0xa
   \   00018A   F5..         MOV     ?V0 + 10,A
   \   00018C   EF           MOV     A,R7
   \   00018D   3400         ADDC    A,#0x0
   \   00018F   F5..         MOV     ?V0 + 11,A
   \   000191                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000191   7401         MOV     A,#0x1
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   AA82         MOV     R2,DPL
   \   000198   AB83         MOV     R3,DPH
   \   00019A   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   00019D   E9           MOV     A,R1
   \   00019E   6401         XRL     A,#0x1
   \   0001A0   6003         JZ      $+5
   \   0001A2   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0001A5                ; Setup parameters for call to function sAddrExtCpy
   \   0001A5   7404         MOV     A,#0x4
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   AC82         MOV     R4,DPL
   \   0001AC   AD83         MOV     R5,DPH
   \   0001AE   AA..         MOV     R2,?V0 + 10
   \   0001B0   AB..         MOV     R3,?V0 + 11
   \   0001B2   12....       LCALL   ??sAddrExtCpy?relay
   \   0001B5   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   85..82       MOV     DPL,?V0 + 10
   \   0001BD   85..83       MOV     DPH,?V0 + 11
   \   0001C0   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   0001C3   6403         XRL     A,#0x3
   \   0001C5   7003         JNZ     $+5
   \   0001C7   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0001CA   7401         MOV     A,#0x1
   \   0001CC   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   1234                    }
   1235          
   1236                    item++;
   1237                  }
   1238                  else
   1239                  {
   1240                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001CF   E5..         MOV     A,?V0 + 8
   \   0001D1   C3           CLR     C
   \   0001D2   95..         SUBB    A,?V0 + 12
   \   0001D4   4005         JC      ??ZDO_ProcessMgmtLqiReq_16
   1241                      // Start with 1st neighbor
   1242                      index = 0;
   \   0001D6   75..00       MOV     ?V0 + 4,#0x0
   \   0001D9   8018         SJMP    ??ZDO_ProcessMgmtLqiReq_17
   1243                    else
   1244                      // Start with >1st neighbor
   1245                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001DB   E5..         MOV     A,?V0 + 12
   \   0001DD   C3           CLR     C
   \   0001DE   95..         SUBB    A,?V0 + 8
   \   0001E0   F5..         MOV     ?V0 + 4,A
   \   0001E2   800F         SJMP    ??ZDO_ProcessMgmtLqiReq_17
   1246                    break;
   1247                  }
   1248                }
   1249          
   1250                // Loop through neighbor items and finish list
   1251                for ( ; x < numItems; x++ )
   1252                {
   1253                  // Add next neighbor table item
   1254                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1255          
   1256                  // set ZDP_MgmtLqiItem_t fields
   1257                  item->panID    = entry.panId;
   1258                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1259                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1260                  item->nwkAddr  = entry.neighborAddress;
   1261                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1262                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1263                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1264                  item->depth    = 0xFF;
   1265                  item->lqi      = entry.linkInfo.rxLqi;
   1266          
   1267                  if ( item->nwkAddr == 0 )
   1268                  {
   1269                    item->devType = ZDP_MGMT_DT_COORD;
   1270                  }
   1271                  else
   1272                  {
   1273                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001E4   7401         MOV     A,#0x1
   1274                  }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0001E6   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001E9   E5..         MOV     A,?V0 + 9
   \   0001EB   C3           CLR     C
   \   0001EC   95..         SUBB    A,?V0 + 5
   \   0001EE   4003         JC      $+5
   \   0001F0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001F3                ; Setup parameters for call to function NLME_GetRequest
   \   0001F3   740E         MOV     A,#0xe
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   AC82         MOV     R4,DPL
   \   0001FA   AD83         MOV     R5,DPH
   \   0001FC   AA..         MOV     R2,?V0 + 4
   \   0001FE   7B00         MOV     R3,#0x0
   \   000200   7987         MOV     R1,#-0x79
   \   000202   12....       LCALL   ??NLME_GetRequest?relay
   \   000205   05..         INC     ?V0 + 4
   \   000207   7418         MOV     A,#0x18
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00020F                ; Setup parameters for call to function osal_memset
   \   00020F   7C08         MOV     R4,#0x8
   \   000211   7D00         MOV     R5,#0x0
   \   000213   79FF         MOV     R1,#-0x1
   \   000215   EE           MOV     A,R6
   \   000216   240A         ADD     A,#0xa
   \   000218   FA           MOV     R2,A
   \   000219   EF           MOV     A,R7
   \   00021A   3400         ADDC    A,#0x0
   \   00021C   FB           MOV     R3,A
   \   00021D   12....       LCALL   ??osal_memset?relay
   \   000220   EE           MOV     A,R6
   \   000221   2412         ADD     A,#0x12
   \   000223   F8           MOV     R0,A
   \   000224   EF           MOV     A,R7
   \   000225   3400         ADDC    A,#0x0
   \   000227   F9           MOV     R1,A
   \   000228   740E         MOV     A,#0xe
   \   00022A   12....       LCALL   ?XSTACK_DISP0_8
   \   00022D   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000230   8882         MOV     DPL,R0
   \   000232   8983         MOV     DPH,R1
   \   000234   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000237   EE           MOV     A,R6
   \   000238   2415         ADD     A,#0x15
   \   00023A   F582         MOV     DPL,A
   \   00023C   EF           MOV     A,R7
   \   00023D   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000240   7402         MOV     A,#0x2
   \   000242   F0           MOVX    @DPTR,A
   \   000243   EE           MOV     A,R6
   \   000244   2416         ADD     A,#0x16
   \   000246   F582         MOV     DPL,A
   \   000248   EF           MOV     A,R7
   \   000249   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   00024C   7403         MOV     A,#0x3
   \   00024E   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000251   F582         MOV     DPL,A
   \   000253   EF           MOV     A,R7
   \   000254   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000257   74FF         MOV     A,#-0x1
   \   000259   F0           MOVX    @DPTR,A
   \   00025A   741D         MOV     A,#0x1d
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   C0E0         PUSH    A
   \   000262   EE           MOV     A,R6
   \   000263   2419         ADD     A,#0x19
   \   000265   F582         MOV     DPL,A
   \   000267   EF           MOV     A,R7
   \   000268   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   00026B   D0E0         POP     A
   \   00026D   F0           MOVX    @DPTR,A
   \   00026E   EE           MOV     A,R6
   \   00026F   2414         ADD     A,#0x14
   \   000271   FA           MOV     R2,A
   \   000272   EF           MOV     A,R7
   \   000273   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000276   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_20
   \   000278   A3           INC     DPTR
   \   000279   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   00027A   6003         JZ      $+5
   \   00027C   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
   \   00027F   E4           CLR     A
   \   000280   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   1275          
   1276                  item++;
   1277                }
   1278              }
   1279            }
   1280            else
   1281            {
   1282              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000283   75..00       MOV     ?V0 + 5,#0x0
   1283            }
   1284          
   1285            // Send response
   1286            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1287                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000286                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000286   75..00       MOV     ?V0 + 0,#0x0
   \   000289   78..         MOV     R0,#?V0 + 0
   \   00028B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028E   78..         MOV     R0,#?V0 + 6
   \   000290   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000293   E5..         MOV     A,?V0 + 5
   \   000295   F5..         MOV     ?V0 + 0,A
   \   000297   78..         MOV     R0,#?V0 + 0
   \   000299   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029C   E5..         MOV     A,?V0 + 12
   \   00029E   F5..         MOV     ?V0 + 0,A
   \   0002A0   78..         MOV     R0,#?V0 + 0
   \   0002A2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A5   7405         MOV     A,#0x5
   \   0002A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AA   E0           MOVX    A,@DPTR
   \   0002AB   FD           MOV     R5,A
   \   0002AC   7C00         MOV     R4,#0x0
   \   0002AE   E5..         MOV     A,?V0 + 14
   \   0002B0   2402         ADD     A,#0x2
   \   0002B2   FA           MOV     R2,A
   \   0002B3   E5..         MOV     A,?V0 + 15
   \   0002B5   3400         ADDC    A,#0x0
   \   0002B7   FB           MOV     R3,A
   \   0002B8   E5..         MOV     A,?V0 + 14
   \   0002BA   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0002BD   E5..         MOV     A,?V0 + 15
   \   0002BF   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   0002C2   12....       LCALL   ??ZDP_MgmtLqiRsp?relay
   \   0002C5   7405         MOV     A,#0x5
   \   0002C7   12....       LCALL   ?DEALLOC_XSTACK8
   1288          
   1289            if ( table )
   \   0002CA   E5..         MOV     A,?V0 + 6
   \   0002CC   7002         JNZ     ??ZDO_ProcessMgmtLqiReq_21
   \   0002CE   E5..         MOV     A,?V0 + 7
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0002D0   6007         JZ      ??ZDO_ProcessMgmtLqiReq_22
   1290            {
   1291              osal_mem_free( table );
   \   0002D2                ; Setup parameters for call to function osal_mem_free
   \   0002D2   AA..         MOV     R2,?V0 + 6
   \   0002D4   AB..         MOV     R3,?V0 + 7
   \   0002D6   12....       LCALL   ??osal_mem_free?relay
   1292            }
   1293          }
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   0002D9   7425         MOV     A,#0x25
   \   0002DB   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   241A         ADD     A,#0x1a
   \   000008   FE           MOV     R6,A
   \   000009   EF           MOV     A,R7
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FF           MOV     R7,A
   \   00000D   05..         INC     ?V0 + 9
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   EF           MOV     A,R7
   \   000007   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function sAddrExtCpy
   \   000008                ; Setup parameters for call to function sAddrExtCpy
   \   000008   7C..         MOV     R4,#((_NIB + 53) & 0xff)
   \   00000A   7D..         MOV     R5,#(((_NIB + 53) >> 8) & 0xff)
   \   00000C   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   00000F   12....       LCALL   ??sAddrExtCpy?relay
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine192_0
   \   000006                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003                REQUIRE ??Subroutine197_0
   \   000003                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000003                REQUIRE ??Subroutine198_0
   \   000003                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2404         ADD     A,#0x4
   \   000004   F8           MOV     R0,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
   1294          
   1295          /*********************************************************************
   1296           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1297           *
   1298           * @brief       This function handles parsing the incoming Management
   1299           *              Network Discover request and starts the request.
   1300           *
   1301           * @param       inMsg - incoming message (request)
   1302           *
   1303           * @return      none
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1306          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1307            NLME_ScanFields_t scan;
   1308            uint8             index;
   1309            uint8             *msg;
   1310          
   1311            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine65 & 0xFFFF
   1312            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_106:
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?L_MOV_TO_X
   1313            msg += 4;
   \   00001C   12....       LCALL   ?Subroutine112 & 0xFFFF
   1314            scan.duration = *msg++;
   \                     ??CrossCallReturnLabel_329:
   \   00001F   C0E0         PUSH    A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   D0E0         POP     A
   \   000028   12....       LCALL   ?Subroutine53 & 0xFFFF
   1315            index         = *msg;
   1316            scan.scanType = ZMAC_ACTIVE_SCAN;
   \                     ??CrossCallReturnLabel_86:
   \   00002B   7405         MOV     A,#0x5
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
   1317            scan.scanApp  = NLME_DISC_SCAN;
   \   000033   7406         MOV     A,#0x6
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   1318          
   1319            // Save off the information to be used for the response
   1320            zdappMgmtNwkDiscReqInProgress          = true;
   \   00003B   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00003E   F0           MOVX    @DPTR,A
   1321            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00003F   7402         MOV     A,#0x2
   \   000041   90....       MOV     DPTR,#(zdappMgmtNwkDiscRspAddr + 8)
   \   000044   12....       LCALL   ?Subroutine47 & 0xFFFF
   1322            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_72:
   \   000047   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00004A   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00004D   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   1323            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_319:
   \   000050   EA           MOV     A,R2
   \   000051   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000054   F0           MOVX    @DPTR,A
   1324            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000055   E5..         MOV     A,?V0 + 0
   \   000057   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00005A   E5..         MOV     A,?V0 + 1
   \   00005C   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00005F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   000062   12....       LCALL   ?Subroutine38 & 0xFFFF
   1325          
   1326            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \                     ??CrossCallReturnLabel_54:
   \   000065   12....       LCALL   ??NLME_NwkDiscReq2?relay
   \   000068   E9           MOV     A,R1
   \   000069   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1327            {
   1328              NLME_NwkDiscTerm();
   \   00006B                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00006B   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1329          
   1330              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1331            }
   1332          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00006E   7407         MOV     A,#0x7
   \   000070                REQUIRE ?Subroutine11
   \   000070                ; // Fall through to label ?Subroutine11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine199_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FE           MOV     R6,A
   \   000004                REQUIRE ??Subroutine191_0
   \   000004                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000003                REQUIRE ??Subroutine216_0
   \   000003                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   7904         MOV     R1,#0x4
   \   000002   EE           MOV     A,R6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   FB           MOV     R3,A
   \   000006   12....       LCALL   ??osal_build_uint32?relay
   \   000009   8A..         MOV     ?V0 + 4,R2
   \   00000B   8B..         MOV     ?V0 + 5,R3
   \   00000D   8C..         MOV     ?V0 + 6,R4
   \   00000F   8D..         MOV     ?V0 + 7,R5
   \   000011   22           RET
   1333          
   1334          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1335          /*********************************************************************
   1336           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1337           *
   1338           * @brief       This function finishes the processing of the Management
   1339           *              Network Discover Request and generates the response.
   1340           *
   1341           *   Note:      This function will limit the number of items returned
   1342           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1343           *
   1344           * @param       ResultCountSrcAddr - source of the request
   1345           * @param       msg - pointer to incoming message
   1346           * @param       SecurityUse -
   1347           *
   1348           * @return      none
   1349           */
   1350          void ZDO_FinishProcessingMgmtNwkDiscReq( byte ResultCount,
   1351                                                   networkDesc_t *NetworkList )
   1352          {
   1353            byte count, i;
   1354            networkDesc_t *newDesc = NULL, *pList = NetworkList;
   1355          
   1356            if ( ZSTACK_ROUTER_BUILD )
   1357            {
   1358              // Look for my PanID.
   1359              while ( pList )
   1360              {
   1361                if ( pList->panId == _NIB.nwkPanId )
   1362                {
   1363                  break;
   1364                }
   1365          
   1366          
   1367                if ( !pList->nextDesc )
   1368                {
   1369                  break;
   1370                }
   1371                pList = pList->nextDesc;
   1372              }
   1373          
   1374          
   1375              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1376              // prepend it.
   1377              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1378              {
   1379                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1380                if ( newDesc )
   1381                {
   1382                  byte pJoin;
   1383          
   1384                  newDesc->panId = _NIB.nwkPanId;
   1385                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1386                  newDesc->beaconOrder = _NIB.beaconOrder;
   1387                  newDesc->superFrameOrder = _NIB.superFrameOrder;
   1388                  newDesc->version = NLME_GetProtocolVersion();
   1389                  newDesc->stackProfile = zgStackProfile;
   1390                  //Extended PanID
   1391                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1392          
   1393                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1394                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1395                                                     INVALID_NODE_ADDR);
   1396          
   1397                  newDesc->nextDesc = NetworkList;
   1398                  NetworkList = newDesc;
   1399                  ResultCount++;
   1400                }
   1401              }
   1402            }
   1403          
   1404            // Calc the count and apply a max count.
   1405            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1406            {
   1407              count = 0;
   1408            }
   1409            else
   1410            {
   1411              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1412              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1413              {
   1414                count = ZDO_MAX_NWKDISC_ITEMS;
   1415              }
   1416          
   1417              // Move the list pointer up to the start index.
   1418              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1419              {
   1420                NetworkList = NetworkList->nextDesc;
   1421              }
   1422            }
   1423          
   1424            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1425                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1426                                zdappMgmtNwkDiscStartIndex,
   1427                                count,
   1428                                NetworkList,
   1429                                false );
   1430          
   1431            if ( ZSTACK_ROUTER_BUILD )
   1432            {
   1433              if ( newDesc != NULL )
   1434              {
   1435                osal_mem_free( newDesc );
   1436              }
   1437            }
   1438          
   1439            NLME_NwkDiscTerm();
   1440          }
   1441          #endif
   1442          
   1443          /*********************************************************************
   1444           * @fn          ZDO_ProcessMgmtRtgReq
   1445           *
   1446           * @brief       This function finishes the processing of the Management
   1447           *              Routing Request and generates the response.
   1448           *
   1449           *   Note:      This function will limit the number of items returned
   1450           *              to ZDO_MAX_RTG_ITEMS items.
   1451           *
   1452           * @param       inMsg - incoming message (request)
   1453           *
   1454           * @return      none
   1455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1456          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1457          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   1458            byte x;
   1459            byte maxNumItems;
   1460            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1461            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V0 + 6,R6
   \   000012   8E..         MOV     ?V0 + 7,R6
   1462            rtgItem_t *pList;
   1463            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000017   FF           MOV     R7,A
   1464          
   1465            // Get the number of table items
   1466            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000018                ; Setup parameters for call to function NLME_GetRequest
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799D         MOV     R1,#-0x63
   \   000028   12....       LCALL   ??NLME_GetRequest?relay
   1467          
   1468            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   EF           MOV     A,R7
   \   000034   C3           CLR     C
   \   000035   9A           SUBB    A,R2
   \   000036   507E         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1469            {
   1470              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C3           CLR     C
   \   00003A   9F           SUBB    A,R7
   \   00003B   FE           MOV     R6,A
   1471          
   1472              // limit the size of the list
   1473              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003C   C3           CLR     C
   \   00003D   940B         SUBB    A,#0xb
   \   00003F   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1474              {
   1475                numItems = ZDO_MAX_RTG_ITEMS;
   \   000041   7E0A         MOV     R6,#0xa
   1476              }
   1477          
   1478              // Allocate the memory to build the table
   1479              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   EE           MOV     A,R6
   \   000044   75F006       MOV     B,#0x6
   \   000047   A4           MUL     AB
   \   000048   FA           MOV     R2,A
   \   000049   ABF0         MOV     R3,B
   \   00004B   12....       LCALL   ??osal_mem_alloc?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   8A..         MOV     ?V0 + 6,R2
   \   000054   8B..         MOV     ?V0 + 7,R3
   1480          
   1481              if ( pBuf != NULL )
   \   000056   EA           MOV     A,R2
   \   000057   7001         JNZ     ??ZDO_ProcessMgmtRtgReq_2
   \   000059   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   00005A   6058         JZ      ??ZDO_ProcessMgmtRtgReq_3
   1482              {
   1483                // Convert buffer to list
   1484                pList = (rtgItem_t *)pBuf;
   1485          
   1486                // Loop through items and build list
   1487                for ( x = 0; x < numItems; x++ )
   \   00005C   75..00       MOV     ?V0 + 2,#0x0
   \   00005F   8022         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   1488                {
   1489                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1490          
   1491                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1492                  switch( pList->status )
   1493                  {
   1494                    case RT_ACTIVE:
   1495                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000061   E4           CLR     A
   \   000062   800D         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1496                      break;
   1497          
   1498                    case RT_DISC:
   1499                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   000064   7401         MOV     A,#0x1
   \   000066   8009         SJMP    ??ZDO_ProcessMgmtRtgReq_6
   1500                      break;
   1501          
   1502                    case RT_LINK_FAIL:
   1503                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   000068   7402         MOV     A,#0x2
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   F0           MOVX    @DPTR,A
   1504          
   1505                    case RT_INIT:
   1506                    case RT_REPAIR:
   1507                    default:
   1508                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   00006F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   F0           MOVX    @DPTR,A
   1509                      break;
   1510                  }
   1511          
   1512                  // Increment pointer to next record
   1513                  pList++;
   \   000076   E5..         MOV     A,?V0 + 0
   \   000078   2406         ADD     A,#0x6
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   E5..         MOV     A,?V0 + 1
   \   00007E   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000081   05..         INC     ?V0 + 2
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   C3           CLR     C
   \   000086   9E           SUBB    A,R6
   \   000087   502D         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000089                ; Setup parameters for call to function NLME_GetRequest
   \   000089   AC..         MOV     R4,?V0 + 0
   \   00008B   AD..         MOV     R5,?V0 + 1
   \   00008D   85....       MOV     ?V0 + 8,?V0 + 2
   \   000090   EF           MOV     A,R7
   \   000091   25..         ADD     A,?V0 + 8
   \   000093   FA           MOV     R2,A
   \   000094   E4           CLR     A
   \   000095   3400         ADDC    A,#0x0
   \   000097   FB           MOV     R3,A
   \   000098   798B         MOV     R1,#-0x75
   \   00009A   12....       LCALL   ??NLME_GetRequest?relay
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   2405         ADD     A,#0x5
   \   0000A1   F8           MOV     R0,A
   \   0000A2   E5..         MOV     A,?V0 + 1
   \   0000A4   12....       LCALL   ?Subroutine123 & 0xFFFF
   1514                }
   1515              }
   \                     ??CrossCallReturnLabel_204:
   \   0000A7   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for ZDO_ProcessMgmtRtgReq>_0`:
   \   0000AA   01           DB        1
   \   0000AB   02           DB        2
   \   0000AC   ....         DW        ??ZDO_ProcessMgmtRtgReq_9
   \   0000AE   ....         DW        ??ZDO_ProcessMgmtRtgReq_5
   \   0000B0   ....         DW        ??ZDO_ProcessMgmtRtgReq_7
   \   0000B2   ....         DW        ??ZDO_ProcessMgmtRtgReq_8
   1516              else
   1517              {
   1518                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   0000B4   7E00         MOV     R6,#0x0
   1519              }
   1520            }
   1521          
   1522            // Send response
   1523            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1524                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000B6                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000B6   75..00       MOV     ?V0 + 0,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   78..         MOV     R0,#?V0 + 6
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   EE           MOV     A,R6
   \   0000C4   F5..         MOV     ?V0 + 0,A
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   EF           MOV     A,R7
   \   0000CC   F5..         MOV     ?V0 + 0,A
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D3   7405         MOV     A,#0x5
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   FD           MOV     R5,A
   \   0000DA   7C00         MOV     R4,#0x0
   \   0000DC   E5..         MOV     A,?V0 + 4
   \   0000DE   2402         ADD     A,#0x2
   \   0000E0   FA           MOV     R2,A
   \   0000E1   E5..         MOV     A,?V0 + 5
   \   0000E3   3400         ADDC    A,#0x0
   \   0000E5   FB           MOV     R3,A
   \   0000E6   E5..         MOV     A,?V0 + 4
   \   0000E8   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000EB   E5..         MOV     A,?V0 + 5
   \   0000ED   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000F0   12....       LCALL   ??ZDP_MgmtRtgRsp?relay
   \   0000F3   7405         MOV     A,#0x5
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
   1525          
   1526            if ( pBuf )
   \   0000F8   E5..         MOV     A,?V0 + 6
   \   0000FA   7002         JNZ     ??ZDO_ProcessMgmtRtgReq_10
   \   0000FC   E5..         MOV     A,?V0 + 7
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000FE   6007         JZ      ??ZDO_ProcessMgmtRtgReq_11
   1527            {
   1528              osal_mem_free( pBuf );
   \   000100                ; Setup parameters for call to function osal_mem_free
   \   000100   AA..         MOV     R2,?V0 + 6
   \   000102   AB..         MOV     R3,?V0 + 7
   \   000104   12....       LCALL   ??osal_mem_free?relay
   1529            }
   1530          }
   \                     ??ZDO_ProcessMgmtRtgReq_11:
   \   000107   7401         MOV     A,#0x1
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010C                REQUIRE ?Subroutine8
   \   00010C                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDO_ProcessMgmtBindReq
   1534           *
   1535           * @brief       This function finishes the processing of the Management
   1536           *              Bind Request and generates the response.
   1537           *
   1538           *   Note:      This function will limit the number of items returned
   1539           *              to ZDO_MAX_BIND_ITEMS items.
   1540           *
   1541           * @param       inMsg - incoming message (request)
   1542           *
   1543           * @return      none
   1544           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1545          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1546          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   1547          #if defined ( REFLECTOR )
   1548            byte x;
   1549            uint16 maxNumItems;
   1550            uint16 numItems;
   1551            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   \   000011   75..00       MOV     ?V0 + 1,#0x0
   1552            apsBindingItem_t *pList;
   1553            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000017   F5..         MOV     ?V0 + 4,A
   1554            uint8 status;
   1555          
   1556            // Get the number of table items
   1557            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000019                ; Setup parameters for call to function APSME_GetRequest
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AC82         MOV     R4,DPL
   \   000021   AD83         MOV     R5,DPH
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   79A3         MOV     R1,#-0x5d
   \   000029   12....       LCALL   ??APSME_GetRequest?relay
   1558          
   1559            if ( maxNumItems > StartIndex )
   \   00002C   85..82       MOV     DPL,?V0 + 4
   \   00002F   AA82         MOV     R2,DPL
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00003A   C3           CLR     C
   \   00003B   EA           MOV     A,R2
   \   00003C   98           SUBB    A,R0
   \   00003D   E4           CLR     A
   \   00003E   99           SUBB    A,R1
   \   00003F   4003         JC      $+5
   \   000041   02....       LJMP    ??ZDO_ProcessMgmtBindReq_0 & 0xFFFF
   1560            {
   1561              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   9A           SUBB    A,R2
   \   00004D   FE           MOV     R6,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   9400         SUBB    A,#0x0
   \   000052   FF           MOV     R7,A
   1562            }
   1563            else
   1564            {
   1565              numItems = 0;
   1566            }
   1567          
   1568            // limit the size of the list
   1569            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000053   C3           CLR     C
   \   000054   EE           MOV     A,R6
   \   000055   9404         SUBB    A,#0x4
   \   000057   EF           MOV     A,R7
   \   000058   9400         SUBB    A,#0x0
   \   00005A   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1570            {
   1571              numItems = ZDO_MAX_BIND_ITEMS;
   \   00005C   7E03         MOV     R6,#0x3
   \   00005E   7F00         MOV     R7,#0x0
   \   000060   8006         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1572            }
   1573          
   1574            // Allocate the memory to build the table
   1575            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000062   EE           MOV     A,R6
   \   000063   7001         JNZ     ??ZDO_ProcessMgmtBindReq_3
   \   000065   EF           MOV     A,R7
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000066   605C         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   EA           MOV     A,R2
   \   00006D   75F015       MOV     B,#0x15
   \   000070   A4           MUL     AB
   \   000071   FA           MOV     R2,A
   \   000072   ACF0         MOV     R4,B
   \   000074   75F015       MOV     B,#0x15
   \   000077   EB           MOV     A,R3
   \   000078   A4           MUL     AB
   \   000079   2C           ADD     A,R4
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   ??osal_mem_alloc?relay
   \   00007E   8A..         MOV     ?V0 + 2,R2
   \   000080   8B..         MOV     ?V0 + 3,R3
   \   000082   8A..         MOV     ?V0 + 0,R2
   \   000084   8B..         MOV     ?V0 + 1,R3
   \   000086   EA           MOV     A,R2
   \   000087   7001         JNZ     ??ZDO_ProcessMgmtBindReq_4
   \   000089   EB           MOV     A,R3
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00008A   6038         JZ      ??ZDO_ProcessMgmtBindReq_0
   1576            {
   1577              status = ZSuccess;
   \   00008C   75..00       MOV     ?V0 + 5,#0x0
   1578          
   1579              // Convert buffer to list
   1580              pList = (apsBindingItem_t *)pBuf;
   1581          
   1582              // Loop through items and build list
   1583              for ( x = 0; x < numItems; x++ )
   \   00008F   75..00       MOV     ?V0 + 6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000092   85....       MOV     ?V0 + 8,?V0 + 6
   \   000095   C3           CLR     C
   \   000096   E5..         MOV     A,?V0 + 8
   \   000098   9E           SUBB    A,R6
   \   000099   E4           CLR     A
   \   00009A   9F           SUBB    A,R7
   \   00009B   502C         JNC     ??ZDO_ProcessMgmtBindReq_6
   1584              {
   1585                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   00009D                ; Setup parameters for call to function APSME_GetRequest
   \   00009D   AC..         MOV     R4,?V0 + 2
   \   00009F   AD..         MOV     R5,?V0 + 3
   \   0000A1   85....       MOV     ?V0 + 10,?V0 + 6
   \   0000A4   85....       MOV     ?V0 + 8,?V0 + 4
   \   0000A7   E5..         MOV     A,?V0 + 8
   \   0000A9   25..         ADD     A,?V0 + 10
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E4           CLR     A
   \   0000AD   3400         ADDC    A,#0x0
   \   0000AF   FB           MOV     R3,A
   \   0000B0   79A2         MOV     R1,#-0x5e
   \   0000B2   12....       LCALL   ??APSME_GetRequest?relay
   1586                pList++;
   \   0000B5   E5..         MOV     A,?V0 + 2
   \   0000B7   2415         ADD     A,#0x15
   \   0000B9   F5..         MOV     ?V0 + 2,A
   \   0000BB   E5..         MOV     A,?V0 + 3
   \   0000BD   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   1587              }
   \                     ??CrossCallReturnLabel_533:
   \   0000C0   05..         INC     ?V0 + 6
   \   0000C2   80CE         SJMP    ??ZDO_ProcessMgmtBindReq_5
   1588          
   1589            }
   1590            else
   1591            {
   1592              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000C4   75..8B       MOV     ?V0 + 5,#-0x75
   1593              numItems = 0;
   \   0000C7   7E00         MOV     R6,#0x0
   1594            }
   1595          
   1596            // Send response
   1597            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1598                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000C9                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000C9   75..00       MOV     ?V0 + 2,#0x0
   \   0000CC   78..         MOV     R0,#?V0 + 2
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   EE           MOV     A,R6
   \   0000D7   F5..         MOV     ?V0 + 2,A
   \   0000D9   78..         MOV     R0,#?V0 + 2
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DE   E5..         MOV     A,?V0 + 4
   \   0000E0   F5..         MOV     ?V0 + 2,A
   \   0000E2   78..         MOV     R0,#?V0 + 2
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FD           MOV     R5,A
   \   0000EE   AC..         MOV     R4,?V0 + 5
   \   0000F0   E5..         MOV     A,?V0 + 12
   \   0000F2   2402         ADD     A,#0x2
   \   0000F4   FA           MOV     R2,A
   \   0000F5   E5..         MOV     A,?V0 + 13
   \   0000F7   3400         ADDC    A,#0x0
   \   0000F9   FB           MOV     R3,A
   \   0000FA   E5..         MOV     A,?V0 + 12
   \   0000FC   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000FF   E5..         MOV     A,?V0 + 13
   \   000101   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000104   12....       LCALL   ??ZDP_MgmtBindRsp?relay
   \   000107   7405         MOV     A,#0x5
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
   1599          
   1600            if ( pBuf )
   \   00010C   E5..         MOV     A,?V0 + 0
   \   00010E   7002         JNZ     ??ZDO_ProcessMgmtBindReq_7
   \   000110   E5..         MOV     A,?V0 + 1
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000112   6007         JZ      ??ZDO_ProcessMgmtBindReq_8
   1601            {
   1602              osal_mem_free( pBuf );
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV     R2,?V0 + 0
   \   000116   AB..         MOV     R3,?V0 + 1
   \   000118   12....       LCALL   ??osal_mem_free?relay
   1603            }
   1604          #else
   1605            (void)inMsg;
   1606          #endif
   1607          }
   \                     ??ZDO_ProcessMgmtBindReq_8:
   \   00011B   7402         MOV     A,#0x2
   \   00011D   02....       LJMP    ?Subroutine6 & 0xFFFF
   1608          
   1609          /*********************************************************************
   1610           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1611           *
   1612           * @brief       This function finishes the processing of the Management
   1613           *              Direct Join Request and generates the response.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1620          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine156 & 0xFFFF
   1621            uint8 *deviceAddr;
   1622            uint8 capInfo;
   1623            uint8 stat;
   1624          
   1625            // Parse the message
   1626            deviceAddr = inMsg->asdu;
   1627            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1628          
   1629            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_343:
   \   00000D   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??NLME_DirectJoinRequest?relay
   \   00001D   E9           MOV     A,R1
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   F0           MOVX    @DPTR,A
   1630          
   1631            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0 + 0,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   8582..       MOV     ?V0 + 0,DPL
   \   000035   8583..       MOV     ?V0 + 1,DPH
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..35       MOV     ?V0 + 0,#0x35
   \   000040   75..80       MOV     ?V0 + 1,#-0x80
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7901         MOV     R1,#0x1
   \   00004A   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1632          }
   \   000050                REQUIRE ?Subroutine12
   \   000050                ; // Fall through to label ?Subroutine12

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine181_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine193_0
   \   000004                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003                REQUIRE ??Subroutine194_0
   \   000003                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005                REQUIRE ??Subroutine195_0
   \   000005                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000003   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000006                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET
   1633          
   1634          /*********************************************************************
   1635           * @fn          ZDO_ProcessMgmtLeaveReq
   1636           *
   1637           * @brief       This function processes a Management Leave Request
   1638           *              and generates the response.
   1639           *
   1640           * @param       inMsg - incoming message (request)
   1641           *
   1642           * @return      none
   1643           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1644          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1645          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1646            NLME_LeaveReq_t req;
   1647            ZStatus_t       status;
   1648            uint8           option;
   1649            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine105 & 0xFFFF
   1650          
   1651            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1652                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_181:
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000017   E9           MOV     A,R1
   \   000018   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001A                ; Setup parameters for call to function sAddrExtCmp
   \   00001A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001A   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??sAddrExtCmp?relay
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1653            {
   1654              // Remove this device
   1655              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1656            }
   1657            else
   1658            {
   1659              // Remove child device
   1660              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   EE           MOV     A,R6
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EF           MOV     A,R7
   1661            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000040   12....       LCALL   ?Subroutine35 & 0xFFFF
   1662          
   1663            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_48:
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   1664            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000046   A2E6         MOV     C,0xE0 /* A   */.6
   \   000048   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1665            {
   1666              req.removeChildren = TRUE;
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
   1667            }
   1668          
   1669            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000052   EA           MOV     A,R2
   \   000053   A2E7         MOV     C,0xE0 /* A   */.7
   \   000055   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1670            {
   1671               req.rejoin = TRUE;
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
   1672            }
   1673          
   1674            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   00005F   7405         MOV     A,#0x5
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   1675          
   1676            status = NLME_LeaveReq( &req );
   \   000066                ; Setup parameters for call to function NLME_LeaveReq
   \   000066   7401         MOV     A,#0x1
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??NLME_LeaveReq?relay
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   F0           MOVX    @DPTR,A
   1677          
   1678            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00007A                ; Setup parameters for call to function ZDP_SendData
   \   00007A   75..00       MOV     ?V0 + 2,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   7401         MOV     A,#0x1
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   8582..       MOV     ?V0 + 2,DPL
   \   00008A   8583..       MOV     ?V0 + 3,DPH
   \   00008D   78..         MOV     R0,#?V0 + 2
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   75..34       MOV     ?V0 + 2,#0x34
   \   000095   75..80       MOV     ?V0 + 3,#-0x80
   \   000098   78..         MOV     R0,#?V0 + 2
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   7901         MOV     R1,#0x1
   \   00009F   E5..         MOV     A,?V0 + 0
   \   0000A1   2402         ADD     A,#0x2
   \   0000A3   FC           MOV     R4,A
   \   0000A4   E5..         MOV     A,?V0 + 1
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   FD           MOV     R5,A
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   240F         ADD     A,#0xf
   \   0000AD   FA           MOV     R2,A
   \   0000AE   E5..         MOV     A,?V0 + 1
   \   0000B0   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   1679          }
   \   0000B6   7406         MOV     A,#0x6
   \   0000B8   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
   1680          
   1681          
   1682          /*********************************************************************
   1683           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1684           *
   1685           * @brief       This function processes a Management Permit Join Request
   1686           *              and generates the response.
   1687           *
   1688           * @param       inMsg - incoming message (request)
   1689           *
   1690           * @return      none
   1691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1692          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1693          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine156 & 0xFFFF
   1694            uint8 stat;
   1695            uint8 duration;
   1696            uint8 tcsig;
   1697          
   1698            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1699            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1700          
   1701            // Set the network layer permit join duration
   1702            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_344:
   \   00000D   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??NLME_PermitJoiningRequest?relay
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   F0           MOVX    @DPTR,A
   1703          
   1704            // Handle the Trust Center Significance
   1705            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1706            {
   1707              if ( tcsig == TRUE )
   1708              {
   1709                ZDSecMgrPermitJoining( duration );
   1710              }
   1711            }
   1712          
   1713            // Send a response if unicast
   1714            if (inMsg->srcAddr.addr.shortAddr != NWK_BROADCAST_SHORTADDR)
   \   00001C   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   \   000023   E0           MOVX    A,@DPTR
   \   000024   64FF         XRL     A,#0xff
   \   000026   7004         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   64FF         XRL     A,#0xff
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00002C   602B         JZ      ??ZDO_ProcessMgmtPermitJoinReq_1
   1715            {
   1716              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002E                ; Setup parameters for call to function ZDP_SendData
   \   00002E   75..00       MOV     ?V0 + 0,#0x0
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   7401         MOV     A,#0x1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   8582..       MOV     ?V0 + 0,DPL
   \   00003E   8583..       MOV     ?V0 + 1,DPH
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..36       MOV     ?V0 + 0,#0x36
   \   000049   75..80       MOV     ?V0 + 1,#-0x80
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7901         MOV     R1,#0x1
   \   000053   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   1717            }
   \                     ??CrossCallReturnLabel_349:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   1718          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000059   02....       LJMP    ?Subroutine12 & 0xFFFF
   1719          
   1720          /*
   1721           * This function stub allows the next higher layer to be notified of
   1722           * a permit joining timeout.
   1723           */
   1724          /*********************************************************************
   1725           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1726           *
   1727           * @brief       This function stub allows the next higher layer to be
   1728           *              notified of a permit joining timeout. Currently, this
   1729           *              directly bypasses the APS layer.
   1730           *
   1731           * @param       none
   1732           *
   1733           * @return      none
   1734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1735          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1736          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1737            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1738            // Currently, only the ZDSecMgr needs to be notified
   1739            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1740            {
   1741              ZDSecMgrPermitJoiningTimeout();
   1742            }
   1743            #endif
   1744          }
   \   000000   02....       LJMP    ?BRET
   1745          
   1746          /*********************************************************************
   1747           * @fn          ZDO_ProcessUserDescReq
   1748           *
   1749           * @brief       This function finishes the processing of the User
   1750           *              Descriptor Request and generates the response.
   1751           *
   1752           * @param       inMsg - incoming message (request)
   1753           *
   1754           * @return      none
   1755           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1756          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1757          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine64 & 0xFFFF
   1758            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_297:
   \   00000D   F5..         MOV     ?V0 + 4,A
   \   00000F   E9           MOV     A,R1
   \   000010   F5..         MOV     ?V0 + 5,A
   1759            UserDescriptorFormat_t userDesc;
   1760          
   1761            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1762                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000012   EE           MOV     A,R6
   \   000013   240F         ADD     A,#0xf
   \   000015   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000018   EE           MOV     A,R6
   \   000019   2402         ADD     A,#0x2
   \   00001B   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   E0           MOVX    A,@DPTR
   \   000022   65..         XRL     A,?V0 + 4
   \   000024   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   65..         XRL     A,?V0 + 5
   \                     ??ZDO_ProcessUserDescReq_0:
   \   00002A   7061         JNZ     ??ZDO_ProcessUserDescReq_1
   \   00002C                ; Setup parameters for call to function osal_nv_read
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   8582..       MOV     ?V0 + 6,DPL
   \   000035   8583..       MOV     ?V0 + 7,DPH
   \   000038   78..         MOV     R0,#?V0 + 6
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..11       MOV     ?V0 + 6,#0x11
   \   000040   75..00       MOV     ?V0 + 7,#0x0
   \   000043   78..         MOV     R0,#?V0 + 6
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV     R4,#0x0
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   7A81         MOV     R2,#-0x7f
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   12....       LCALL   ??osal_nv_read?relay
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   7032         JNZ     ??ZDO_ProcessUserDescReq_1
   1763            {
   1764              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00005B                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00005B   75..00       MOV     ?V0 + 6,#0x0
   \   00005E   78..         MOV     R0,#?V0 + 6
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   7401         MOV     A,#0x1
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   8582..       MOV     ?V0 + 6,DPL
   \   00006B   8583..       MOV     ?V0 + 7,DPH
   \   00006E   78..         MOV     R0,#?V0 + 6
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   AC..         MOV     R4,?V0 + 4
   \   000075   AD..         MOV     R5,?V0 + 5
   \   000077   AA..         MOV     R2,?V0 + 0
   \   000079   AB..         MOV     R3,?V0 + 1
   \   00007B   85..82       MOV     DPL,?V0 + 2
   \   00007E   85..83       MOV     DPH,?V0 + 3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??ZDP_UserDescRsp?relay
   \   000086   7403         MOV     A,#0x3
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   802A         SJMP    ??ZDO_ProcessUserDescReq_2
   1765            }
   1766            else
   1767            {
   1768              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1769                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   00008D                ; Setup parameters for call to function ZDP_GenericRsp
   \   00008D   75..11       MOV     ?V0 + 6,#0x11
   \   000090   75..80       MOV     ?V0 + 7,#-0x80
   \   000093   78..         MOV     R0,#?V0 + 6
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   78..         MOV     R0,#?V0 + 4
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   12....       LCALL   ?Subroutine117 & 0xFFFF
   1770            }
   \                     ??CrossCallReturnLabel_291:
   \   0000A0   FD           MOV     R5,A
   \   0000A1   7C84         MOV     R4,#-0x7c
   \   0000A3   AA..         MOV     R2,?V0 + 0
   \   0000A5   AB..         MOV     R3,?V0 + 1
   \   0000A7   85..82       MOV     DPL,?V0 + 2
   \   0000AA   85..83       MOV     DPH,?V0 + 3
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F9           MOV     R1,A
   \   0000AF   12....       LCALL   ??ZDP_GenericRsp?relay
   \   0000B2   7404         MOV     A,#0x4
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   1771          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000B7   7411         MOV     A,#0x11
   \   0000B9   02....       LJMP    ?Subroutine11 & 0xFFFF
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessUserDescSet
   1775           *
   1776           * @brief       This function finishes the processing of the User
   1777           *              Descriptor Set and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1784          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1785            uint8 *msg;
   1786            uint16 aoi;
   1787            UserDescriptorFormat_t userDesc;
   1788            uint8 outMsg[3];
   1789            uint8 status;
   1790          
   1791            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine79 & 0xFFFF
   1792            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_129:
   \   000011   EC           MOV     A,R4
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   EB           MOV     A,R3
   \   000015   F5..         MOV     ?V0 + 1,A
   1793          
   1794            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000017   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65..         XRL     A,?V0 + 0
   \   00001D   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000023   6003         JZ      $+5
   \   000025   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1795            {
   1796              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   C3           CLR     C
   \   00003A   9410         SUBB    A,#0x10
   \   00003C   5003         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   8002         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000041   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C0E0         PUSH    A
   \   00004D   7405         MOV     A,#0x5
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   12....       LCALL   ?Subroutine50 & 0xFFFF
   1797              msg ++;  // increment one for the length field
   1798          
   1799              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_77:
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A982         MOV     R1,DPL
   \   00005B   AA83         MOV     R2,DPH
   \   00005D   89..         MOV     ?V0 + 4,R1
   \   00005F   8A..         MOV     ?V0 + 5,R2
   \   000061   75..00       MOV     ?V0 + 6,#0x0
   \   000064   78..         MOV     R0,#?V0 + 4
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000069   7408         MOV     A,#0x8
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FC           MOV     R4,A
   \   000070   7D00         MOV     R5,#0x0
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AA82         MOV     R2,DPL
   \   000079   AB83         MOV     R3,DPH
   \   00007B   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   1800              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000081                ; Setup parameters for call to function osal_nv_write
   \   000081   7405         MOV     A,#0x5
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   8582..       MOV     ?V0 + 2,DPL
   \   000089   8583..       MOV     ?V0 + 3,DPH
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   75..11       MOV     ?V0 + 2,#0x11
   \   000094   75..00       MOV     ?V0 + 3,#0x0
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7C00         MOV     R4,#0x0
   \   00009E   7D00         MOV     R5,#0x0
   \   0000A0   7A81         MOV     R2,#-0x7f
   \   0000A2   7B00         MOV     R3,#0x0
   \   0000A4   12....       LCALL   ??osal_nv_write?relay
   \   0000A7   7404         MOV     A,#0x4
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   1801              if ( userDesc.len != 0 )
   \   0000AC   7405         MOV     A,#0x5
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000B5   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1802              {
   1803                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   D2E4         SETB    0xE0 /* A   */.4
   \   0000BA   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1804              }
   1805              else
   1806              {
   1807                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000BF   F0           MOVX    @DPTR,A
   1808              }
   1809          
   1810              status = ZDP_SUCCESS;
   \   0000C0   E4           CLR     A
   \   0000C1   8002         SJMP    ??ZDO_ProcessUserDescSet_6
   1811            }
   1812            else
   1813            {
   1814              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000C3   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C5   85..82       MOV     DPL,?XSP + 0
   \   0000C8   85..83       MOV     DPH,?XSP + 1
   \   0000CB   F0           MOVX    @DPTR,A
   1815            }
   1816          
   1817            outMsg[0] = status;
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C0E0         PUSH    A
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   D0E0         POP     A
   \   0000D6   F0           MOVX    @DPTR,A
   1818            outMsg[1] = LO_UINT16( aoi );
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E5..         MOV     A,?V0 + 0
   \   0000DE   F0           MOVX    @DPTR,A
   1819            outMsg[2] = LO_UINT16( aoi );
   \   0000DF   7404         MOV     A,#0x4
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E5..         MOV     A,?V0 + 0
   \   0000E6   F0           MOVX    @DPTR,A
   1820          
   1821            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1822                         inMsg->SecurityUse );
   \   0000E7                ; Setup parameters for call to function ZDP_SendData
   \   0000E7   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0000EA   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   7403         MOV     A,#0x3
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   8582..       MOV     ?V0 + 0,DPL
   \   0000F8   8583..       MOV     ?V0 + 1,DPH
   \   0000FB   78..         MOV     R0,#?V0 + 0
   \   0000FD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000100   75..14       MOV     ?V0 + 0,#0x14
   \   000103   75..80       MOV     ?V0 + 1,#-0x80
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7903         MOV     R1,#0x3
   \   00010D   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   1823          }
   \   000113   7416         MOV     A,#0x16
   \   000115                REQUIRE ?Subroutine2
   \   000115                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine200_0
   \   000003                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1824          
   1825          /*********************************************************************
   1826           * @fn          ZDO_ProcessDeviceAnnce
   1827           *
   1828           * @brief       This function processes a device annouce message.
   1829           *
   1830           * @param       inMsg - incoming message
   1831           *
   1832           * @return      none
   1833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine187_0
   \   000004                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine188_0
   \   000006                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1834          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1835          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1836            ZDO_DeviceAnnce_t Annce;
   1837            AddrMgrEntry_t addrEntry;
   1838            uint8 parentExt[Z_EXTADDR_LEN];
   1839          
   1840            // Parse incoming message
   1841            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   1842          
   1843            if ( ZSTACK_END_DEVICE_BUILD )
   1844            {
   1845              // Make sure the message didn't come from myself - end device only
   1846              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   1847              {
   1848                return;
   1849              }
   1850            }
   1851          
   1852          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1853            // Clean up the neighbor table
   1854            nwkNeighborRemoveAllStranded();
   \   00001B                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   00001B   12....       LCALL   ??nwkNeighborRemoveAllStranded?relay
   1855          
   1856            // If address conflict is detected, no need to update the address manager
   1857            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00001E                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000026   12....       LCALL   ??NLME_CheckNewAddrSet?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6401         XRL     A,#0x1
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??ZDO_ProcessDeviceAnnce_0 & 0xFFFF
   1858            {
   1859              return;
   1860            }
   1861          #endif
   1862          
   1863          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1864            // Check for parent's address
   1865            NLME_GetCoordExtAddr( parentExt );
   \   000031                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000031   740B         MOV     A,#0xb
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??NLME_GetCoordExtAddr?relay
   1866            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00003D                ; Setup parameters for call to function sAddrExtCmp
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   AC82         MOV     R4,DPL
   \   000044   AD83         MOV     R5,DPH
   \   000046   740B         MOV     A,#0xb
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   AB83         MOV     R3,DPH
   \   00004F   12....       LCALL   ??sAddrExtCmp?relay
   \   000052   E9           MOV     A,R1
   \   000053   6032         JZ      ??ZDO_ProcessDeviceAnnce_1
   1867            {
   1868              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000055                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000055   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   A8..         MOV     R0,?V0 + 0
   \   00005E   A9..         MOV     R1,?V0 + 1
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   68           XRL     A,R0
   \   000068   7003         JNZ     ??ZDO_ProcessDeviceAnnce_2
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00006D   6018         JZ      ??ZDO_ProcessDeviceAnnce_1
   1869              {
   1870                // Set the Parent's MAC's new short address
   1871                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000078   90....       MOV     DPTR,#(_NIB + 23)
   \   00007B   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   1872                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_320:
   \   00007E                ; Setup parameters for call to function ZMacSetReq
   \   00007E   7A..         MOV     R2,#((_NIB + 23) & 0xff)
   \   000080   7B..         MOV     R3,#(((_NIB + 23) >> 8) & 0xff)
   \   000082   794B         MOV     R1,#0x4b
   \   000084   12....       LCALL   ??ZMacSetReq?relay
   1873              }
   1874            }
   1875          
   1876            if ( ZSTACK_ROUTER_BUILD )
   1877            {
   1878              // If the device annce comes from a end device child that has moved
   1879              // to another parent, remove it from associated device list
   1880          
   1881              // If the dev annce is coming from other device's children,
   1882              // (The dev annce from its own children shall be unicast to itself,
   1883              // So check the mac destination address)
   1884              // Remove it from the associated device list. If it is not
   1885              // a child, no action will be taken in AssocRemove() anyway.
   1886              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000087   EE           MOV     A,R6
   \   000088   2411         ADD     A,#0x11
   \   00008A   F582         MOV     DPL,A
   \   00008C   EF           MOV     A,R7
   \   00008D   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000090   C082         PUSH    DPL
   \   000092   C083         PUSH    DPH
   \   000094                ; Setup parameters for call to function NLME_GetShortAddr
   \   000094   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000097   8A..         MOV     ?V0 + 0,R2
   \   000099   8B..         MOV     ?V0 + 1,R3
   \   00009B   D083         POP     DPH
   \   00009D   D082         POP     DPL
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   65..         XRL     A,?V0 + 0
   \   0000A2   7004         JNZ     ??ZDO_ProcessDeviceAnnce_3
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A8   6034         JZ      ??ZDO_ProcessDeviceAnnce_4
   1887              {
   1888                associated_devices_t *dev_ptr;
   1889          
   1890                // If it's an end device child
   1891                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000AA                ; Setup parameters for call to function AssocGetWithExt
   \   0000AA   7402         MOV     A,#0x2
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   AA82         MOV     R2,DPL
   \   0000B1   AB83         MOV     R3,DPH
   \   0000B3   12....       LCALL   ??AssocGetWithExt?relay
   \   0000B6   8A82         MOV     DPL,R2
   \   0000B8   8B83         MOV     DPH,R3
   1892                if ( dev_ptr )
   \   0000BA   E582         MOV     A,DPL
   \   0000BC   7002         JNZ     ??ZDO_ProcessDeviceAnnce_5
   \   0000BE   E583         MOV     A,DPH
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000C0   601C         JZ      ??ZDO_ProcessDeviceAnnce_4
   1893                {
   1894                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   1895                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FA           MOV     R2,A
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   6A           XRL     A,R2
   \   0000CB   6005         JZ      ??ZDO_ProcessDeviceAnnce_6
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   6A           XRL     A,R2
   \   0000D0   700C         JNZ     ??ZDO_ProcessDeviceAnnce_4
   1896                  {
   1897                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   0000D2                ; Setup parameters for call to function AssocRemove
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   AA82         MOV     R2,DPL
   \   0000D9   AB83         MOV     R3,DPH
   \   0000DB   12....       LCALL   ??AssocRemove?relay
   1898                  }
   1899                }
   1900              }
   1901          
   1902              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000DE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000DE   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000E1   8A..         MOV     ?V0 + 0,R2
   \   0000E3   8B..         MOV     ?V0 + 1,R3
   \   0000E5   A8..         MOV     R0,?V0 + 0
   \   0000E7   A9..         MOV     R1,?V0 + 1
   \   0000E9   85..82       MOV     DPL,?XSP + 0
   \   0000EC   85..83       MOV     DPH,?XSP + 1
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   68           XRL     A,R0
   \   0000F1   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000F6   601C         JZ      ??ZDO_ProcessDeviceAnnce_8
   1903              {
   1904                // If an associated device is found with matched extended Address,
   1905                // update its short address
   1906                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   0000F8                ; Setup parameters for call to function AssocChangeNwkAddr
   \   0000F8   7402         MOV     A,#0x2
   \   0000FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000100   12....       LCALL   ??AssocChangeNwkAddr?relay
   \   000103   E9           MOV     A,R1
   \   000104   600E         JZ      ??ZDO_ProcessDeviceAnnce_8
   1907                {
   1908                  // Update the neighbor table
   1909                  nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \   000106                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00010E   12....       LCALL   ??nwkNeighborUpdateNwkAddr?relay
   1910          
   1911                  // Set event to save NV
   1912                  ZDApp_NVUpdate();
   \   000111                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000111   12....       LCALL   ??ZDApp_NVUpdate?relay
   1913                }
   1914              }
   1915            }
   1916            
   1917            // Assume that the device has moved, remove existing routing entries
   1918            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   000114                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000114   7900         MOV     R1,#0x0
   \   000116   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000119   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   1919            
   1920          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   1921          
   1922          
   1923            // Fill in the extended address in address manager if we don't have it already.
   1924            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   00011C   7413         MOV     A,#0x13
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   E4           CLR     A
   \   000122   12....       LCALL   ?Subroutine34 & 0xFFFF
   1925            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_44:
   \   000125   F8           MOV     R0,A
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   F9           MOV     R1,A
   \   000129   7414         MOV     A,#0x14
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   1926            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_321:
   \   000131                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000131   7413         MOV     A,#0x13
   \   000133   12....       LCALL   ?XSTACK_DISP0_8
   \   000136   AA82         MOV     R2,DPL
   \   000138   AB83         MOV     R3,DPH
   \   00013A   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   00013D   E9           MOV     A,R1
   \   00013E   604B         JZ      ??ZDO_ProcessDeviceAnnce_0
   1927            {
   1928              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000140                ; Setup parameters for call to function osal_memset
   \   000140   7C08         MOV     R4,#0x8
   \   000142   7D00         MOV     R5,#0x0
   \   000144   7900         MOV     R1,#0x0
   \   000146   740B         MOV     A,#0xb
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   AA82         MOV     R2,DPL
   \   00014D   AB83         MOV     R3,DPH
   \   00014F   12....       LCALL   ??osal_memset?relay
   1929              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000152                ; Setup parameters for call to function sAddrExtCmp
   \   000152   7416         MOV     A,#0x16
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   AC82         MOV     R4,DPL
   \   000159   AD83         MOV     R5,DPH
   \   00015B   740B         MOV     A,#0xb
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   AA82         MOV     R2,DPL
   \   000162   AB83         MOV     R3,DPH
   \   000164   12....       LCALL   ??sAddrExtCmp?relay
   \   000167   E9           MOV     A,R1
   \   000168   6021         JZ      ??ZDO_ProcessDeviceAnnce_0
   1930              {
   1931                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   00016A                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00016A   7402         MOV     A,#0x2
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   AC82         MOV     R4,DPL
   \   000171   AD83         MOV     R5,DPH
   \   000173   7416         MOV     A,#0x16
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   AA82         MOV     R2,DPL
   \   00017A   AB83         MOV     R3,DPH
   \   00017C   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1932                AddrMgrEntryUpdate( &addrEntry );
   \   00017F                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00017F   7413         MOV     A,#0x13
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   AA82         MOV     R2,DPL
   \   000186   AB83         MOV     R3,DPH
   \   000188   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00018B   7420         MOV     A,#0x20
   1933              }
   1934            }
   \   00018D   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   1935          }
   1936          
   1937          /*********************************************************************
   1938           * @fn          ZDO_BuildSimpleDescBuf
   1939           *
   1940           * @brief       Build a byte sequence representation of a Simple Descriptor.
   1941           *
   1942           * @param       buf  - pointer to a byte array big enough for data.
   1943           * @param       desc - SimpleDescriptionFormat_t *
   1944           *
   1945           * @return      none
   1946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1947          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   1948          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   1949            byte cnt;
   1950            uint16 *ptr;
   1951          
   1952            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine89 & 0xFFFF
   1953            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_152:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
   1954            *buf++ = LO_UINT16( desc->AppProfId );
   1955            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_17:
   \   000018   EC           MOV     A,R4
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000020   12....       LCALL   ?Subroutine24 & 0xFFFF
   1956            *buf++ = LO_UINT16( desc->AppDeviceId );
   1957          
   1958            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_18:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C4           SWAP    A
   \   00002E   54F0         ANL     A,#0xf0
   \   000030   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   1959          
   1960            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_366:
   \   000033   EC           MOV     A,R4
   \   000034   2406         ADD     A,#0x6
   \   000036   08           INC     R0
   \   000037   08           INC     R0
   \   000038   08           INC     R0
   \   000039   ED           MOV     A,R5
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F9           MOV     R1,A
   \   00003D   88..         MOV     ?V0 + 0,R0
   \   00003F   89..         MOV     ?V0 + 1,R1
   \   000041   8882         MOV     DPL,R0
   \   000043   F583         MOV     DPH,A
   \   000045   12....       LCALL   ?Subroutine137 & 0xFFFF
   1961            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_367:
   \   000048   8C82         MOV     DPL,R4
   \   00004A   8D83         MOV     DPH,R5
   \   00004C   12....       LCALL   ?Subroutine101 & 0xFFFF
   1962            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_173:
   \   00004F   800B         SJMP    ??CrossCallReturnLabel_24
   1963            {
   1964              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ?Subroutine92 & 0xFFFF
   1965              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_158:
   \   000059   12....       LCALL   ?Subroutine29 & 0xFFFF
   1966            }
   \                     ??CrossCallReturnLabel_24:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   A882         MOV     R0,DPL
   \   000063   A983         MOV     R1,DPH
   \   000065   85..82       MOV     DPL,?V0 + 0
   \   000068   85..83       MOV     DPH,?V0 + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F5..         MOV     ?V0 + 3,A
   \   00006E   E5..         MOV     A,?V0 + 2
   \   000070   C3           CLR     C
   \   000071   95..         SUBB    A,?V0 + 3
   \   000073   40DC         JC      ??ZDO_BuildSimpleDescBuf_0
   1967          
   1968            *buf++ = desc->AppNumOutClusters;
   \   000075   EC           MOV     A,R4
   \   000076   2409         ADD     A,#0x9
   \   000078   FE           MOV     R6,A
   \   000079   ED           MOV     A,R5
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   FF           MOV     R7,A
   \   00007D   8E..         MOV     ?V0 + 0,R6
   \   00007F   8F..         MOV     ?V0 + 1,R7
   \   000081   8E82         MOV     DPL,R6
   \   000083   F583         MOV     DPH,A
   \   000085   12....       LCALL   ?Subroutine92 & 0xFFFF
   1969            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_159:
   \   000088   8C82         MOV     DPL,R4
   \   00008A   8D83         MOV     DPH,R5
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ?Subroutine101 & 0xFFFF
   1970            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_174:
   \   000092   800B         SJMP    ??CrossCallReturnLabel_25
   1971            {
   1972              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   12....       LCALL   ?Subroutine89 & 0xFFFF
   1973              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_153:
   \   00009C   12....       LCALL   ?Subroutine29 & 0xFFFF
   1974            }
   \                     ??CrossCallReturnLabel_25:
   \   00009F   85..82       MOV     DPL,?V0 + 0
   \   0000A2   85..83       MOV     DPH,?V0 + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FC           MOV     R4,A
   \   0000A7   E5..         MOV     A,?V0 + 2
   \   0000A9   C3           CLR     C
   \   0000AA   9C           SUBB    A,R4
   \   0000AB   40E7         JC      ??ZDO_BuildSimpleDescBuf_1
   1975          }
   \   0000AD   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   00000A   75..00       MOV     ?V0 + 2,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   E8           MOV     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000007   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00000A   05..         INC     ?V0 + 2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine201_0
   \   000001                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET
   1976          
   1977          /*********************************************************************
   1978           * @fn      ZDO_MatchEndDeviceBind()
   1979           *
   1980           * @brief
   1981           *
   1982           *   Called to match end device binding requests
   1983           *
   1984           * @param  bindReq  - binding request information
   1985           * @param  SecurityUse - Security enable/disable
   1986           *
   1987           * @return  none
   1988           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1989          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   1990          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1991            zAddrType_t dstAddr;
   1992            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   1993            uint8 status;
   1994          
   1995            // Is this the first request?
   1996            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7002         JNZ     ??ZDO_MatchEndDeviceBind_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000019   703E         JNZ     ??ZDO_MatchEndDeviceBind_1
   1997            {
   1998              // Create match info structure
   1999              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   7A37         MOV     R2,#0x37
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000022   12....       LCALL   ?Subroutine32 & 0xFFFF
   2000              if ( matchED )
   \                     ??CrossCallReturnLabel_35:
   \   000025   90....       MOV     DPTR,#matchED
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7002         JNZ     ??ZDO_MatchEndDeviceBind_2
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00002D   6019         JZ      ??ZDO_MatchEndDeviceBind_3
   2001              {
   2002                // Clear the structure
   2003                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C37         MOV     R4,#0x37
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??osal_memset?relay
   2004          
   2005                // Copy the first request's information
   2006                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000038                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FD           MOV     R5,A
   \   00003C   90....       MOV     DPTR,#matchED
   \   00003F   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000042   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000045   E9           MOV     A,R1
   \   000046   7005         JNZ     ??ZDO_MatchEndDeviceBind_4
   2007                {
   2008          
   2009                  status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   000048   7488         MOV     A,#-0x78
   \   00004A   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2010                  sendRsp = TRUE;
   2011                }
   2012              }
   2013              else
   2014              {
   2015                status = ZDP_NO_ENTRY;
   2016                sendRsp = TRUE;
   2017              }
   2018          
   2019              if ( !sendRsp )
   2020              {
   2021                // Set into the correct state
   2022                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   00004D   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   2023          
   2024                // Setup the timeout
   2025                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000053                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000053   12....       LCALL   ?Subroutine95 & 0xFFFF
   2026              }
   2027            }
   \                     ??CrossCallReturnLabel_164:
   \   000056   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   2028            else
   2029            {
   2030                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000059   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   F0           MOVX    @DPTR,A
   2031          
   2032                // Copy the 2nd request's information
   2033                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   00005F                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00005F   EE           MOV     A,R6
   \   000060   FC           MOV     R4,A
   \   000061   EF           MOV     A,R7
   \   000062   FD           MOV     R5,A
   \   000063   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000066   12....       LCALL   ??ZDO_CopyMatchInfo?relay
   \   000069   E9           MOV     A,R1
   \   00006A   700C         JNZ     ??ZDO_MatchEndDeviceBind_7
   2034                {
   2035                  status = ZDP_NO_ENTRY;
   \   00006C   7488         MOV     A,#-0x78
   \   00006E   85..82       MOV     DPL,?XSP + 0
   \   000071   85..83       MOV     DPH,?XSP + 1
   \   000074   F0           MOVX    @DPTR,A
   2036                  sendRsp = TRUE;
   \   000075   75..01       MOV     ?V0 + 0,#0x1
   2037                }
   2038          
   2039                // Make a source match for ed1
   2040                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2041                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2042                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   000078                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000078   75....       MOV     ?V0 + 2,#(ZDOBuildBuf & 0xff)
   \   00007B   75....       MOV     ?V0 + 3,#((ZDOBuildBuf >> 8) & 0xff)
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   90....       MOV     DPTR,#matchED
   \   000086   E0           MOVX    A,@DPTR
   \   000087   2429         ADD     A,#0x29
   \   000089   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00008C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008F   90....       MOV     DPTR,#matchED
   \   000092   E0           MOVX    A,@DPTR
   \   000093   2428         ADD     A,#0x28
   \   000095   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000098   2415         ADD     A,#0x15
   \   00009A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00009D   2414         ADD     A,#0x14
   \   00009F   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   C0E0         PUSH    A
   \   0000A8   90....       MOV     DPTR,#matchED
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   2431         ADD     A,#0x31
   \   0000AE   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   0000B1   D0E0         POP     A
   \   0000B3   12....       LCALL   ?Subroutine51 & 0xFFFF
   2043                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_80:
   \   0000B6   2431         ADD     A,#0x31
   \   0000B8   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   0000BB   75....       MOV     ?V0 + 4,#(ZDOBuildBuf & 0xff)
   \   0000BE   75....       MOV     ?V0 + 5,#((ZDOBuildBuf >> 8) & 0xff)
   \   0000C1   75..00       MOV     ?V0 + 6,#0x0
   \   0000C4   602E         JZ      ??ZDO_MatchEndDeviceBind_8
   2044                {
   2045                  // Save the match list
   2046                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000C6                ; Setup parameters for call to function osal_mem_alloc
   \   0000C6   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   2432         ADD     A,#0x32
   \   0000CC   12....       LCALL   ?Subroutine15 & 0xFFFF
   2047                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_475:
   \   0000CF   FA           MOV     R2,A
   \   0000D0   7001         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   0000D2   EB           MOV     A,R3
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0000D3   6013         JZ      ??ZDO_MatchEndDeviceBind_10
   2048                  {
   2049                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D5                ; Setup parameters for call to function osal_memcpy
   \   0000D5   78..         MOV     R0,#?V0 + 4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DA   90....       MOV     DPTR,#matchED
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   2431         ADD     A,#0x31
   \   0000E0   12....       LCALL   ?Subroutine60 & 0xFFFF
   2050                  }
   \                     ??CrossCallReturnLabel_385:
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   800C         SJMP    ??ZDO_MatchEndDeviceBind_8
   2051                  else
   2052                  {
   2053                    // Allocation error, stop
   2054                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0000E8   7488         MOV     A,#-0x78
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   F0           MOVX    @DPTR,A
   2055                    sendRsp = TRUE;
   \   0000F1   75..01       MOV     ?V0 + 0,#0x1
   2056                  }
   2057                }
   2058          
   2059                // Make a source match for ed2
   2060                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2061                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2062                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   0000F4                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000F4   78..         MOV     R0,#?V0 + 2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   2412         ADD     A,#0x12
   \   0000FF   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000102   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000105   90....       MOV     DPTR,#matchED
   \   000108   E0           MOVX    A,@DPTR
   \   000109   2411         ADD     A,#0x11
   \   00010B   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00010E   242C         ADD     A,#0x2c
   \   000110   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000113   242B         ADD     A,#0x2b
   \   000115   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011B   E9           MOV     A,R1
   \   00011C   C0E0         PUSH    A
   \   00011E   90....       MOV     DPTR,#matchED
   \   000121   E0           MOVX    A,@DPTR
   \   000122   2434         ADD     A,#0x34
   \   000124   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000127   D0E0         POP     A
   \   000129   12....       LCALL   ?Subroutine51 & 0xFFFF
   2063                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_81:
   \   00012C   2434         ADD     A,#0x34
   \   00012E   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000131   6020         JZ      ??ZDO_MatchEndDeviceBind_11
   2064                {
   2065                  // Save the match list
   2066                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000133                ; Setup parameters for call to function osal_mem_alloc
   \   000133   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000136   E0           MOVX    A,@DPTR
   \   000137   2435         ADD     A,#0x35
   \   000139   12....       LCALL   ?Subroutine15 & 0xFFFF
   2067                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_476:
   \   00013C   FA           MOV     R2,A
   \   00013D   7001         JNZ     ??ZDO_MatchEndDeviceBind_12
   \   00013F   EB           MOV     A,R3
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000140   602B         JZ      ??ZDO_MatchEndDeviceBind_13
   2068                  {
   2069                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000142                ; Setup parameters for call to function osal_memcpy
   \   000142   78..         MOV     R0,#?V0 + 4
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000147   90....       MOV     DPTR,#matchED
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   2434         ADD     A,#0x34
   \   00014D   12....       LCALL   ?Subroutine60 & 0xFFFF
   2070                  }
   \                     ??CrossCallReturnLabel_386:
   \   000150   12....       LCALL   ?DEALLOC_XSTACK8
   2071                  else
   2072                  {
   2073                    // Allocation error, stop
   2074                    status = ZDP_NO_ENTRY;
   2075                    sendRsp = TRUE;
   2076                  }
   2077                }
   2078          
   2079                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000153   E5..         MOV     A,?V0 + 0
   \   000155   701F         JNZ     ??ZDO_MatchEndDeviceBind_14
   \   000157   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00015A   7005         JNZ     ??ZDO_MatchEndDeviceBind_15
   \   00015C   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   00015F   6015         JZ      ??ZDO_MatchEndDeviceBind_14
   2080                {
   2081                  // Do the first unbind/bind state
   2082                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_15:
   \   000161                ; Setup parameters for call to function ZDMatchSendState
   \   000161   7B00         MOV     R3,#0x0
   \   000163   7A00         MOV     R2,#0x0
   \   000165   7900         MOV     R1,#0x0
   \   000167   12....       LCALL   ??ZDMatchSendState?relay
   \   00016A   02....       LJMP    ??ZDO_MatchEndDeviceBind_6 & 0xFFFF
   2083                }
   \                     ??ZDO_MatchEndDeviceBind_13:
   \   00016D   7488         MOV     A,#-0x78
   \   00016F   85..82       MOV     DPL,?XSP + 0
   \   000172   85..83       MOV     DPH,?XSP + 1
   \   000175   F0           MOVX    @DPTR,A
   2084                else
   2085                {
   2086                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_14:
   \   000176   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000178   85..82       MOV     DPL,?XSP + 0
   \   00017B   85..83       MOV     DPH,?XSP + 1
   \   00017E   F0           MOVX    @DPTR,A
   2087                  sendRsp = TRUE;
   2088                }
   2089            }
   2090          
   2091            if ( sendRsp )
   2092            {
   2093              // send response to this requester
   2094              dstAddr.addrMode = Addr16Bit;
   \   00017F   7409         MOV     A,#0x9
   \   000181   12....       LCALL   ?XSTACK_DISP0_8
   \   000184   7402         MOV     A,#0x2
   \   000186   12....       LCALL   ?Subroutine41 & 0xFFFF
   2095              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_60:
   \   000189   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2096              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_322:
   \   000192                ; Setup parameters for call to function ZDP_SendData
   \   000192   8E82         MOV     DPL,R6
   \   000194   8F83         MOV     DPH,R7
   \   000196   A3           INC     DPTR
   \   000197   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019D   7401         MOV     A,#0x1
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   8582..       MOV     ?V0 + 0,DPL
   \   0001A5   8583..       MOV     ?V0 + 1,DPH
   \   0001A8   78..         MOV     R0,#?V0 + 0
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AD   75..20       MOV     ?V0 + 0,#0x20
   \   0001B0   75..80       MOV     ?V0 + 1,#-0x80
   \   0001B3   78..         MOV     R0,#?V0 + 0
   \   0001B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B8   7901         MOV     R1,#0x1
   \   0001BA   7406         MOV     A,#0x6
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   AC82         MOV     R4,DPL
   \   0001C1   AD83         MOV     R5,DPH
   \   0001C3   EE           MOV     A,R6
   \   0001C4   FA           MOV     R2,A
   \   0001C5   EF           MOV     A,R7
   \   0001C6   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0001C9   12....       LCALL   ?DEALLOC_XSTACK8
   2097          
   2098              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001CC   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0001CF   703E         JNZ     ??ZDO_MatchEndDeviceBind_16
   2099              {
   2100                // send response to first requester
   2101                dstAddr.addrMode = Addr16Bit;
   \   0001D1   7409         MOV     A,#0x9
   \   0001D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D6   7402         MOV     A,#0x2
   \   0001D8   12....       LCALL   ?Subroutine51 & 0xFFFF
   2102                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2103                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2104              }
   \                     ??CrossCallReturnLabel_82:
   \   0001DB   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0001E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E7   7401         MOV     A,#0x1
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   8582..       MOV     ?V0 + 0,DPL
   \   0001EF   8583..       MOV     ?V0 + 1,DPH
   \   0001F2   78..         MOV     R0,#?V0 + 0
   \   0001F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F7   75..20       MOV     ?V0 + 0,#0x20
   \   0001FA   75..80       MOV     ?V0 + 1,#-0x80
   \   0001FD   78..         MOV     R0,#?V0 + 0
   \   0001FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000202   7901         MOV     R1,#0x1
   \   000204   7406         MOV     A,#0x6
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00020C   12....       LCALL   ?DEALLOC_XSTACK8
   2105          
   2106              // Process ended - release memory used
   2107              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_16:
   \   00020F                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00020F   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2108            }
   2109          }
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000212   740A         MOV     A,#0xa
   \   000214   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006                REQUIRE ??Subroutine202_0
   \   000006                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   12....       LCALL   ??osal_mem_alloc?relay
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000003   FC           MOV     R4,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   18           DEC     R0
   \   000001   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??ZDO_CompareClusterLists?relay
   \   000008   7404         MOV     A,#0x4
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine204_0
   \   000003                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2434         ADD     A,#0x34
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   08           INC     R0
   \   000006   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000003                REQUIRE ??Subroutine205_0
   \   000003                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FD           MOV     R5,A
   \   000007   12....       LCALL   ??osal_memcpy?relay
   \   00000A   7403         MOV     A,#0x3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   7C..         MOV     R4,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff)
   \   000002   7D..         MOV     R5,#((??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff)
   \   000004   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000007   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   00000A   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   00000A   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006                REQUIRE ??Subroutine207_0
   \   000006                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2431         ADD     A,#0x31
   \   000006   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242E         ADD     A,#0x2e
   \   000006   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000009   6402         XRL     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007                REQUIRE ??Subroutine212_0
   \   000007                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005                ; Setup parameters for call to function ZDP_SendData
   \   000005   90....       MOV     DPTR,#matchED
   \   000008   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007                REQUIRE ??Subroutine221_0
   \   000007                ; // Fall through to label ??Subroutine221_0
   2110          
   2111          /*********************************************************************
   2112           * @fn      ZDO_RemoveMatchMemory()
   2113           *
   2114           * @brief   Called to clear the memory used for the end device bind.
   2115           *
   2116           * @param  none
   2117           *
   2118           * @return  none
   2119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2120          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2121          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2122            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7002         JNZ     ??ZDO_RemoveMatchMemory_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00000C   6073         JZ      ??ZDO_RemoveMatchMemory_1
   2123            {
   2124              if ( matchED->ed2Matched != NULL )
   \   00000E   90....       MOV     DPTR,#matchED
   \   000011   E0           MOVX    A,@DPTR
   \   000012   2435         ADD     A,#0x35
   \   000014   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000017   7001         JNZ     ??ZDO_RemoveMatchMemory_2
   \   000019   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00001A   6003         JZ      ??ZDO_RemoveMatchMemory_3
   2125                osal_mem_free( matchED->ed2Matched );
   \   00001C                ; Setup parameters for call to function osal_mem_free
   \   00001C   12....       LCALL   ??osal_mem_free?relay
   2126              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00001F   90....       MOV     DPTR,#matchED
   \   000022   E0           MOVX    A,@DPTR
   \   000023   2432         ADD     A,#0x32
   \   000025   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000028   7001         JNZ     ??ZDO_RemoveMatchMemory_4
   \   00002A   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00002B   6003         JZ      ??ZDO_RemoveMatchMemory_5
   2127                osal_mem_free( matchED->ed1Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   12....       LCALL   ??osal_mem_free?relay
   2128          
   2129              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000030   90....       MOV     DPTR,#matchED
   \   000033   E0           MOVX    A,@DPTR
   \   000034   2412         ADD     A,#0x12
   \   000036   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000039   7001         JNZ     ??ZDO_RemoveMatchMemory_6
   \   00003B   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_6:
   \   00003C   6003         JZ      ??ZDO_RemoveMatchMemory_7
   2130                osal_mem_free( matchED->ed1.inClusters );
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   12....       LCALL   ??osal_mem_free?relay
   2131          
   2132              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_7:
   \   000041   90....       MOV     DPTR,#matchED
   \   000044   E0           MOVX    A,@DPTR
   \   000045   2415         ADD     A,#0x15
   \   000047   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00004A   7001         JNZ     ??ZDO_RemoveMatchMemory_8
   \   00004C   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_8:
   \   00004D   6003         JZ      ??ZDO_RemoveMatchMemory_9
   2133                osal_mem_free( matchED->ed1.outClusters );
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   ??osal_mem_free?relay
   2134          
   2135              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_9:
   \   000052   90....       MOV     DPTR,#matchED
   \   000055   E0           MOVX    A,@DPTR
   \   000056   2429         ADD     A,#0x29
   \   000058   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00005B   7001         JNZ     ??ZDO_RemoveMatchMemory_10
   \   00005D   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_10:
   \   00005E   6003         JZ      ??ZDO_RemoveMatchMemory_11
   2136                osal_mem_free( matchED->ed2.inClusters );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   12....       LCALL   ??osal_mem_free?relay
   2137          
   2138              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_11:
   \   000063   90....       MOV     DPTR,#matchED
   \   000066   E0           MOVX    A,@DPTR
   \   000067   242C         ADD     A,#0x2c
   \   000069   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00006C   7001         JNZ     ??ZDO_RemoveMatchMemory_12
   \   00006E   EB           MOV     A,R3
   \                     ??ZDO_RemoveMatchMemory_12:
   \   00006F   6003         JZ      ??ZDO_RemoveMatchMemory_13
   2139                osal_mem_free( matchED->ed2.outClusters );
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   12....       LCALL   ??osal_mem_free?relay
   2140          
   2141              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_13:
   \   000074                ; Setup parameters for call to function osal_mem_free
   \   000074   90....       MOV     DPTR,#matchED
   \   000077   12....       LCALL   ?Subroutine70 & 0xFFFF
   2142          
   2143              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     ??CrossCallReturnLabel_115:
   \   00007A   90....       MOV     DPTR,#matchED
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   2144            }
   2145          }
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000081                REQUIRE ?Subroutine0
   \   000081                ; // Fall through to label ?Subroutine0
   2146          
   2147          /*********************************************************************
   2148           * @fn      ZDO_CopyMatchInfo()
   2149           *
   2150           * @brief   Called to copy memory used for the end device bind.
   2151           *
   2152           * @param  srcReq - source information
   2153           * @param  dstReq - destination location
   2154           *
   2155           * @return  TRUE if copy was successful.
   2156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2157          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2158          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2159            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V0 + 2,#0x1
   2160          
   2161            // Copy bind information into the match info structure
   2162            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   75..00       MOV     ?V0 + 6,#0x0
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000023   12....       LCALL   ?DEALLOC_XSTACK8
   2163          
   2164            // Initialize the destination cluster pointers
   2165            destReq->inClusters = NULL;
   \   000026   EE           MOV     A,R6
   \   000027   2412         ADD     A,#0x12
   \   000029   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   2166            destReq->outClusters = NULL;
   \   000030   EE           MOV     A,R6
   \   000031   2415         ADD     A,#0x15
   \   000033   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   F0           MOVX    @DPTR,A
   2167          
   2168            // Copy input cluster IDs
   2169            if ( srcReq->numInClusters )
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   2411         ADD     A,#0x11
   \   00003E   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000041   603A         JZ      ??ZDO_CopyMatchInfo_0
   2170            {
   2171              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   C3           CLR     C
   \   000044   33           RLC     A
   \   000045   FA           MOV     R2,A
   \   000046   E4           CLR     A
   \   000047   33           RLC     A
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??osal_mem_alloc?relay
   \   00004C   85..82       MOV     DPL,?V0 + 8
   \   00004F   85..83       MOV     DPH,?V0 + 9
   \   000052   12....       LCALL   ?Subroutine32 & 0xFFFF
   2172              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_36:
   \   000055   85..82       MOV     DPL,?V0 + 8
   \   000058   85..83       MOV     DPH,?V0 + 9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   7001         JNZ     ??ZDO_CopyMatchInfo_1
   \   00005F   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_1:
   \   000060   6018         JZ      ??ZDO_CopyMatchInfo_2
   2173              {
   2174                // Copy the clusters
   2175                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2176                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000062                ; Setup parameters for call to function osal_memcpy
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   2412         ADD     A,#0x12
   \   000066   12....       LCALL   ?Subroutine93 & 0xFFFF
   2177              }
   \                     ??CrossCallReturnLabel_160:
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   85..82       MOV     DPL,?V0 + 10
   \   00006F   85..83       MOV     DPH,?V0 + 11
   \   000072   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2178              else
   2179                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_2:
   \   00007A   75..00       MOV     ?V0 + 2,#0x0
   2180            }
   2181          
   2182            // Copy output cluster IDs
   2183            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   2414         ADD     A,#0x14
   \   000081   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000084   6031         JZ      ??ZDO_CopyMatchInfo_3
   2184            {
   2185              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000086                ; Setup parameters for call to function osal_mem_alloc
   \   000086   C3           CLR     C
   \   000087   33           RLC     A
   \   000088   FA           MOV     R2,A
   \   000089   E4           CLR     A
   \   00008A   33           RLC     A
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??osal_mem_alloc?relay
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   12....       LCALL   ?Subroutine32 & 0xFFFF
   2186              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_37:
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   7001         JNZ     ??ZDO_CopyMatchInfo_4
   \   00009E   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_4:
   \   00009F   603F         JZ      ??ZDO_CopyMatchInfo_5
   2187              {
   2188                // Copy the clusters
   2189                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2190                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   0000A1                ; Setup parameters for call to function osal_memcpy
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   2415         ADD     A,#0x15
   \   0000A5   12....       LCALL   ?Subroutine93 & 0xFFFF
   2191              }
   \                     ??CrossCallReturnLabel_161:
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AB   85..82       MOV     DPL,?V0 + 10
   \   0000AE   85..83       MOV     DPH,?V0 + 11
   \   0000B1   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   2192              else
   2193                allOK = FALSE;
   2194            }
   2195          
   2196            if ( !allOK )
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000B7   E5..         MOV     A,?V0 + 2
   \   0000B9   7020         JNZ     ??ZDO_CopyMatchInfo_6
   2197            {
   2198              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_7:
   \   0000BB   85..82       MOV     DPL,?V0 + 8
   \   0000BE   85..83       MOV     DPH,?V0 + 9
   \   0000C1   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000C4   7001         JNZ     ??ZDO_CopyMatchInfo_8
   \   0000C6   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_8:
   \   0000C7   6003         JZ      ??ZDO_CopyMatchInfo_9
   2199                osal_mem_free( destReq->inClusters );
   \   0000C9                ; Setup parameters for call to function osal_mem_free
   \   0000C9   12....       LCALL   ??osal_mem_free?relay
   2200              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_9:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000D3   7001         JNZ     ??ZDO_CopyMatchInfo_10
   \   0000D5   EB           MOV     A,R3
   \                     ??ZDO_CopyMatchInfo_10:
   \   0000D6   6003         JZ      ??ZDO_CopyMatchInfo_6
   2201                osal_mem_free( destReq->outClusters );
   \   0000D8                ; Setup parameters for call to function osal_mem_free
   \   0000D8   12....       LCALL   ??osal_mem_free?relay
   2202            }
   2203          
   2204            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000DB   A9..         MOV     R1,?V0 + 2
   \   0000DD   02....       LJMP    ?Subroutine8 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000E0   75..00       MOV     ?V0 + 2,#0x0
   \   0000E3   80D6         SJMP    ??ZDO_CopyMatchInfo_7
   2205          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F5..         MOV     ?V0 + 10,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 11,A
   \   000008   85..82       MOV     DPL,?V0 + 10
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000007   F5..         MOV     ?V0 + 4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 5,A
   \   00000D   78..         MOV     R0,#?V0 + 4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   FE           MOV     R6,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET
   2206          
   2207          /*********************************************************************
   2208           * @fn      ZDMatchSendState()
   2209           *
   2210           * @brief   State machine for the End device match message algorithm.
   2211           *
   2212           * @param  reason - state of algoritm
   2213           * @param  status - initial message status
   2214           * @param  TransSeq - next transaction sequence number
   2215           *
   2216           * @return  FALSE if error and we are not currently matching, TRUE
   2217           *          if success.
   2218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2219          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2220          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   2221            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V0 + 4,#0x0
   \   000013   75..00       MOV     ?V0 + 5,#0x0
   2222            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V0 + 3,#-0x1
   2223            zAddrType_t dstAddr;
   2224            zAddrType_t destinationAddr;
   2225            uint16 msgType;
   2226            uint16 clusterID = 0xFFFF;
   \   000019   75..FF       MOV     ?V0 + 8,#-0x1
   \   00001C   75..FF       MOV     ?V0 + 9,#-0x1
   2227            ZDEndDeviceBind_t *ed = NULL;
   \   00001F   75..00       MOV     ?V0 + 0,#0x0
   \   000022   75..00       MOV     ?V0 + 1,#0x0
   2228            uint8 rspStatus = ZDP_SUCCESS;
   \   000025   E4           CLR     A
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   12....       LCALL   ?Subroutine51 & 0xFFFF
   2229          
   2230            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_83:
   \   00002F   7002         JNZ     ??ZDMatchSendState_0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \                     ??ZDMatchSendState_0:
   \   000033   7005         JNZ     ??ZDMatchSendState_1
   2231              return ( FALSE );
   \                     ??ZDMatchSendState_2:
   \   000035   7900         MOV     R1,#0x0
   \   000037   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2232          
   2233            // Check sequence number
   2234            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_1:
   \   00003A   7403         MOV     A,#0x3
   \   00003C   65..         XRL     A,?V0 + 2
   \   00003E   6006         JZ      ??ZDMatchSendState_4
   \   000040   7402         MOV     A,#0x2
   \   000042   65..         XRL     A,?V0 + 2
   \   000044   700D         JNZ     ??ZDMatchSendState_5
   2235            {
   2236              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_4:
   \   000046   90....       MOV     DPTR,#matchED
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   2430         ADD     A,#0x30
   \   00004C   12....       LCALL   ?Subroutine82 & 0xFFFF
   2237                return( FALSE ); // ignore the message
   2238            }
   \                     ??CrossCallReturnLabel_379:
   \   00004F   65..         XRL     A,?V0 + 7
   \   000051   70E2         JNZ     ??ZDMatchSendState_2
   2239          
   2240            // turn off timer
   2241            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_5:
   \   000053                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000053   7C..         MOV     R4,#(??ZDO_EndDeviceBindMatchTimeoutCB?relay & 0xff)
   \   000055   7D..         MOV     R5,#((??ZDO_EndDeviceBindMatchTimeoutCB?relay >> 8) & 0xff)
   \   000057   7A00         MOV     R2,#0x0
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   12....       LCALL   ??APS_SetEndDeviceBindTimeout?relay
   2242          
   2243            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   00005E   7401         MOV     A,#0x1
   \   000060   65..         XRL     A,?V0 + 2
   \   000062   700B         JNZ     ??ZDMatchSendState_6
   2244            {
   2245              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000064   7485         MOV     A,#-0x7b
   \                     ??ZDMatchSendState_7:
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \                     ??ZDMatchSendState_8:
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   8038         SJMP    ??ZDMatchSendState_9
   2246            }
   2247          
   2248            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   00006F   90....       MOV     DPTR,#matchED
   \   000072   E0           MOVX    A,@DPTR
   \   000073   242F         ADD     A,#0x2f
   \   000075   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000078   E5..         MOV     A,?V0 + 2
   \   00007A   6006         JZ      ??ZDMatchSendState_10
   \   00007C   7403         MOV     A,#0x3
   \   00007E   65..         XRL     A,?V0 + 2
   \   000080   700F         JNZ     ??ZDMatchSendState_11
   2249            {
   2250              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_10:
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   2251          
   2252              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   000085   7403         MOV     A,#0x3
   \   000087   65..         XRL     A,?V0 + 2
   \   000089   7018         JNZ     ??ZDMatchSendState_12
   \   00008B   E5..         MOV     A,?V0 + 6
   \   00008D   6018         JZ      ??ZDMatchSendState_9
   2253              {
   2254                rspStatus = status;
   \   00008F   80D5         SJMP    ??ZDMatchSendState_7
   2255              }
   2256            }
   2257            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_11:
   \   000091   7402         MOV     A,#0x2
   \   000093   65..         XRL     A,?V0 + 2
   \   000095   7010         JNZ     ??ZDMatchSendState_9
   2258            {
   2259              if ( status == ZDP_SUCCESS )
   \   000097   E5..         MOV     A,?V0 + 6
   \   000099   7004         JNZ     ??ZDMatchSendState_13
   2260              {
   2261                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   00009B   7401         MOV     A,#0x1
   \   00009D   80CD         SJMP    ??ZDMatchSendState_8
   2262              }
   2263              else
   2264              {
   2265                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_13:
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   80C9         SJMP    ??ZDMatchSendState_8
   2266              }
   2267            }
   2268          
   2269            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_12:
   \   0000A3   E5..         MOV     A,?V0 + 2
   \   0000A5   6019         JZ      ??ZDMatchSendState_14
   \                     ??ZDMatchSendState_9:
   \   0000A7   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000AA   7014         JNZ     ??ZDMatchSendState_14
   2270            {
   2271              // Move to the next cluster ID
   2272              if ( matchED->ed1numMatched )
   \   0000AC   90....       MOV     DPTR,#matchED
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   2431         ADD     A,#0x31
   \   0000B2   08           INC     R0
   \   0000B3   08           INC     R0
   \   0000B4   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   0000B7   7005         JNZ     ??ZDMatchSendState_15
   2273                matchED->ed1numMatched--;
   2274              else if ( matchED->ed2numMatched )
   \   0000B9   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   0000BC   6002         JZ      ??ZDMatchSendState_14
   2275                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_15:
   \   0000BE   14           DEC     A
   \   0000BF   F0           MOVX    @DPTR,A
   2276            }
   2277          
   2278            // What message do we send now
   2279            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000C0   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000C3   FA           MOV     R2,A
   \   0000C4   90....       MOV     DPTR,#matchED
   \   0000C7   601E         JZ      ??ZDMatchSendState_16
   2280            {
   2281              ed = &(matchED->ed1);
   \   0000C9   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000CC   F5..         MOV     ?V0 + 1,A
   2282              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   0000CE   EA           MOV     A,R2
   \   0000CF   C3           CLR     C
   \   0000D0   33           RLC     A
   \   0000D1   F8           MOV     R0,A
   \   0000D2   E4           CLR     A
   \   0000D3   33           RLC     A
   \   0000D4   F9           MOV     R1,A
   \   0000D5   90....       MOV     DPTR,#matchED
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   2432         ADD     A,#0x32
   \   0000DB   12....       LCALL   ?Subroutine58 & 0xFFFF
   2283              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2284              dstEP = matchED->ed2.endpoint;
   2285            }
   \                     ??CrossCallReturnLabel_100:
   \   0000DE   241D         ADD     A,#0x1d
   \   0000E0   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000E3   2425         ADD     A,#0x25
   \   0000E5   802A         SJMP    ??ZDMatchSendState_17
   2286            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_16:
   \   0000E7   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0000EA   FA           MOV     R2,A
   \   0000EB   6029         JZ      ??ZDMatchSendState_18
   2287            {
   2288              ed = &(matchED->ed2);
   \   0000ED   90....       MOV     DPTR,#matchED
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   2417         ADD     A,#0x17
   \   0000F3   F5..         MOV     ?V0 + 0,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2289              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \                     ??CrossCallReturnLabel_486:
   \   0000FA   EA           MOV     A,R2
   \   0000FB   C3           CLR     C
   \   0000FC   33           RLC     A
   \   0000FD   F8           MOV     R0,A
   \   0000FE   E4           CLR     A
   \   0000FF   33           RLC     A
   \   000100   F9           MOV     R1,A
   \   000101   90....       MOV     DPTR,#matchED
   \   000104   E0           MOVX    A,@DPTR
   \   000105   2435         ADD     A,#0x35
   \   000107   12....       LCALL   ?Subroutine58 & 0xFFFF
   2290              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2291              dstEP = matchED->ed1.endpoint;
   2292            }
   \                     ??CrossCallReturnLabel_101:
   \   00010A   2406         ADD     A,#0x6
   \   00010C   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00010F   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_17:
   \   000111   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000114   F5..         MOV     ?V0 + 3,A
   2293          
   2294            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_18:
   \   000116   7409         MOV     A,#0x9
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   7402         MOV     A,#0x2
   \   00011D   12....       LCALL   ?Subroutine34 & 0xFFFF
   2295          
   2296            // Send the next message
   2297            if ( rspStatus == ZDP_SUCCESS && ed )
   \                     ??CrossCallReturnLabel_45:
   \   000120   6003         JZ      $+5
   \   000122   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   \   000125   E5..         MOV     A,?V0 + 0
   \   000127   7002         JNZ     ??ZDMatchSendState_20
   \   000129   E5..         MOV     A,?V0 + 1
   \                     ??ZDMatchSendState_20:
   \   00012B   7003         JNZ     $+5
   \   00012D   02....       LJMP    ??ZDMatchSendState_19 & 0xFFFF
   2298            {
   2299              // Send unbind/bind message to source
   2300              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   000130   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000133   7004         JNZ     ??ZDMatchSendState_21
   2301                msgType = Unbind_req;
   \   000135   7E22         MOV     R6,#0x22
   \   000137   8002         SJMP    ??ZDMatchSendState_22
   2302              else
   2303                msgType = Bind_req;
   \                     ??ZDMatchSendState_21:
   \   000139   7E21         MOV     R6,#0x21
   2304          
   2305              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_22:
   \   00013B   85..82       MOV     DPL,?V0 + 0
   \   00013E   85..83       MOV     DPH,?V0 + 1
   \   000141   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2306          
   2307              // Save off the transaction sequence number
   2308              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_323:
   \   00014A   90....       MOV     DPTR,#ZDP_TransID
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   C0E0         PUSH    A
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   E0           MOVX    A,@DPTR
   \   000154   2430         ADD     A,#0x30
   \   000156   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   2309          
   2310              destinationAddr.addrMode = Addr64Bit;
   \   00015C   7412         MOV     A,#0x12
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   7403         MOV     A,#0x3
   \   000163   F0           MOVX    @DPTR,A
   2311              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000164                ; Setup parameters for call to function sAddrExtCpy
   \   000164   AC..         MOV     R4,?V0 + 4
   \   000166   AD..         MOV     R5,?V0 + 5
   \   000168   740A         MOV     A,#0xa
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   AA82         MOV     R2,DPL
   \   00016F   AB83         MOV     R3,DPH
   \   000171   12....       LCALL   ??sAddrExtCpy?relay
   2312          
   2313              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2314                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000174                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000174   85..82       MOV     DPL,?V0 + 0
   \   000177   85..83       MOV     DPH,?V0 + 1
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F5..         MOV     ?V0 + 4,A
   \   00017E   78..         MOV     R0,#?V0 + 4
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000183   78..         MOV     R0,#?V0 + 3
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000188   740C         MOV     A,#0xc
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   8582..       MOV     ?V0 + 4,DPL
   \   000190   8583..       MOV     ?V0 + 5,DPH
   \   000193   78..         MOV     R0,#?V0 + 4
   \   000195   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000198   78..         MOV     R0,#?V0 + 8
   \   00019A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019D   E5..         MOV     A,?V0 + 0
   \   00019F   2406         ADD     A,#0x6
   \   0001A1   F5..         MOV     ?V0 + 4,A
   \   0001A3   E5..         MOV     A,?V0 + 1
   \   0001A5   3400         ADDC    A,#0x0
   \   0001A7   F5..         MOV     ?V0 + 5,A
   \   0001A9   78..         MOV     R0,#?V0 + 4
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AE   E5..         MOV     A,?V0 + 0
   \   0001B0   240E         ADD     A,#0xe
   \   0001B2   F582         MOV     DPL,A
   \   0001B4   E5..         MOV     A,?V0 + 1
   \   0001B6   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   0001B9   7409         MOV     A,#0x9
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   AC82         MOV     R4,DPL
   \   0001C0   AD83         MOV     R5,DPH
   \   0001C2   EE           MOV     A,R6
   \   0001C3   FA           MOV     R2,A
   \   0001C4   7B00         MOV     R3,#0x0
   \   0001C6   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   0001C9   7408         MOV     A,#0x8
   \   0001CB   12....       LCALL   ?DEALLOC_XSTACK8
   2315          
   2316              // Set timeout for response
   2317              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001CE                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001CE   12....       LCALL   ?Subroutine95 & 0xFFFF
   2318            }
   \                     ??CrossCallReturnLabel_165:
   \   0001D1   02....       LJMP    ??ZDMatchSendState_23 & 0xFFFF
   2319            else
   2320            {
   2321              // Send the response messages to requesting devices
   2322              // send response to first requester
   2323              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_19:
   \   0001D4   90....       MOV     DPTR,#matchED
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ?Subroutine19 & 0xFFFF
   2324              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_7:
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E4   7401         MOV     A,#0x1
   \   0001E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E9   8582..       MOV     ?V0 + 0,DPL
   \   0001EC   8583..       MOV     ?V0 + 1,DPH
   \   0001EF   78..         MOV     R0,#?V0 + 0
   \   0001F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F4   75..20       MOV     ?V0 + 0,#0x20
   \   0001F7   75..80       MOV     ?V0 + 1,#-0x80
   \   0001FA   78..         MOV     R0,#?V0 + 0
   \   0001FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FF   7901         MOV     R1,#0x1
   \   000201   7406         MOV     A,#0x6
   \   000203   12....       LCALL   ?XSTACK_DISP0_8
   \   000206   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000209   12....       LCALL   ?DEALLOC_XSTACK8
   2325          
   2326              // send response to second requester
   2327              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00020C   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00020F   7050         JNZ     ??ZDMatchSendState_24
   2328              {
   2329                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000211   90....       MOV     DPTR,#matchED
   \   000214   E0           MOVX    A,@DPTR
   \   000215   2419         ADD     A,#0x19
   \   000217   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   00021A   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2330                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \                     ??CrossCallReturnLabel_324:
   \   000223                ; Setup parameters for call to function ZDP_SendData
   \   000223   90....       MOV     DPTR,#matchED
   \   000226   E0           MOVX    A,@DPTR
   \   000227   2418         ADD     A,#0x18
   \   000229   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   2331              }
   \                     ??CrossCallReturnLabel_405:
   \   00022C   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   00022F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000232   7401         MOV     A,#0x1
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   8582..       MOV     ?V0 + 0,DPL
   \   00023A   8583..       MOV     ?V0 + 1,DPH
   \   00023D   78..         MOV     R0,#?V0 + 0
   \   00023F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000242   75..20       MOV     ?V0 + 0,#0x20
   \   000245   75..80       MOV     ?V0 + 1,#-0x80
   \   000248   78..         MOV     R0,#?V0 + 0
   \   00024A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024D   7901         MOV     R1,#0x1
   \   00024F   7406         MOV     A,#0x6
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   AC82         MOV     R4,DPL
   \   000256   AD83         MOV     R5,DPH
   \   000258   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00025B   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00025E   12....       LCALL   ?DEALLOC_XSTACK8
   2332          
   2333              // Process ended - release memory used
   2334              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_24:
   \   000261                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000261   12....       LCALL   ??ZDO_RemoveMatchMemory?relay
   2335            }
   2336          
   2337            return ( TRUE );
   \                     ??ZDMatchSendState_23:
   \   000264   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000266   7413         MOV     A,#0x13
   \   000268   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026B                REQUIRE ?Subroutine9
   \   00026B                ; // Fall through to label ?Subroutine9
   2338          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   90....       MOV     DPTR,#matchED
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   242F         ADD     A,#0x2f
   \   000006   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000009   6401         XRL     A,#0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   FB           MOV     R3,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   28           ADD     A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   39           ADDC    A,R1
   \   000010   F9           MOV     R1,A
   \   000011   74FE         MOV     A,#-0x2
   \   000013   28           ADD     A,R0
   \   000014   F582         MOV     DPL,A
   \   000016   74FF         MOV     A,#-0x1
   \   000018   39           ADDC    A,R1
   \   000019   F583         MOV     DPH,A
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 8,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 9,A
   \   000022   90....       MOV     DPTR,#matchED
   \   000025   E0           MOVX    A,@DPTR
   \   000026   22           RET
   2339          
   2340          /*********************************************************************
   2341           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2342           *
   2343           * @brief   End device bind timeout.
   2344           *
   2345           * @param  none
   2346           *
   2347           * @return  none
   2348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2349          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2350          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2351            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   ??ZDMatchSendState?relay
   2352          }
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2353          
   2354          /*********************************************************************
   2355           * ZDO MESSAGE PARSING API FUNCTIONS
   2356           */
   2357          
   2358          /*********************************************************************
   2359           * @fn          ZDO_ParseEndDeviceBindReq
   2360           *
   2361           * @brief       This function parses the End_Device_Bind_req message.
   2362           *
   2363           *     NOTE:  The clusters lists in bindReq are allocated in this
   2364           *            function and must be freed by that calling function.
   2365           *
   2366           * @param       inMsg  - incoming message (request)
   2367           * @param       bindReq - pointer to place to parse message to
   2368           *
   2369           * @return      none
   2370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2371          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2372          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2373            uint8 *msg;
   2374          
   2375            // Parse the message
   2376            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00000F   12....       LCALL   ?Subroutine45 & 0xFFFF
   2377            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_66:
   \   000012   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000015   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   2378            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_325:
   \   000018   EA           MOV     A,R2
   \   000019   240E         ADD     A,#0xe
   \   00001B   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   2379            msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000023   F5..         MOV     ?V0 + 3,A
   2380          
   2381            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000025   85..82       MOV     DPL,?V0 + 2
   \   000028   F583         MOV     DPH,A
   \   00002A   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   12....       LCALL   ?Subroutine13 & 0xFFFF
   2382            msg += 2;
   2383          
   2384            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??CrossCallReturnLabel_529:
   \   000034                ; Setup parameters for call to function sAddrExtCpy
   \   000034   AC..         MOV     R4,?V0 + 2
   \   000036   FD           MOV     R5,A
   \   000037   EE           MOV     A,R6
   \   000038   2406         ADD     A,#0x6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   12....       LCALL   ?Subroutine54 & 0xFFFF
   2385            msg += Z_EXTADDR_LEN;
   2386          
   2387            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_444:
   \   000041   C0E0         PUSH    A
   \   000043   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000046   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000049   D0E0         POP     A
   \   00004B   12....       LCALL   ?Subroutine22 & 0xFFFF
   2388            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_12:
   \   00004E   F8           MOV     R0,A
   \   00004F   EE           MOV     A,R6
   \   000050   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000053   EF           MOV     A,R7
   \   000054   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000057   E8           MOV     A,R0
   \   000058   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   2389            msg += 2;
   2390          
   2391            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_531:
   \   00005B   EE           MOV     A,R6
   \   00005C   2412         ADD     A,#0x12
   \   00005E   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   F0           MOVX    @DPTR,A
   2392            bindReq->outClusters = NULL;
   \   000065   EE           MOV     A,R6
   \   000066   2415         ADD     A,#0x15
   \   000068   F5..         MOV     ?V0 + 6,A
   \   00006A   EF           MOV     A,R7
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F5..         MOV     ?V0 + 7,A
   \   00006F   85..82       MOV     DPL,?V0 + 6
   \   000072   F583         MOV     DPH,A
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ?Subroutine52 & 0xFFFF
   2393          
   2394            if ((bindReq->numInClusters = *msg++) &&
   2395                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_84:
   \   00007A   A3           INC     DPTR
   \   00007B   8582..       MOV     ?V0 + 2,DPL
   \   00007E   8583..       MOV     ?V0 + 3,DPH
   \   000081   EE           MOV     A,R6
   \   000082   2411         ADD     A,#0x11
   \   000084   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000087   85..82       MOV     DPL,?V0 + 0
   \   00008A   F583         MOV     DPH,A
   \   00008C   EA           MOV     A,R2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   6036         JZ      ??ZDO_ParseEndDeviceBindReq_0
   \   000090                ; Setup parameters for call to function osal_mem_alloc
   \   000090   C3           CLR     C
   \   000091   33           RLC     A
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??osal_mem_alloc?relay
   \   000099   85..82       MOV     DPL,?V0 + 4
   \   00009C   85..83       MOV     DPH,?V0 + 5
   \   00009F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000A2   85..82       MOV     DPL,?V0 + 4
   \   0000A5   85..83       MOV     DPH,?V0 + 5
   \   0000A8   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000AB   EC           MOV     A,R4
   \   0000AC   7001         JNZ     ??ZDO_ParseEndDeviceBindReq_1
   \   0000AE   ED           MOV     A,R5
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000AF   6015         JZ      ??ZDO_ParseEndDeviceBindReq_0
   2396            {
   2397              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000B1                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000B1   AA..         MOV     R2,?V0 + 2
   \   0000B3   AB..         MOV     R3,?V0 + 3
   \   0000B5   85..82       MOV     DPL,?V0 + 0
   \   0000B8   85..83       MOV     DPH,?V0 + 1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F9           MOV     R1,A
   \   0000BD   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000C0   8A..         MOV     ?V0 + 2,R2
   \   0000C2   8B..         MOV     ?V0 + 3,R3
   \   0000C4   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_2
   2398            }
   2399            else
   2400            {
   2401              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   0000C6   E4           CLR     A
   \   0000C7   85..82       MOV     DPL,?V0 + 0
   \   0000CA   85..83       MOV     DPH,?V0 + 1
   \   0000CD   F0           MOVX    @DPTR,A
   2402            }
   2403          
   2404            if ((bindReq->numOutClusters = *msg++) &&
   2405                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000CE   85..82       MOV     DPL,?V0 + 2
   \   0000D1   85..83       MOV     DPH,?V0 + 3
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FA           MOV     R2,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   8582..       MOV     ?V0 + 2,DPL
   \   0000DA   8583..       MOV     ?V0 + 3,DPH
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2414         ADD     A,#0x14
   \   0000E0   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000E3   EA           MOV     A,R2
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   6030         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000E7                ; Setup parameters for call to function osal_mem_alloc
   \   0000E7   C3           CLR     C
   \   0000E8   33           RLC     A
   \   0000E9   FA           MOV     R2,A
   \   0000EA   E4           CLR     A
   \   0000EB   33           RLC     A
   \   0000EC   FB           MOV     R3,A
   \   0000ED   12....       LCALL   ??osal_mem_alloc?relay
   \   0000F0   85..82       MOV     DPL,?V0 + 6
   \   0000F3   85..83       MOV     DPH,?V0 + 7
   \   0000F6   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000F9   85..82       MOV     DPL,?V0 + 6
   \   0000FC   85..83       MOV     DPH,?V0 + 7
   \   0000FF   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000102   EC           MOV     A,R4
   \   000103   7001         JNZ     ??ZDO_ParseEndDeviceBindReq_4
   \   000105   ED           MOV     A,R5
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   000106   600F         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2406            {
   2407              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   000108                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000108   AA..         MOV     R2,?V0 + 2
   \   00010A   AB..         MOV     R3,?V0 + 3
   \   00010C   8E82         MOV     DPL,R6
   \   00010E   8F83         MOV     DPH,R7
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F9           MOV     R1,A
   \   000112   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000115   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_5
   2408            }
   2409            else
   2410            {
   2411              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   000117   E4           CLR     A
   \   000118   8E82         MOV     DPL,R6
   \   00011A   8F83         MOV     DPH,R7
   \   00011C   F0           MOVX    @DPTR,A
   2412            }
   2413          }
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00011D   7F09         MOV     R7,#0x9
   \   00011F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000006   8E82         MOV     DPL,R6
   \   000008   8F83         MOV     DPH,R7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003                REQUIRE ??Subroutine214_0
   \   000003                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine215_0
   \   000001                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   2408         ADD     A,#0x8
   \   000007   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine226_0
   \   000004                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   E5..         MOV     A,?V0 + 3
   \   00000C   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET
   2414          
   2415          /*********************************************************************
   2416           * @fn          ZDO_ParseBindUnbindReq
   2417           *
   2418           * @brief       This function parses the Bind_req or Unbind_req message.
   2419           *
   2420           * @param       inMsg  - incoming message (request)
   2421           * @param       pReq - place to put parsed information
   2422           *
   2423           * @return      none
   2424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2425          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2426          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2427            uint8 *msg;
   2428          
   2429            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine105 & 0xFFFF
   2430            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_182:
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ?Subroutine55 & 0xFFFF
   2431            msg += Z_EXTADDR_LEN;
   2432            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_88:
   \   000016   85..82       MOV     DPL,?V0 + 0
   \   000019   85..83       MOV     DPH,?V0 + 1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine30 & 0xFFFF
   2433            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_26:
   \   000027   85..82       MOV     DPL,?V0 + 0
   \   00002A   85..83       MOV     DPH,?V0 + 1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine14 & 0xFFFF
   2434            msg += 2;
   2435            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_539:
   \   000036   FC           MOV     R4,A
   \   000037   E5..         MOV     A,?V0 + 0
   \   000039   2413         ADD     A,#0x13
   \   00003B   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   00003E   EC           MOV     A,R4
   \   00003F   12....       LCALL   ?Subroutine43 & 0xFFFF
   2436            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_62:
   \   000042   240B         ADD     A,#0xb
   \   000044   FA           MOV     R2,A
   \   000045   E5..         MOV     A,?V0 + 1
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   7403         MOV     A,#0x3
   \   00004C   6C           XRL     A,R4
   \   00004D   7014         JNZ     ??ZDO_ParseBindUnbindReq_0
   2437            {
   2438              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004F                ; Setup parameters for call to function sAddrExtCpy
   \   00004F   EE           MOV     A,R6
   \   000050   FC           MOV     R4,A
   \   000051   EF           MOV     A,R7
   \   000052   FD           MOV     R5,A
   \   000053   12....       LCALL   ?Subroutine56 & 0xFFFF
   2439              msg += Z_EXTADDR_LEN;
   2440              pReq->dstEndpoint = *msg;
   2441            }
   \                     ??CrossCallReturnLabel_90:
   \   000056   C0E0         PUSH    A
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   2414         ADD     A,#0x14
   \   00005C   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   00005F   D0E0         POP     A
   \   000061   8006         SJMP    ??ZDO_ParseBindUnbindReq_1
   2442            else
   2443            {
   2444              // copy group address
   2445              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000063   12....       LCALL   ?Subroutine91 & 0xFFFF
   2446            }
   \                     ??CrossCallReturnLabel_156:
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000069   F0           MOVX    @DPTR,A
   2447          }
   \   00006A   02....       LJMP    ??Subroutine182_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   EE           MOV     A,R6
   \   000004   2408         ADD     A,#0x8
   \   000006   FE           MOV     R6,A
   \   000007   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine225_0
   \   000004                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine227_0
   \   000002                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine228_0
   \   000004                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ??sAddrExtCpy?relay
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
   2448          
   2449          /*********************************************************************
   2450           * @fn      ZDO_ParseAddrRsp
   2451           *
   2452           * @brief   Turns the inMsg (incoming message) into the out parsed
   2453           *          structure.
   2454           *
   2455           * @param   inMsg - incoming message
   2456           *
   2457           * @return  pointer to parsed structures.  This structure was
   2458           *          allocated using osal_mem_alloc, so it must be freed
   2459           *          by the calling function [osal_mem_free()].
   2460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2461          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2462          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2463            ZDO_NwkIEEEAddrResp_t *rsp;
   2464            uint8 *msg;
   2465            byte cnt = 0;
   2466          
   2467            // Calculate the number of items in the list
   2468            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   FE           MOV     R6,A
   \   00000F   E9           MOV     A,R1
   \   000010   FF           MOV     R7,A
   \   000011   EA           MOV     A,R2
   \   000012   2410         ADD     A,#0x10
   \   000014   F582         MOV     DPL,A
   \   000016   EB           MOV     A,R3
   \   000017   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   00001A   C3           CLR     C
   \   00001B   940C         SUBB    A,#0xc
   \   00001D   400E         JC      ??ZDO_ParseAddrRsp_0
   2469              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   E0           MOVX    A,@DPTR
   \   000024   240B         ADD     A,#0xb
   \   000026   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2470            else
   2471              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   2472          
   2473            // Make buffer
   2474            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   000030                ; Setup parameters for call to function osal_mem_alloc
   \   000030   E5..         MOV     A,?V0 + 2
   \   000032   C3           CLR     C
   \   000033   33           RLC     A
   \   000034   F8           MOV     R0,A
   \   000035   E4           CLR     A
   \   000036   33           RLC     A
   \   000037   F9           MOV     R1,A
   \   000038   740D         MOV     A,#0xd
   \   00003A   12....       LCALL   ?Subroutine127 & 0xFFFF
   2475          
   2476            if ( rsp )
   \                     ??CrossCallReturnLabel_216:
   \   00003D   7001         JNZ     ??ZDO_ParseAddrRsp_2
   \   00003F   EB           MOV     A,R3
   \                     ??ZDO_ParseAddrRsp_2:
   \   000040   607D         JZ      ??ZDO_ParseAddrRsp_3
   2477            {
   2478              msg = inMsg->asdu;
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   2479          
   2480              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_498:
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   12....       LCALL   ?Subroutine46 & 0xFFFF
   2481              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_69:
   \   000050   706D         JNZ     ??ZDO_ParseAddrRsp_3
   2482              {
   2483                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000052                ; Setup parameters for call to function sAddrExtCpy
   \   000052   EE           MOV     A,R6
   \   000053   FC           MOV     R4,A
   \   000054   EF           MOV     A,R7
   \   000055   FD           MOV     R5,A
   \   000056   EA           MOV     A,R2
   \   000057   2403         ADD     A,#0x3
   \   000059   0A           INC     R2
   \   00005A   0A           INC     R2
   \   00005B   0A           INC     R2
   \   00005C   EB           MOV     A,R3
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ?Subroutine55 & 0xFFFF
   2484                msg += Z_EXTADDR_LEN;
   2485                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_89:
   \   000063   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000066   12....       LCALL   ?Subroutine33 & 0xFFFF
   2486          
   2487                msg += 2;
   2488                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_42:
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   240B         ADD     A,#0xb
   \   00006D   F8           MOV     R0,A
   \   00006E   E5..         MOV     A,?V0 + 1
   \   000070   3400         ADDC    A,#0x0
   \   000072   F9           MOV     R1,A
   \   000073   E8           MOV     A,R0
   \   000074   FA           MOV     R2,A
   \   000075   E9           MOV     A,R1
   \   000076   FB           MOV     R3,A
   \   000077   E4           CLR     A
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   F0           MOVX    @DPTR,A
   2489          
   2490                // StartIndex field is only present if NumAssocDev field is non-zero.
   2491                if ( cnt > 0 )
   \   00007D   E5..         MOV     A,?V0 + 2
   \   00007F   603E         JZ      ??ZDO_ParseAddrRsp_3
   2492                {
   2493                  uint16 *pList = &(rsp->devList[0]);
   \   000081   E5..         MOV     A,?V0 + 0
   \   000083   240D         ADD     A,#0xd
   \   000085   08           INC     R0
   \   000086   08           INC     R0
   \   000087   E5..         MOV     A,?V0 + 1
   \   000089   3400         ADDC    A,#0x0
   \   00008B   F9           MOV     R1,A
   2494                  byte n = cnt;
   \   00008C   85....       MOV     ?V0 + 3,?V0 + 2
   2495          
   2496                  rsp->numAssocDevs = *msg++;
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   E0           MOVX    A,@DPTR
   \   000094   8A82         MOV     DPL,R2
   \   000096   8B83         MOV     DPH,R3
   \   000098   12....       LCALL   ?Subroutine27 & 0xFFFF
   2497                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_21:
   \   00009B   C0E0         PUSH    A
   \   00009D   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   0000A0   D0E0         POP     A
   \   0000A2   12....       LCALL   ?Subroutine48 & 0xFFFF
   2498          
   2499                  while ( n != 0 )
   2500                  {
   2501                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_73:
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FC           MOV     R4,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FB           MOV     R3,A
   \   0000AE   EC           MOV     A,R4
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   12....       LCALL   ?Subroutine31 & 0xFFFF
   2502                    msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_29:
   \   0000B6   12....       LCALL   ?Subroutine125 & 0xFFFF
   2503                    n--;
   2504                  }
   \                     ??CrossCallReturnLabel_208:
   \   0000B9   15..         DEC     ?V0 + 3
   \   0000BB   E5..         MOV     A,?V0 + 3
   \   0000BD   70E6         JNZ     ??CrossCallReturnLabel_73
   2505                }
   2506              }
   2507            }
   2508            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000BF   AA..         MOV     R2,?V0 + 0
   \   0000C1   AB..         MOV     R3,?V0 + 1
   \   0000C3                REQUIRE ?Subroutine4
   \   0000C3                ; // Fall through to label ?Subroutine4
   2509          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   E8           MOV     A,R0
   \   000001   2402         ADD     A,#0x2
   \   000003   08           INC     R0
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   28           ADD     A,R0
   \   000001   FA           MOV     R2,A
   \   000002   E4           CLR     A
   \   000003   39           ADDC    A,R1
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ??osal_mem_alloc?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   EA           MOV     A,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine224_0
   \   000004                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   2510          
   2511          /*********************************************************************
   2512           * @fn          ZDO_ParseNodeDescRsp
   2513           *
   2514           * @brief       This function parses the Node_Desc_rsp message.
   2515           *
   2516           * @param       inMsg - incoming message
   2517           * @param       pNDRsp - place to parse the message into
   2518           *
   2519           * @return      none
   2520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2521          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2522          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2523            uint8 *msg;
   2524          
   2525            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine16 & 0xFFFF
   2526          
   2527            pNDRsp->status = *msg++;
   2528            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2529          
   2530            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2531            {
   2532              msg += 2;
   \   00000D   12....       LCALL   ?Subroutine167 & 0xFFFF
   2533              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??CrossCallReturnLabel_273:
   \   000010   EC           MOV     A,R4
   \   000011   2403         ADD     A,#0x3
   \   000013   FA           MOV     R2,A
   \   000014   ED           MOV     A,R5
   \   000015   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000018   5407         ANL     A,#0x7
   \   00001A   C0E0         PUSH    A
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   E0           MOVX    A,@DPTR
   \   000021   54F8         ANL     A,#0xf8
   \   000023   FE           MOV     R6,A
   \   000024   D0E0         POP     A
   \   000026   4E           ORL     A,R6
   \   000027   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2534          
   2535              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_480:
   \   00002A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   8A82         MOV     DPL,R2
   \   000030   E0           MOVX    A,@DPTR
   \   000031   92E3         MOV     0xE0 /* A   */.3,C
   \   000033   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2536              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_481:
   \   000036   A2E4         MOV     C,0xE0 /* A   */.4
   \   000038   8B83         MOV     DPH,R3
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E4         MOV     0xE0 /* A   */.4,C
   \   00003F   12....       LCALL   ?Subroutine50 & 0xFFFF
   2537          
   2538              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_78:
   \   000042   08           INC     R0
   \   000043   A983         MOV     R1,DPH
   2539              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000045   EC           MOV     A,R4
   \   000046   2404         ADD     A,#0x4
   \   000048   0A           INC     R2
   \   000049   ED           MOV     A,R5
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FB           MOV     R3,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   54F8         ANL     A,#0xf8
   \   000050   C0E0         PUSH    A
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   5407         ANL     A,#0x7
   \   000059   FE           MOV     R6,A
   \   00005A   D0E0         POP     A
   \   00005C   4E           ORL     A,R6
   \   00005D   FE           MOV     R6,A
   \   00005E   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2540              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_482:
   \   000061   5407         ANL     A,#0x7
   \   000063   C0E0         PUSH    A
   \   000065   74F8         MOV     A,#-0x8
   \   000067   5E           ANL     A,R6
   \   000068   FE           MOV     R6,A
   \   000069   D0E0         POP     A
   \   00006B   4E           ORL     A,R6
   \   00006C   A3           INC     DPTR
   \   00006D   08           INC     R0
   \   00006E   A983         MOV     R1,DPH
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2541              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_483:
   \   000077   8C82         MOV     DPL,R4
   \   000079   8D83         MOV     DPH,R5
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ?Subroutine28 & 0xFFFF
   2542              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_449:
   \   000082   8C82         MOV     DPL,R4
   \   000084   8D83         MOV     DPH,R5
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   12....       LCALL   ?Subroutine20 & 0xFFFF
   2543              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_8:
   \   00008F   12....       LCALL   ?Subroutine20 & 0xFFFF
   2544              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_9:
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine18 & 0xFFFF
   2545              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   000096   12....       LCALL   ?Subroutine18 & 0xFFFF
   2546              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_5:
   \   000099   12....       LCALL   ?Subroutine28 & 0xFFFF
   2547              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_450:
   \   00009C   FE           MOV     R6,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   EE           MOV     A,R6
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EC           MOV     A,R4
   \   0000A3   240B         ADD     A,#0xb
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   ED           MOV     A,R5
   \   0000A8   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   0000AB   EA           MOV     A,R2
   \   0000AC   12....       LCALL   ?Subroutine31 & 0xFFFF
   2548              msg += 2;
   2549              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_28:
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   8983         MOV     DPH,R1
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   EC           MOV     A,R4
   \   0000B7   240D         ADD     A,#0xd
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   ED           MOV     A,R5
   \   0000BC   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   2550              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_451:
   \   0000C4   C0E0         PUSH    A
   \   0000C6   EC           MOV     A,R4
   \   0000C7   240E         ADD     A,#0xe
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   ED           MOV     A,R5
   \   0000CC   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000CF   D0E0         POP     A
   \   0000D1   12....       LCALL   ?Subroutine50 & 0xFFFF
   2551              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_79:
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C0E0         PUSH    A
   \   0000D7   EC           MOV     A,R4
   \   0000D8   12....       LCALL   ?Subroutine126 & 0xFFFF
   2552            }
   \                     ??CrossCallReturnLabel_215:
   \   0000DB   ED           MOV     A,R5
   \   0000DC   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   0000DF   D0E0         POP     A
   \   0000E1   F0           MOVX    @DPTR,A
   2553          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000E2                REQUIRE ?Subroutine10
   \   0000E2                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine217_0
   \   000001                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2554          
   2555          /*********************************************************************
   2556           * @fn          ZDO_ParesPowerDescRsp
   2557           *
   2558           * @brief       This function parses the Power_Desc_rsp message.
   2559           *
   2560           * @param       inMsg  - incoming message
   2561           * @param       pNPRsp - place to parse the message into
   2562           *
   2563           * @return      none
   2564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F9           MOV     R1,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine189_0
   \   000005                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2565          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2566          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2567            uint8 *msg;
   2568          
   2569            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000008   12....       LCALL   ?Subroutine94 & 0xFFFF
   2570            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_162:
   \   00000B   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00000E   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2571            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   EE           MOV     A,R6
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   A3           INC     DPTR
   \   000020   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2572          
   2573            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_313:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   707D         JNZ     ??CrossCallReturnLabel_328
   2574            {
   2575              msg += 2;
   \   00002A   12....       LCALL   ?Subroutine124 & 0xFFFF
   2576              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??CrossCallReturnLabel_207:
   \   00002D   EC           MOV     A,R4
   \   00002E   2403         ADD     A,#0x3
   \   000030   ED           MOV     A,R5
   \   000031   3400         ADDC    A,#0x0
   \   000033   0C           INC     R4
   \   000034   0C           INC     R4
   \   000035   0C           INC     R4
   \   000036   FD           MOV     R5,A
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   540F         ANL     A,#0xf
   \   00003E   FE           MOV     R6,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FF           MOV     R7,A
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C4           SWAP    A
   \   000048   540F         ANL     A,#0xf
   \   00004A   F5..         MOV     ?V0 + 0,A
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   7404         MOV     A,#0x4
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?S_SHL
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   4E           ORL     A,R6
   \   000059   F8           MOV     R0,A
   \   00005A   EF           MOV     A,R7
   \   00005B   12....       LCALL   ?Subroutine42 & 0xFFFF
   2577              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_326:
   \   00005E   74F0         MOV     A,#-0x10
   \   000060   58           ANL     A,R0
   \   000061   F8           MOV     R0,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FE           MOV     R6,A
   \   000068   740F         MOV     A,#0xf
   \   00006A   5E           ANL     A,R6
   \   00006B   48           ORL     A,R0
   \   00006C   FE           MOV     R6,A
   \   00006D   A3           INC     DPTR
   \   00006E   0A           INC     R2
   \   00006F   AB83         MOV     R3,DPH
   \   000071   8C82         MOV     DPL,R4
   \   000073   8D83         MOV     DPH,R5
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   EF           MOV     A,R7
   \   000078   F0           MOVX    @DPTR,A
   2578              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   000079   740F         MOV     A,#0xf
   \   00007B   59           ANL     A,R1
   \   00007C   FF           MOV     R7,A
   \   00007D   8A82         MOV     DPL,R2
   \   00007F   8B83         MOV     DPH,R3
   \   000081   E0           MOVX    A,@DPTR
   \   000082   C4           SWAP    A
   \   000083   540F         ANL     A,#0xf
   \   000085   F5..         MOV     ?V0 + 0,A
   \   000087   740C         MOV     A,#0xc
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?S_SHL
   \   00008E   EE           MOV     A,R6
   \   00008F   F8           MOV     R0,A
   \   000090   E5..         MOV     A,?V0 + 1
   \   000092   4F           ORL     A,R7
   \   000093   12....       LCALL   ?Subroutine42 & 0xFFFF
   2579              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_327:
   \   000096   74F0         MOV     A,#-0x10
   \   000098   59           ANL     A,R1
   \   000099   F9           MOV     R1,A
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FF           MOV     R7,A
   \   0000A0   740F         MOV     A,#0xf
   \   0000A2   5F           ANL     A,R7
   \   0000A3   49           ORL     A,R1
   \   0000A4   12....       LCALL   ?Subroutine42 & 0xFFFF
   2580            }
   2581          }
   \                     ??CrossCallReturnLabel_328:
   \   0000A7   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   2582          
   2583          /*********************************************************************
   2584           * @fn          ZDO_ParseSimpleDescRsp
   2585           *
   2586           * @brief       This function parse the Simple_Desc_rsp message.
   2587           *
   2588           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2589           *         in the SimpleDescriptionFormat_t structure are allocated
   2590           *         and the calling function needs to free [osal_msg_free()]
   2591           *         these buffers.
   2592           *
   2593           * @param       inMsg  - incoming message
   2594           * @param       pSimpleDescRsp - place to parse the message into
   2595           *
   2596           * @return      none
   2597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2598          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2599          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2600            uint8 *msg;
   2601          
   2602            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine16 & 0xFFFF
   2603            pSimpleDescRsp->status = *msg++;
   2604            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2605            msg += sizeof ( uint16 );
   2606            msg++; // Skip past the length field.
   2607          
   2608            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7015         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2609            {
   2610              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   0C           INC     R4
   \   00000E   0C           INC     R4
   \   00000F   0C           INC     R4
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   E8           MOV     A,R0
   \   000015   2403         ADD     A,#0x3
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   3400         ADDC    A,#0x0
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay
   2611            }
   2612          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001F   02....       LJMP    ?Subroutine10 & 0xFFFF
   2613          
   2614          /*********************************************************************
   2615           * @fn          ZDO_ParseEPListRsp
   2616           *
   2617           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2618           *
   2619           * @param       inMsg  - incoming message
   2620           *
   2621           * @return      none
   2622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine199_0
   \   000004                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2623          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2624          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2625            ZDO_ActiveEndpointRsp_t *pRsp;
   2626            uint8 *msg;
   2627            uint8 Status;
   2628            uint8 cnt;
   2629          
   2630            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine98 & 0xFFFF
   2631            Status = *msg++;
   \                     ??CrossCallReturnLabel_443:
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 5,A
   \   000010   A3           INC     DPTR
   \   000011   8582..       MOV     ?V0 + 2,DPL
   \   000014   8583..       MOV     ?V0 + 3,DPH
   2632            cnt = msg[2];
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 4,A
   2633          
   2634            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00001C   F582         MOV     DPL,A
   \   00001E   12....       LCALL   ?Subroutine110 & 0xFFFF
   2635            if ( pRsp )
   \                     ??CrossCallReturnLabel_187:
   \   000021   7001         JNZ     ??ZDO_ParseEPListRsp_0
   \   000023   EF           MOV     A,R7
   \                     ??ZDO_ParseEPListRsp_0:
   \   000024   602A         JZ      ??ZDO_ParseEPListRsp_1
   2636            {
   2637              pRsp->status = Status;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E5..         MOV     A,?V0 + 5
   \   00002C   12....       LCALL   ?Subroutine52 & 0xFFFF
   2638              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_85:
   \   00002F   12....       LCALL   ?Subroutine25 & 0xFFFF
   2639              msg += sizeof( uint16 );
   2640              pRsp->cnt = cnt;
   2641              msg++; // pass cnt
   2642              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_466:
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   85..82       MOV     DPL,?V0 + 2
   \   000035   85..83       MOV     DPH,?V0 + 3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A982         MOV     R1,DPL
   \   00003D   AA83         MOV     R2,DPH
   \   00003F   89..         MOV     ?V0 + 4,R1
   \   000041   8A..         MOV     ?V0 + 5,R2
   \   000043   88..         MOV     ?V0 + 6,R0
   \   000045   78..         MOV     R0,#?V0 + 4
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004A   12....       LCALL   ?Subroutine111 & 0xFFFF
   2643            }
   \                     ??CrossCallReturnLabel_463:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   2644          
   2645            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_1:
   \   000050   02....       LJMP    ?Subroutine7 & 0xFFFF
   2646          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   AC..         MOV     R4,?V0 + 0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005   2404         ADD     A,#0x4
   \   000007   FA           MOV     R2,A
   \   000008   EF           MOV     A,R7
   \   000009                REQUIRE ??Subroutine219_0
   \   000009                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_memcpy?relay
   \   000006   7403         MOV     A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F                REQUIRE ??Subroutine220_0
   \   00000F                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   8582..       MOV     ?V0 + 0,DPL
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   7404         MOV     A,#0x4
   \   000005   25..         ADD     A,?V0 + 0
   \   000007   FA           MOV     R2,A
   \   000008   E4           CLR     A
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   ??osal_mem_alloc?relay
   \   00000F   8A..         MOV     ?V0 + 6,R2
   \   000011   8B..         MOV     ?V0 + 7,R3
   \   000013   AE..         MOV     R6,?V0 + 6
   \   000015   AF..         MOV     R7,?V0 + 7
   \   000017   EE           MOV     A,R6
   \   000018   22           RET
   2647          
   2648          /*********************************************************************
   2649           * @fn          ZDO_ParseServerDiscRsp
   2650           *
   2651           * @brief       Parse the Server_Discovery_rsp message.
   2652           *
   2653           * @param       inMsg - incoming message.
   2654           * @param       pRsp - place to put the parsed information.
   2655           *
   2656           * @return      none
   2657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2658          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2659          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2660            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00000D   FA           MOV     R2,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F583         MOV     DPH,A
   \   000012   8A82         MOV     DPL,R2
   \   000014   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000017   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2661            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_484:
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EA           MOV     A,R2
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2662          }
   \                     ??CrossCallReturnLabel_314:
   \   000036   02....       LJMP    ?Subroutine10 & 0xFFFF
   2663          
   2664          /*********************************************************************
   2665           * @fn          ZDO_ParseMgmtLqiRsp
   2666           *
   2667           * @brief       This function parses the incoming Management
   2668           *              LQI response
   2669           *
   2670           * @param       inMsg - incoming message
   2671           *
   2672           * @return      a pointer to parsed response structure (NULL if not allocated).
   2673           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2674           *          by the calling function [osal_mem_free()].
   2675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2676          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2677          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2678            ZDO_MgmtLqiRsp_t *pRsp;
   2679            uint8 status;
   2680            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V0 + 5,#0x0
   2681            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   2682            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   2683            uint8 *msg;
   2684          
   2685            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine68 & 0xFFFF
   2686          
   2687            status = *msg++;
   2688            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_111:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_119
   2689            {
   2690              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine72 & 0xFFFF
   2691              startIndex = *msg++;
   2692              neighborLqiCount = *msg++;
   2693            }
   2694          
   2695            // Allocate a buffer big enough to handle the list.
   2696            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2697                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??CrossCallReturnLabel_119:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F00E       MOV     B,#0xe
   \   00001B   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AE..         MOV     R6,?V0 + 0
   \   000024   AF..         MOV     R7,?V0 + 1
   2698            if ( pRsp )
   \   000026   EE           MOV     A,R6
   \   000027   7001         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   \   000029   EF           MOV     A,R7
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00002A   6070         JZ      ??ZDO_ParseMgmtLqiRsp_1
   2699            {
   2700              uint8 x;
   2701              neighborLqiItem_t *pList = pRsp->list;
   \   00002C   EE           MOV     A,R6
   \   00002D   2404         ADD     A,#0x4
   \   00002F   12....       LCALL   ?Subroutine114 & 0xFFFF
   2702              pRsp->status = status;
   \                     ??CrossCallReturnLabel_493:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E5..         MOV     A,?V0 + 7
   \   000038   F0           MOVX    @DPTR,A
   2703              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V0 + 6
   \   00003C   12....       LCALL   ?Subroutine41 & 0xFFFF
   2704              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_61:
   \   00003F   E5..         MOV     A,?V0 + 5
   \   000041   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2705              pRsp->neighborLqiCount = neighborLqiCount;
   2706          
   2707              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_468:
   \   000044   75..00       MOV     ?V0 + 5,#0x0
   \   000047   804C         SJMP    ??ZDO_ParseMgmtLqiRsp_2
   2708              {
   2709                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000049                ; Setup parameters for call to function sAddrExtCpy
   \   000049   AC..         MOV     R4,?V0 + 2
   \   00004B   AD..         MOV     R5,?V0 + 3
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   2404         ADD     A,#0x4
   \   000051   FA           MOV     R2,A
   \   000052   E5..         MOV     A,?V0 + 1
   \   000054   3400         ADDC    A,#0x0
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   ??sAddrExtCpy?relay
   2710                msg += Z_EXTADDR_LEN;
   2711          
   2712                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   00005A   E5..         MOV     A,?V0 + 2
   \   00005C   2410         ADD     A,#0x10
   \   00005E   12....       LCALL   ?Subroutine121 & 0xFFFF
   2713                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_200:
   \   000061   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2714                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \                     ??CrossCallReturnLabel_315:
   \   00006D   E5..         MOV     A,?V0 + 2
   \   00006F   2405         ADD     A,#0x5
   \   000071   12....       LCALL   ?Subroutine121 & 0xFFFF
   2715                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_201:
   \   000074   E0           MOVX    A,@DPTR
   \   000075   C0E0         PUSH    A
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   240D         ADD     A,#0xd
   \   00007B   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   00007E   D0E0         POP     A
   \   000080   12....       LCALL   ?Subroutine23 & 0xFFFF
   2716                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??CrossCallReturnLabel_14:
   \   000083   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
   2717                pList++;
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   240E         ADD     A,#0xe
   \   00008C   F5..         MOV     ?V0 + 0,A
   \   00008E   E5..         MOV     A,?V0 + 1
   \   000090   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2718              }
   \                     ??CrossCallReturnLabel_487:
   \   000093   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000095   E5..         MOV     A,?V0 + 5
   \   000097   C3           CLR     C
   \   000098   95..         SUBB    A,?V0 + 4
   \   00009A   40AD         JC      ??ZDO_ParseMgmtLqiRsp_3
   2719            }
   2720          
   2721            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00009C   02....       LJMP    ?Subroutine7 & 0xFFFF
   2722          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   7404         MOV     A,#0x4
   \   000006   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 4,A
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 7,A
   \   000010   A3           INC     DPTR
   \   000011   8582..       MOV     ?V0 + 2,DPL
   \   000014   8583..       MOV     ?V0 + 3,DPH
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   22           RET
   2723          
   2724          /*********************************************************************
   2725           * @fn          ZDO_ParseMgmNwkDiscRsp
   2726           *
   2727           * @brief       This function parses the incoming Management
   2728           *              Network Discover response.
   2729           *
   2730           * @param       inMsg - incoming message
   2731           *
   2732           * @return      pointer to parsed response.  This structure was
   2733           *          allocated using osal_mem_alloc, so it must be freed
   2734           *          by the calling function [osal_mem_free()].
   2735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2736          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2737          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2738            ZDO_MgmNwkDiscRsp_t *pRsp;
   2739            uint8 status;
   2740            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2741            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2742            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2743            uint8 *msg;
   2744          
   2745            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine59 & 0xFFFF
   2746            status = *msg++;
   \                     ??CrossCallReturnLabel_495:
   \   000011   F5..         MOV     ?V0 + 7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2747          
   2748            if ( status == ZSuccess )
   \   000018   7008         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2749            {
   2750              networkCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine148 & 0xFFFF
   2751              startIndex = *msg++;
   2752              networkListCount = *msg++;
   2753            }
   \                     ??CrossCallReturnLabel_245:
   \   00001D   0E           INC     R6
   \   00001E   0E           INC     R6
   \   00001F   0E           INC     R6
   \   000020   AF83         MOV     R7,DPH
   2754          
   2755            // Allocate a buffer big enough to handle the list.
   2756            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2757                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   85....       MOV     ?V0 + 0,?V0 + 4
   \   000025   75..00       MOV     ?V0 + 1,#0x0
   \   000028   7404         MOV     A,#0x4
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?S_SHL
   \   00002F   7404         MOV     A,#0x4
   \   000031   25..         ADD     A,?V0 + 0
   \   000033   FA           MOV     R2,A
   \   000034   E4           CLR     A
   \   000035   35..         ADDC    A,?V0 + 1
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ??osal_mem_alloc?relay
   \   00003B   8A..         MOV     ?V0 + 2,R2
   \   00003D   8B..         MOV     ?V0 + 3,R3
   2758            if ( pRsp )
   \   00003F   EA           MOV     A,R2
   \   000040   7001         JNZ     ??ZDO_ParseMgmNwkDiscRsp_1
   \   000042   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   2759            {
   2760              uint8 x;
   2761              mgmtNwkDiscItem_t *pList;
   2762          
   2763              pRsp->status = status;
   \   000048   12....       LCALL   ?Subroutine17 & 0xFFFF
   2764              pRsp->networkCount = networkCount;
   2765              pRsp->startIndex = startIndex;
   2766              pRsp->networkListCount = networkListCount;
   2767              pList = pRsp->list;
   \                     ??CrossCallReturnLabel_2:
   \   00004B   EA           MOV     A,R2
   \   00004C   2404         ADD     A,#0x4
   \   00004E   F5..         MOV     ?V0 + 0,A
   \   000050   EB           MOV     A,R3
   \   000051   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   2768          
   2769              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_488:
   \   000054   75..00       MOV     ?V0 + 5,#0x0
   \   000057   806F         SJMP    ??ZDO_ParseMgmNwkDiscRsp_3
   2770              {
   2771                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   000059                ; Setup parameters for call to function sAddrExtCpy
   \   000059   EE           MOV     A,R6
   \   00005A   FC           MOV     R4,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FD           MOV     R5,A
   \   00005D   AA..         MOV     R2,?V0 + 0
   \   00005F   AB..         MOV     R3,?V0 + 1
   \   000061   12....       LCALL   ??sAddrExtCpy?relay
   2772                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000064   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   2773                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_316:
   \   00006B   EE           MOV     A,R6
   \   00006C   2408         ADD     A,#0x8
   \   00006E   12....       LCALL   ?Subroutine113 & 0xFFFF
   2774          
   2775                pList->logicalChannel = *msg++;
   2776                pList->stackProfile = (*msg) & 0x0F;
   2777                pList->version = (*msg++ >> 4) & 0x0F;
   2778                pList->beaconOrder = (*msg) & 0x0F;
   2779                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   2780                pList->permitJoining = *msg++;
   2781                pList++;
   2782              }
   \                     ??CrossCallReturnLabel_189:
   \   000071   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000074   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000077   540F         ANL     A,#0xf
   \   000079   C0E0         PUSH    A
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   240B         ADD     A,#0xb
   \   00007F   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000082   D0E0         POP     A
   \   000084   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000087   C0E0         PUSH    A
   \   000089   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   00008C   D0E0         POP     A
   \   00008E   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000091   540F         ANL     A,#0xf
   \   000093   C0E0         PUSH    A
   \   000095   E5..         MOV     A,?V0 + 0
   \   000097   240D         ADD     A,#0xd
   \   000099   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   00009C   D0E0         POP     A
   \   00009E   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000A1   C0E0         PUSH    A
   \   0000A3   E5..         MOV     A,?V0 + 0
   \   0000A5   240E         ADD     A,#0xe
   \   0000A7   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   0000AA   D0E0         POP     A
   \   0000AC   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000AF   C0E0         PUSH    A
   \   0000B1   E5..         MOV     A,?V0 + 0
   \   0000B3   240F         ADD     A,#0xf
   \   0000B5   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   0000B8   D0E0         POP     A
   \   0000BA   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000BD   2410         ADD     A,#0x10
   \   0000BF   F5..         MOV     ?V0 + 0,A
   \   0000C1   E5..         MOV     A,?V0 + 1
   \   0000C3   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   0000C6   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   0000C8   E5..         MOV     A,?V0 + 5
   \   0000CA   C3           CLR     C
   \   0000CB   95..         SUBB    A,?V0 + 4
   \   0000CD   408A         JC      ??ZDO_ParseMgmNwkDiscRsp_4
   2783            }
   2784          
   2785            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000CF   AA..         MOV     R2,?V0 + 2
   \   0000D1   AB..         MOV     R3,?V0 + 3
   \   0000D3   02....       LJMP    ??Subroutine199_0 & 0xFFFF
   2786          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C4           SWAP    A
   \   000007   540F         ANL     A,#0xf
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V0 + 7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V0 + 5
   \   000010   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000013   E5..         MOV     A,?V0 + 4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
   2787          
   2788          /*********************************************************************
   2789           * @fn          ZDO_ParseMgmtRtgRsp
   2790           *
   2791           * @brief       This function parses the incoming Management
   2792           *              Routing response.
   2793           *
   2794           * @param       inMsg - incoming message
   2795           *
   2796           * @return      a pointer to parsed response structure (NULL if not allocated).
   2797           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2798           *          by the calling function [osal_mem_free()].
   2799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2800          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   2801          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2802            ZDO_MgmtRtgRsp_t *pRsp;
   2803            uint8 status;
   2804            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   2805            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   2806            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   2807            uint8 *msg;
   2808          
   2809            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine59 & 0xFFFF
   2810          
   2811            status = *msg++;
   \                     ??CrossCallReturnLabel_496:
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2812            if ( status == ZSuccess )
   \   000018   700F         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   2813            {
   2814              rtgCount = *msg++;
   \   00001A   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2815              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_440:
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   A3           INC     DPTR
   2816              rtgListCount = *msg++;
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   A3           INC     DPTR
   \   000024   0E           INC     R6
   \   000025   0E           INC     R6
   \   000026   0E           INC     R6
   \   000027   AF83         MOV     R7,DPH
   2817            }
   2818          
   2819            // Allocate a buffer big enough to handle the list
   2820            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   2821                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   75F006       MOV     B,#0x6
   \   00002E   12....       LCALL   ?Subroutine128 & 0xFFFF
   2822            if ( pRsp )
   \                     ??CrossCallReturnLabel_219:
   \   000031   EA           MOV     A,R2
   \   000032   7001         JNZ     ??ZDO_ParseMgmtRtgRsp_1
   \   000034   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000035   6063         JZ      ??ZDO_ParseMgmtRtgRsp_2
   2823            {
   2824              uint8 x;
   2825              rtgItem_t *pList = pRsp->list;
   \   000037   EA           MOV     A,R2
   \   000038   2404         ADD     A,#0x4
   \   00003A   F8           MOV     R0,A
   \   00003B   EB           MOV     A,R3
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F9           MOV     R1,A
   2826              pRsp->status = status;
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   E5..         MOV     A,?V0 + 3
   \   000045   F0           MOVX    @DPTR,A
   2827              pRsp->rtgCount = rtgCount;
   \   000046   A3           INC     DPTR
   \   000047   E5..         MOV     A,?V0 + 2
   \   000049   12....       LCALL   ?Subroutine45 & 0xFFFF
   2828              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_67:
   \   00004C   E5..         MOV     A,?V0 + 1
   \   00004E   12....       LCALL   ?Subroutine45 & 0xFFFF
   2829              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_68:
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V0 + 0
   \   000054   F0           MOVX    @DPTR,A
   2830          
   2831              for ( x = 0; x < rtgListCount; x++ )
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   8039         SJMP    ??ZDO_ParseMgmtRtgRsp_3
   2832              {
   2833                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000061   FD           MOV     R5,A
   \   000062   E5..         MOV     A,?V0 + 2
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   ED           MOV     A,R5
   \   00006B   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   2834                msg += 2;
   2835                pList->status = *msg++;
   \                     ??CrossCallReturnLabel_542:
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   12....       LCALL   ?Subroutine44 & 0xFFFF
   2836                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_65:
   \   000075   F5..         MOV     ?V0 + 2,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FD           MOV     R5,A
   \   00007A   E5..         MOV     A,?V0 + 2
   \   00007C   8882         MOV     DPL,R0
   \   00007E   8983         MOV     DPH,R1
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   ED           MOV     A,R5
   \   000085   F0           MOVX    @DPTR,A
   2837                msg += 2;
   \   000086   12....       LCALL   ?Subroutine125 & 0xFFFF
   2838                pList++;
   \                     ??CrossCallReturnLabel_209:
   \   000089   E8           MOV     A,R0
   \   00008A   2406         ADD     A,#0x6
   \   00008C   F8           MOV     R0,A
   \   00008D   E9           MOV     A,R1
   \   00008E   3400         ADDC    A,#0x0
   \   000090   F9           MOV     R1,A
   2839              }
   \   000091   05..         INC     ?V0 + 1
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   000093   E5..         MOV     A,?V0 + 1
   \   000095   C3           CLR     C
   \   000096   95..         SUBB    A,?V0 + 0
   \   000098   40C0         JC      ??ZDO_ParseMgmtRtgRsp_4
   2840            }
   2841          
   2842            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00009A   02....       LJMP    ?Subroutine4 & 0xFFFF
   2843          }
   2844          
   2845          /*********************************************************************
   2846           * @fn          ZDO_ParseMgmtBindRsp
   2847           *
   2848           * @brief       This function parses the incoming Management
   2849           *              Binding response.
   2850           *
   2851           * @param       inMsg - pointer to message to parse
   2852           *
   2853           * @return      a pointer to parsed response structure (NULL if not allocated).
   2854           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2855           *          by the calling function [osal_mem_free()].
   2856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2857          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   2858          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   2859            ZDO_MgmtBindRsp_t *pRsp;
   2860            uint8 status;
   2861            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2862            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2863            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2864            uint8 *msg;
   2865          
   2866            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine68 & 0xFFFF
   2867          
   2868            status = *msg++;
   2869            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_112:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_120
   2870            {
   2871              bindingCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine72 & 0xFFFF
   2872              startIndex = *msg++;
   2873              bindingListCount = *msg++;
   2874            }
   2875          
   2876            // Allocate a buffer big enough to handle the list
   2877            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   2878                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??CrossCallReturnLabel_120:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F015       MOV     B,#0x15
   \   00001B   A4           MUL     AB
   \   00001C   F8           MOV     R0,A
   \   00001D   A9F0         MOV     R1,B
   \   00001F   7404         MOV     A,#0x4
   \   000021   12....       LCALL   ?Subroutine127 & 0xFFFF
   2879            if ( pRsp )
   \                     ??CrossCallReturnLabel_217:
   \   000024   7001         JNZ     ??ZDO_ParseMgmtBindRsp_0
   \   000026   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   2880            {
   2881              uint8 x;
   2882              apsBindingItem_t *pList = pRsp->list;
   \   00002C   EA           MOV     A,R2
   \   00002D   2404         ADD     A,#0x4
   \   00002F   FE           MOV     R6,A
   \   000030   EB           MOV     A,R3
   \   000031   3400         ADDC    A,#0x0
   \   000033   FF           MOV     R7,A
   2883              pRsp->status = status;
   \   000034   12....       LCALL   ?Subroutine17 & 0xFFFF
   2884              pRsp->bindingCount = bindingCount;
   2885              pRsp->startIndex = startIndex;
   2886              pRsp->bindingListCount = bindingListCount;
   2887          
   2888              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   000037   75..00       MOV     ?V0 + 5,#0x0
   \   00003A   8010         SJMP    ??ZDO_ParseMgmtBindRsp_2
   2889              {
   2890                osal_cpyExtAddr( pList->srcAddr, msg );
   2891                msg += Z_EXTADDR_LEN;
   2892                pList->srcEP = *msg++;
   2893          
   2894                // Get the Cluster ID
   2895          
   2896                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   2897                msg += 2;
   2898                pList->dstAddr.addrMode = *msg++;
   2899                if ( pList->dstAddr.addrMode == Addr64Bit )
   2900                {
   2901                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   2902                  msg += Z_EXTADDR_LEN;
   2903                  pList->dstEP = *msg++;
   2904                }
   2905                else
   2906                {
   2907                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00003C   12....       LCALL   ?Subroutine91 & 0xFFFF
   2908                  msg += 2;
   2909                }
   \                     ??CrossCallReturnLabel_157:
   \   00003F   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   2910          
   2911                pList++;
   \                     ??CrossCallReturnLabel_532:
   \   000042   EE           MOV     A,R6
   \   000043   2415         ADD     A,#0x15
   \   000045   FE           MOV     R6,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   FF           MOV     R7,A
   \   00004A   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00004C   E5..         MOV     A,?V0 + 5
   \   00004E   C3           CLR     C
   \   00004F   95..         SUBB    A,?V0 + 4
   \   000051   505C         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000053                ; Setup parameters for call to function sAddrExtCpy
   \   000053   AC..         MOV     R4,?V0 + 2
   \   000055   AD..         MOV     R5,?V0 + 3
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000078   85..82       MOV     DPL,?V0 + 2
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   FC           MOV     R4,A
   \   00007F   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000082   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000085   EC           MOV     A,R4
   \   000086   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000089   EE           MOV     A,R6
   \   00008A   240B         ADD     A,#0xb
   \   00008C   FA           MOV     R2,A
   \   00008D   EF           MOV     A,R7
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   7403         MOV     A,#0x3
   \   000093   6C           XRL     A,R4
   \   000094   70A6         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   000096                ; Setup parameters for call to function sAddrExtCpy
   \   000096   AC..         MOV     R4,?V0 + 2
   \   000098   AD..         MOV     R5,?V0 + 3
   \   00009A   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   2912              }
   2913            }
   \                     ??CrossCallReturnLabel_446:
   \   00009D   C0E0         PUSH    A
   \   00009F   EE           MOV     A,R6
   \   0000A0   2414         ADD     A,#0x14
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   0000A8   D0E0         POP     A
   \   0000AA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000AD   8093         SJMP    ??CrossCallReturnLabel_532
   2914          
   2915            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000AF   AA..         MOV     R2,?V0 + 0
   \   0000B1   AB..         MOV     R3,?V0 + 1
   \   0000B3   02....       LJMP    ?Subroutine9 & 0xFFFF
   2916          }
   2917          
   2918          /*********************************************************************
   2919           * @fn          ZDO_ParseUserDescRsp
   2920           *
   2921           * @brief       This function parses the incoming User
   2922           *              Descriptor Response.
   2923           *
   2924           * @param       inMsg - incoming response message
   2925           *
   2926           * @return      a pointer to parsed response structure (NULL if not allocated).
   2927           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2928           *          by the calling function [osal_mem_free()].
   2929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2930          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   2931          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2932            ZDO_UserDescRsp_t *pRsp;
   2933            uint8 *msg;
   2934            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   2935          
   2936            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00000B   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   00000E   88..         MOV     ?V0 + 2,R0
   \   000010   89..         MOV     ?V0 + 3,R1
   2937          
   2938            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   2939              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   2940          
   2941            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   85..82       MOV     DPL,?V0 + 4
   \   000022   12....       LCALL   ?Subroutine110 & 0xFFFF
   2942            if ( pRsp )
   \                     ??CrossCallReturnLabel_188:
   \   000025   7001         JNZ     ??ZDO_ParseUserDescRsp_1
   \   000027   EF           MOV     A,R7
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000028   6035         JZ      ??ZDO_ParseUserDescRsp_2
   2943            {
   2944              pRsp->status = msg[0];
   \   00002A   85..82       MOV     DPL,?V0 + 2
   \   00002D   85..83       MOV     DPH,?V0 + 3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   12....       LCALL   ?Subroutine171 & 0xFFFF
   2945              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_277:
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   85..82       MOV     DPL,?V0 + 2
   \   00003D   85..83       MOV     DPH,?V0 + 3
   \   000040   A3           INC     DPTR
   \   000041   12....       LCALL   ?Subroutine25 & 0xFFFF
   2946              pRsp->length = descLen;
   2947              if ( descLen )
   \                     ??CrossCallReturnLabel_467:
   \   000044   6019         JZ      ??ZDO_ParseUserDescRsp_2
   2948                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000046                ; Setup parameters for call to function osal_memcpy
   \   000046   E5..         MOV     A,?V0 + 2
   \   000048   2404         ADD     A,#0x4
   \   00004A   F5..         MOV     ?V0 + 4,A
   \   00004C   E5..         MOV     A,?V0 + 3
   \   00004E   3400         ADDC    A,#0x0
   \   000050   F5..         MOV     ?V0 + 5,A
   \   000052   88..         MOV     ?V0 + 6,R0
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   12....       LCALL   ?Subroutine111 & 0xFFFF
   2949            }
   \                     ??CrossCallReturnLabel_464:
   \   00005C   12....       LCALL   ?DEALLOC_XSTACK8
   2950          
   2951            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00005F   02....       LJMP    ?Subroutine7 & 0xFFFF
   2952          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   22           RET
   2953          
   2954          /*********************************************************************
   2955           * @fn          ZDO_ParseSimpleDescBuf
   2956           *
   2957           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   2958           *
   2959           * @param       buf  - pointer to a byte array representing a Simple Desc.
   2960           * @param       desc - SimpleDescriptionFormat_t *
   2961           *
   2962           *              This routine allocates storage for the cluster IDs because
   2963           *              they are 16-bit and need to be aligned to be properly processed.
   2964           *              This routine returns non-zero if an allocation fails.
   2965           *
   2966           *              NOTE: This means that the caller or user of the input structure
   2967           *                    is responsible for freeing the memory
   2968           *
   2969           * @return      0: success
   2970           *              1: failure due to malloc failure.
   2971           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2972          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   2973          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2974            uint8 num, i;
   2975          
   2976            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000014   12....       LCALL   ?Subroutine30 & 0xFFFF
   2977            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_27:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   2978            buf += 2;
   2979            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_541:
   \   00001E   FA           MOV     R2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   EA           MOV     A,R2
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   12....       LCALL   ?Subroutine14 & 0xFFFF
   2980            buf += 2;
   2981            desc->AppDevVer = *buf >> 4;
   2982          
   2983            desc->Reserved = 0;
   \                     ??CrossCallReturnLabel_540:
   \   00002A   C4           SWAP    A
   \   00002B   540F         ANL     A,#0xf
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ?Subroutine53 & 0xFFFF
   2984            buf++;
   2985          
   2986            // move in input cluster list (if any). allocate aligned memory.
   2987            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_87:
   \   000039   A3           INC     DPTR
   \   00003A   0E           INC     R6
   \   00003B   0E           INC     R6
   \   00003C   AF83         MOV     R7,DPH
   \   00003E   8C82         MOV     DPL,R4
   \   000040   8D83         MOV     DPH,R5
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   \   000049   8A..         MOV     ?V0 + 4,R2
   2988            if ( num )
   \   00004B   EC           MOV     A,R4
   \   00004C   2407         ADD     A,#0x7
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   ED           MOV     A,R5
   \   000051   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000054   EA           MOV     A,R2
   \   000055   6056         JZ      ??ZDO_ParseSimpleDescBuf_0
   2989            {
   2990              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000057                ; Setup parameters for call to function osal_mem_alloc
   \   000057   C3           CLR     C
   \   000058   33           RLC     A
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   33           RLC     A
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ??osal_mem_alloc?relay
   \   000060   85..82       MOV     DPL,?V0 + 2
   \   000063   85..83       MOV     DPH,?V0 + 3
   \   000066   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000069   85..82       MOV     DPL,?V0 + 2
   \   00006C   85..83       MOV     DPH,?V0 + 3
   \   00006F   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000072   7001         JNZ     ??ZDO_ParseSimpleDescBuf_1
   \   000074   E9           MOV     A,R1
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000075   7005         JNZ     ??ZDO_ParseSimpleDescBuf_2
   2991              {
   2992                // malloc failed. we're done.
   2993                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000077   7901         MOV     R1,#0x1
   \   000079   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   2994              }
   2995              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00007C   7C00         MOV     R4,#0x0
   \   00007E   8027         SJMP    ??CrossCallReturnLabel_57
   2996              {
   2997                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F5..         MOV     ?V0 + 6,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FB           MOV     R3,A
   \   00008A   E4           CLR     A
   \   00008B   25..         ADD     A,?V0 + 6
   \   00008D   EB           MOV     A,R3
   \   00008E   F5..         MOV     ?V0 + 7,A
   \   000090   EC           MOV     A,R4
   \   000091   33           RLC     A
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FB           MOV     R3,A
   \   000096   E8           MOV     A,R0
   \   000097   2A           ADD     A,R2
   \   000098   F582         MOV     DPL,A
   \   00009A   E9           MOV     A,R1
   \   00009B   3B           ADDC    A,R3
   \   00009C   F583         MOV     DPH,A
   \   00009E   E5..         MOV     A,?V0 + 6
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E5..         MOV     A,?V0 + 7
   \   0000A4   12....       LCALL   ?Subroutine40 & 0xFFFF
   2998                buf += 2;
   2999              }
   \                     ??CrossCallReturnLabel_57:
   \   0000A7   EC           MOV     A,R4
   \   0000A8   C3           CLR     C
   \   0000A9   95..         SUBB    A,?V0 + 4
   \   0000AB   40D3         JC      ??ZDO_ParseSimpleDescBuf_5
   3000            }
   3001          
   3002            // move in output cluster list (if any). allocate aligned memory.
   3003            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   0000AD   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0000B0   85..82       MOV     DPL,?V0 + 0
   \   0000B3   85..83       MOV     DPH,?V0 + 1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8A..         MOV     ?V0 + 4,R2
   3004            if (num)
   \   0000C2   6075         JZ      ??ZDO_ParseSimpleDescBuf_6
   3005            {
   3006              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000C4   E5..         MOV     A,?V0 + 0
   \   0000C6   240A         ADD     A,#0xa
   \   0000C8   F8           MOV     R0,A
   \   0000C9   E5..         MOV     A,?V0 + 1
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F9           MOV     R1,A
   \   0000CE   88..         MOV     ?V0 + 0,R0
   \   0000D0   89..         MOV     ?V0 + 1,R1
   \   0000D2                ; Setup parameters for call to function osal_mem_alloc
   \   0000D2   EA           MOV     A,R2
   \   0000D3   C3           CLR     C
   \   0000D4   33           RLC     A
   \   0000D5   FA           MOV     R2,A
   \   0000D6   E4           CLR     A
   \   0000D7   33           RLC     A
   \   0000D8   FB           MOV     R3,A
   \   0000D9   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DC   85..82       MOV     DPL,?V0 + 0
   \   0000DF   85..83       MOV     DPH,?V0 + 1
   \   0000E2   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000E5   85..82       MOV     DPL,?V0 + 0
   \   0000E8   85..83       MOV     DPH,?V0 + 1
   \   0000EB   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000EE   7001         JNZ     ??ZDO_ParseSimpleDescBuf_7
   \   0000F0   E9           MOV     A,R1
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   0000F1   7017         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3007              {
   3008                // malloc failed. free input cluster list memory if there is any
   3009                if ( desc->pAppInClusterList != NULL )
   \   0000F3   85..82       MOV     DPL,?V0 + 2
   \   0000F6   85..83       MOV     DPH,?V0 + 3
   \   0000F9   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000FC   7001         JNZ     ??ZDO_ParseSimpleDescBuf_9
   \   0000FE   EB           MOV     A,R3
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   0000FF   7003         JNZ     $+5
   \   000101   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3010                {
   3011                  osal_mem_free(desc->pAppInClusterList);
   \   000104                ; Setup parameters for call to function osal_mem_free
   \   000104   12....       LCALL   ??osal_mem_free?relay
   \   000107   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3012                }
   3013                return 1;
   3014              }
   3015              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   00010A   7C00         MOV     R4,#0x0
   \   00010C   8025         SJMP    ??CrossCallReturnLabel_58
   3016              {
   3017                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00010E   8E82         MOV     DPL,R6
   \   000110   8F83         MOV     DPH,R7
   \   000112   12....       LCALL   ?Subroutine87 & 0xFFFF
   3018                buf += 2;
   3019              }
   \                     ??CrossCallReturnLabel_148:
   \   000115   FB           MOV     R3,A
   \   000116   E4           CLR     A
   \   000117   25..         ADD     A,?V0 + 0
   \   000119   EB           MOV     A,R3
   \   00011A   F5..         MOV     ?V0 + 1,A
   \   00011C   EC           MOV     A,R4
   \   00011D   33           RLC     A
   \   00011E   FA           MOV     R2,A
   \   00011F   E4           CLR     A
   \   000120   33           RLC     A
   \   000121   FB           MOV     R3,A
   \   000122   E8           MOV     A,R0
   \   000123   2A           ADD     A,R2
   \   000124   F582         MOV     DPL,A
   \   000126   E9           MOV     A,R1
   \   000127   3B           ADDC    A,R3
   \   000128   F583         MOV     DPH,A
   \   00012A   E5..         MOV     A,?V0 + 0
   \   00012C   F0           MOVX    @DPTR,A
   \   00012D   A3           INC     DPTR
   \   00012E   E5..         MOV     A,?V0 + 1
   \   000130   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000133   EC           MOV     A,R4
   \   000134   C3           CLR     C
   \   000135   95..         SUBB    A,?V0 + 4
   \   000137   40D5         JC      ??ZDO_ParseSimpleDescBuf_10
   3020            }
   3021            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000139   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00013B   02....       LJMP    ??Subroutine199_0 & 0xFFFF
   3022          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000003   0C           INC     R4
   \   000004   22           RET
   3023          
   3024          /*********************************************************************
   3025           * @fn          ZDO_ParseDeviceAnnce
   3026           *
   3027           * @brief       Parse a Device Announce message.
   3028           *
   3029           * @param       inMsg - Incoming message
   3030           * @param       pAnnce - place to put the parsed information
   3031           *
   3032           * @return      none
   3033           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3034          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3035          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3036            uint8 *msg;
   3037          
   3038            // Parse incoming message
   3039            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00000C   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   00000F   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   3040            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_559:
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   12....       LCALL   ?Subroutine33 & 0xFFFF
   3041            msg += 2;
   3042            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??CrossCallReturnLabel_43:
   \   000019                ; Setup parameters for call to function sAddrExtCpy
   \   000019   EE           MOV     A,R6
   \   00001A   FC           MOV     R4,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FD           MOV     R5,A
   \   00001D   E5..         MOV     A,?V0 + 0
   \   00001F   2402         ADD     A,#0x2
   \   000021   FA           MOV     R2,A
   \   000022   E5..         MOV     A,?V0 + 1
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ?Subroutine56 & 0xFFFF
   3043            msg += Z_EXTADDR_LEN;
   3044            pAnnce->capabilities = *msg;
   \                     ??CrossCallReturnLabel_91:
   \   00002A   85..82       MOV     DPL,?V0 + 0
   \   00002D   85..83       MOV     DPH,?V0 + 1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
   3045          }
   \   00003B   02....       LJMP    ??Subroutine182_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005                REQUIRE ??Subroutine231_0
   \   000005                ; // Fall through to label ??Subroutine231_0
   3046          
   3047          /*********************************************************************
   3048           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3049           *
   3050           * @brief       This function handles parsing of the incoming Management
   3051           *              Network Update notify.
   3052           *
   3053           * @param       inMsg - incoming message (request)
   3054           *
   3055           * @return      a pointer to parsed response structure (NULL if not allocated).
   3056           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3057           *          by the calling function [osal_mem_free()].
   3058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   EF           MOV     A,R7
   \   000001   3400         ADDC    A,#0x0
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3059          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3060          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3061            uint8 status;
   3062            uint32 scannedChannels = 0;
   \   000005   90....       MOV     DPTR,#__Constant_0
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   12....       LCALL   ?L_MOV_X
   3063            uint16 totalTransmissions = 0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
   \   000010   75..00       MOV     ?V0 + 1,#0x0
   3064            uint16 transmissionFailures = 0;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   3065            uint8 listCount = 0;
   \   000019   75..00       MOV     ?V0 + 10,#0x0
   3066            uint8 *msg = inMsg->asdu;
   \   00001C   12....       LCALL   ?Subroutine59 & 0xFFFF
   3067            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3068          
   3069            status = *msg++;
   \                     ??CrossCallReturnLabel_497:
   \   00001F   F5..         MOV     ?V0 + 11,A
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   3070            if ( status == ZSuccess )
   \   000026   702A         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3071            {
   3072              scannedChannels = osal_build_uint32( msg, 4 );
   \   000028                ; Setup parameters for call to function osal_build_uint32
   \   000028   12....       LCALL   ?Subroutine169 & 0xFFFF
   3073              msg += 4;
   \                     ??CrossCallReturnLabel_275:
   \   00002B   EE           MOV     A,R6
   \   00002C   2404         ADD     A,#0x4
   \   00002E   FE           MOV     R6,A
   \   00002F   12....       LCALL   ?Subroutine77 & 0xFFFF
   3074              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_557:
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   E9           MOV     A,R1
   \   000035   F5..         MOV     ?V0 + 1,A
   3075              msg += 2;
   \   000037   EE           MOV     A,R6
   \   000038   2402         ADD     A,#0x2
   \   00003A   0E           INC     R6
   \   00003B   0E           INC     R6
   \   00003C   12....       LCALL   ?Subroutine77 & 0xFFFF
   3076              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_558:
   \   00003F   F5..         MOV     ?V0 + 2,A
   \   000041   E9           MOV     A,R1
   \   000042   F5..         MOV     ?V0 + 3,A
   3077              msg += 2;
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   0E           INC     R6
   \   000048   0E           INC     R6
   \   000049   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   3078              listCount = *msg++;
   3079            }
   \                     ??CrossCallReturnLabel_331:
   \   00004C   F5..         MOV     ?V0 + 10,A
   \   00004E   A3           INC     DPTR
   \   00004F   0E           INC     R6
   \   000050   AF83         MOV     R7,DPH
   3080          
   3081            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000052   85..82       MOV     DPL,?V0 + 10
   \   000055   8582..       MOV     ?V0 + 8,DPL
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   740A         MOV     A,#0xa
   \   00005A   25..         ADD     A,?V0 + 8
   \   00005C   FA           MOV     R2,A
   \   00005D   E4           CLR     A
   \   00005E   3400         ADDC    A,#0x0
   \   000060   12....       LCALL   ?Subroutine132 & 0xFFFF
   3082          
   3083            if ( pRsp )
   \                     ??CrossCallReturnLabel_227:
   \   000063   7001         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000065   EB           MOV     A,R3
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000066   604A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_2
   3084            {
   3085              pRsp->status = status;
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   E5..         MOV     A,?V0 + 11
   \   00006E   F0           MOVX    @DPTR,A
   3086              pRsp->scannedChannels = scannedChannels;
   \   00006F   A3           INC     DPTR
   \   000070   78..         MOV     R0,#?V0 + 4
   \   000072   12....       LCALL   ?L_MOV_TO_X
   3087              pRsp->totalTransmissions = totalTransmissions;
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E5..         MOV     A,?V0 + 0
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E5..         MOV     A,?V0 + 1
   \   000084   12....       LCALL   ?Subroutine36 & 0xFFFF
   3088              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_49:
   \   000087   E5..         MOV     A,?V0 + 2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E5..         MOV     A,?V0 + 3
   \   00008D   12....       LCALL   ?Subroutine36 & 0xFFFF
   3089              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_50:
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   E5..         MOV     A,?V0 + 10
   \   000094   F0           MOVX    @DPTR,A
   3090          
   3091              // Allocate a buffer big enough to handle the list.
   3092              if ( listCount > 0 )
   \   000095   601B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_2
   3093                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000097                ; Setup parameters for call to function osal_memcpy
   \   000097   8E..         MOV     ?V0 + 0,R6
   \   000099   8F..         MOV     ?V0 + 1,R7
   \   00009B   75..00       MOV     ?V0 + 2,#0x0
   \   00009E   78..         MOV     R0,#?V0 + 0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A3   AC..         MOV     R4,?V0 + 8
   \   0000A5   7D00         MOV     R5,#0x0
   \   0000A7   EA           MOV     A,R2
   \   0000A8   240A         ADD     A,#0xa
   \   0000AA   FA           MOV     R2,A
   \   0000AB   EB           MOV     A,R3
   \   0000AC   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   3094            }
   \                     ??CrossCallReturnLabel_465:
   \   0000AF   12....       LCALL   ?DEALLOC_XSTACK8
   3095          
   3096            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   0000B2   AA..         MOV     R2,?V0 + 14
   \   0000B4   AB..         MOV     R3,?V0 + 15
   \   0000B6   02....       LJMP    ??Subroutine184_0 & 0xFFFF
   3097          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   3098          
   3099          /*********************************************************************
   3100           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3101           *
   3102           * @brief       This function handles parsing the incoming Management
   3103           *              Network Update request and starts the request (if needed).
   3104           *
   3105           * @param       inMsg - incoming message (request)
   3106           * @param       pReq - pointer to place to parse message to
   3107           *
   3108           * @return      none
   3109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3110          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3111          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3112            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine65 & 0xFFFF
   3113          
   3114            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_107:
   \   00000C   85..82       MOV     DPL,?V0 + 0
   \   00000F   85..83       MOV     DPH,?V0 + 1
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_TO_X
   3115            msg += 4;
   \   000017   12....       LCALL   ?Subroutine112 & 0xFFFF
   3116            pReq->scanDuration = *msg++;
   \                     ??CrossCallReturnLabel_330:
   \   00001A   FA           MOV     R2,A
   \   00001B   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00001E   EA           MOV     A,R2
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   12....       LCALL   ?Subroutine46 & 0xFFFF
   3117          
   3118            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_70:
   \   000026   C3           CLR     C
   \   000027   9406         SUBB    A,#0x6
   \   000029   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3119            {
   3120              // Request is to scan over channelMask
   3121              pReq->scanCount = *msg;
   \   00002B   12....       LCALL   ?Subroutine67 & 0xFFFF
   3122            }
   \                     ??CrossCallReturnLabel_109:
   \   00002E   8020         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3123            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000030   74FE         MOV     A,#-0x2
   \   000032   6A           XRL     A,R2
   \   000033   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000035   74FF         MOV     A,#-0x1
   \   000037   6A           XRL     A,R2
   \   000038   7017         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3124            {
   3125              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3126              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   00003A   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine48 & 0xFFFF
   3127          
   3128              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_74:
   \   000041   8882         MOV     DPL,R0
   \   000043   8983         MOV     DPH,R1
   \   000045   E0           MOVX    A,@DPTR
   \   000046   64FF         XRL     A,#0xff
   \   000048   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3129              {
   3130                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00004A   12....       LCALL   ?Subroutine71 & 0xFFFF
   3131              }
   3132            }
   \                     ??CrossCallReturnLabel_118:
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000050   F0           MOVX    @DPTR,A
   3133          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000051   02....       LJMP    ??Subroutine199_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CompareClusterLists?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_MatchEndDeviceBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveMatchMemory?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_CopyMatchInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDMatchSendState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceBindMatchTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0
   3134          
   3135          /*********************************************************************
   3136          *********************************************************************/
   3137          
   3138          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     NLME_PermitJoiningTimeout          0      0      0
     ZDMatchSendState                   1      0     70
       -> APS_SetEndDeviceBindTimeout
                                        0      0     74
       -> sAddrExtCpy                   0      0     74
       -> ZDP_BindUnbindReq             0      0     90
       -> APS_SetEndDeviceBindTimeout
                                        0      0     74
       -> ZDP_SendData                  0      0     84
       -> ZDP_SendData                  0      0     84
       -> ZDO_RemoveMatchMemory         0      0     74
     ZDO_AnyClusterMatches              0      0     41
     ZDO_BuildSimpleDescBuf             1      0     14
     ZDO_CompareClusterLists            0      0     44
     ZDO_ConvertOTAClusters             0      0     38
     ZDO_CopyMatchInfo                  0      0     48
       -> osal_memcpy                   0      0     46
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_mem_alloc                0      0     40
       -> osal_memcpy                   0      0     46
       -> osal_mem_free                 0      0     40
       -> osal_mem_free                 0      0     40
     ZDO_EndDeviceBindMatchTimeoutCB
                                        2      0      0
       -> ZDMatchSendState              4      0      0
     ZDO_EndDeviceTimeoutCB             1      0     17
       -> ZDP_SendData                  0      0     34
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteString             0      0     24
       -> HalLcdWriteString             0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_Init                           2      0      0
       -> sAddrExtCpy                   4      0      0
       -> APS_ReflectorInit             4      0      0
       -> NLME_DeviceJoiningInit        4      0      0
     ZDO_MatchEndDeviceBind             1      0     30
       -> osal_mem_alloc                0      0     50
       -> osal_memset                   0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> APS_SetEndDeviceBindTimeout
                                        0      0     50
       -> ZDO_CopyMatchInfo             0      0     50
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDO_CompareClusterLists       0      0     58
       -> osal_mem_alloc                0      0     50
       -> osal_memcpy                   0      0     56
       -> ZDMatchSendState              0      0     50
       -> ZDP_SendData                  0      0     60
       -> ZDP_SendData                  0      0     60
       -> ZDO_RemoveMatchMemory         0      0     50
     ZDO_ParseAddrRsp                   1      0     14
       -> osal_mem_alloc                0      0     28
       -> sAddrExtCpy                   0      0     28
     ZDO_ParseBindUnbindReq             1      0     10
       -> sAddrExtCpy                   0      0     20
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseDeviceAnnce               1      0     52
       -> sAddrExtCpy                   0      0     20
     ZDO_ParseEPListRsp                 1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ParseEndDeviceBindReq          1      0     17
       -> sAddrExtCpy                   0      0     34
       -> osal_mem_alloc                0      0     34
       -> ZDO_ConvertOTAClusters        0      0     34
       -> osal_mem_alloc                0      0     34
       -> ZDO_ConvertOTAClusters        0      0     34
     ZDO_ParseMgmNwkDiscRsp             1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtBindRsp               1      0     18
       -> osal_mem_alloc                0      0     36
       -> sAddrExtCpy                   0      0     36
       -> sAddrExtCpy                   0      0     36
     ZDO_ParseMgmtLqiRsp                1      0     16
       -> osal_mem_alloc                0      0     32
       -> sAddrExtCpy                   0      0     32
     ZDO_ParseMgmtNwkUpdateNotify       1      0     27
       -> osal_build_uint32             0      0     48
       -> osal_mem_alloc                0      0     48
       -> osal_memcpy                   0      0     54
     ZDO_ParseMgmtNwkUpdateReq          1      0     16
       -> osal_build_uint32             0      0     32
     ZDO_ParseMgmtRtgRsp                1      0     14
       -> osal_mem_alloc                0      0     28
     ZDO_ParseNodeDescRsp               2      0      9
     ZDO_ParsePowerDescRsp              1      0     10
     ZDO_ParseServerDiscRsp             1      0      9
     ZDO_ParseSimpleDescBuf             1      0     25
       -> osal_mem_alloc                0      0     32
       -> osal_mem_alloc                0      0     32
       -> osal_mem_free                 0      0     32
     ZDO_ParseSimpleDescRsp             1      0      9
       -> ZDO_ParseSimpleDescBuf        0      0     18
     ZDO_ParseUserDescRsp               1      0     19
       -> osal_mem_alloc                0      0     32
       -> osal_memcpy                   0      0     38
     ZDO_ProcessActiveEPReq             0      0     21
       -> NLME_GetShortAddr             0      0     28
       -> afNumEndPoints                0      0     28
       -> afEndPoints                   0      0     28
       -> ZDP_EPRsp                     0      0     42
     ZDO_ProcessBindUnbindReq           1      0     39
       -> sAddrExtCpy                   0      0     68
       -> NLME_GetExtAddr               0      0     68
       -> sAddrExtCmp                   0      0     68
       -> bindNumOfEntries              0      0     68
       -> APSME_BindRequest             0      0     70
       -> ZDApp_NVUpdate                0      0     68
       -> APSME_LookupNwkAddr           0      0     68
       -> ZDP_NwkAddrReq                0      0     68
       -> APSME_UnBindRequest           0      0     70
       -> ZDApp_NVUpdate                0      0     68
       -> ZDP_SendData                  0      0     78
     ZDO_ProcessDeviceAnnce             2      0     42
       -> ZDO_ParseDeviceAnnce          0      0     84
       -> nwkNeighborRemoveAllStranded
                                        0      0     84
       -> NLME_CheckNewAddrSet          0      0     84
       -> NLME_GetCoordExtAddr          0      0     84
       -> sAddrExtCmp                   0      0     84
       -> NLME_GetCoordShortAddr        0      0     84
       -> ZMacSetReq                    0      0     84
       -> NLME_GetShortAddr             4      0     84
       -> AssocGetWithExt               0      0     84
       -> AssocRemove                   0      0     84
       -> NLME_GetShortAddr             0      0     84
       -> AssocChangeNwkAddr            0      0     84
       -> nwkNeighborUpdateNwkAddr      0      0     84
       -> ZDApp_NVUpdate                0      0     84
       -> RTG_RemoveRtgEntry            0      0     84
       -> AddrMgrEntryLookupNwk         0      0     84
       -> osal_memset                   0      0     84
       -> sAddrExtCmp                   0      0     84
       -> AddrMgrExtAddrSet             0      0     84
       -> AddrMgrEntryUpdate            0      0     84
     ZDO_ProcessMatchDescReq            1      0     34
       -> NLME_IsAddressBroadcast       0      0     54
       -> ZDP_EPRsp                     0      0     68
       -> NLME_IsAddressBroadcast       0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_mem_alloc                0      0     54
       -> ZDO_ConvertOTAClusters        0      0     54
       -> osal_msg_send                 0      0     54
       -> osal_mem_free                 0      0     54
       -> ZDO_AnyClusterMatches         0      0     58
       -> ZDO_AnyClusterMatches         0      0     58
       -> osal_msg_allocate             0      0     54
       -> osal_memcpy                   0      0     60
       -> osal_memcpy                   0      0     60
       -> ZDP_EPRsp                     0      0     68
       -> HalLcdWriteScreen             0      0     54
       -> HalLcdWriteScreen             0      0     54
       -> osal_mem_free                 0      0     54
       -> osal_mem_free                 0      0     54
     ZDO_ProcessMgmtBindReq             0      0     29
       -> APSME_GetRequest              0      0     48
       -> osal_mem_alloc                0      0     48
       -> APSME_GetRequest              0      0     48
       -> ZDP_MgmtBindRsp               0      0     58
       -> osal_mem_free                 0      0     48
     ZDO_ProcessMgmtDirectJoinReq       1      0     16
       -> NLME_DirectJoinRequest        0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtLeaveReq            1      0     23
       -> AddrMgrExtAddrValid           0      0     36
       -> NLME_GetExtAddr               0      0     36
       -> sAddrExtCmp                   0      0     36
       -> NLME_LeaveReq                 0      0     36
       -> ZDP_SendData                  0      0     46
     ZDO_ProcessMgmtLqiReq              1      0     66
       -> NLME_GetRequest               0      0    122
       -> AssocCount                    0      0    122
       -> osal_mem_alloc                0      0    122
       -> osal_memset                   0      0    122
       -> AssocFindDevice               0      0    122
       -> sAddrExtCpy                   0      0    122
       -> AddrMgrEntryLookupNwk         0      0    122
       -> sAddrExtCpy                   0      0    122
       -> NLME_GetRequest               0      0    122
       -> sAddrExtCpy                   0      0    122
       -> osal_memset                   0      0    122
       -> ZDP_MgmtLqiRsp                0      0    132
       -> osal_mem_free                 0      0    122
     ZDO_ProcessMgmtNwkDiscReq          1      0     23
       -> osal_build_uint32             0      0     46
       -> NLME_NwkDiscReq2              0      0     46
       -> NLME_NwkDiscTerm              0      0     46
     ZDO_ProcessMgmtPermitJoinReq       1      0     16
       -> NLME_PermitJoiningRequest     0      0     22
       -> ZDP_SendData                  0      0     32
     ZDO_ProcessMgmtRtgReq              1      0     26
       -> NLME_GetRequest               0      0     42
       -> osal_mem_alloc                0      0     42
       -> NLME_GetRequest               0      0     42
       -> ZDP_MgmtRtgRsp                0      0     52
       -> osal_mem_free                 0      0     42
     ZDO_ProcessNodeDescReq             0      0     14
       -> ZDP_NodeDescMsg               0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessPowerDescReq            0      0     14
       -> ZDP_PowerDescMsg              0      0     24
       -> ZDP_GenericRsp                0      0     28
     ZDO_ProcessServerDiscReq           0      0     14
       -> ZDP_ServerDiscRsp             0      0     28
     ZDO_ProcessSimpleDescReq           0      0     12
       -> afFindSimpleDesc              0      0     24
       -> ZDP_SimpleDescMsg             0      0     24
       -> osal_mem_free                 0      0     24
     ZDO_ProcessUserDescReq             0      0     37
       -> osal_nv_read                  0      0     74
       -> ZDP_UserDescRsp               0      0     72
       -> ZDP_GenericRsp                0      0     74
     ZDO_ProcessUserDescSet             1      0     42
       -> osal_memcpy                   0      0     80
       -> osal_nv_write                 0      0     82
       -> ZDP_SendData                  0      0     84
     ZDO_RemoveMatchMemory              2      0     37
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
       -> osal_mem_free                 4      0      0
     ZDO_StartDevice                    1      0     23
       -> NLME_NetworkDiscoveryRequest
                                        0      0     46
       -> osal_start_timerEx            0      0     46
       -> nwk_ScanJoiningOrphan         0      0     46
       -> NLME_OrphanJoinRequest        0      0     46
       -> HalLcdWriteScreen             0      0     46
     ZDO_UpdateAddrManager              3      0     13
       -> AddrMgrExtAddrSet             4      0     26
       -> AddrMgrEntryUpdate            4      0     26
     ZDO_UpdateNwkStatus                1      0     12
       -> osal_msg_find                 0      0     24
       -> osal_msg_allocate             0      0     24
       -> osal_set_event                0      0     24
       -> osal_msg_send                 0      0     24
       -> NLME_GetShortAddr             0      0     24
       -> NLME_GetExtAddr               0      0     24


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     ZDOBuildBuf                               52
     ZDO_EDBind                                 2
     matchED                                    2
     apsChannelMask                             4
     ZDO_Init                                  43
     ?Subroutine0                               7
     ZDO_StartDevice                          249
     ?Subroutine37                             15
     ?Subroutine1                               3
     ??Subroutine180_0                          5
     ?Subroutine38                             12
     discRetries                                1
     scanCnt                                    1
     ZDO_UpdateNwkStatus                      134
     ??Subroutine192_0                          4
     ?Subroutine154                             6
     ??Subroutine198_0                          5
     ?Subroutine32                              6
     ?Subroutine175                             9
     ?Subroutine102                             7
     ZDO_CompareClusterLists                  124
     ?Subroutine107                            16
     ?Subroutine86                              6
     ??Subroutine200_0                          5
     ZDO_AnyClusterMatches                     83
     ?Subroutine87                              6
     ZDO_ProcessNodeDescReq                    66
     ??Subroutine182_0                          5
     ?Subroutine63                             16
     ?Subroutine61                             27
     ?Subroutine158                             5
     ?Subroutine162                             9
     ?Subroutine146                            15
     ?Subroutine164                             7
     ?Subroutine157                             6
     ?Subroutine173                            15
     ??Subroutine229_0                          5
     ZDO_ProcessPowerDescReq                   66
     ?Subroutine3                               2
     ??Subroutine181_0                          3
     ZDO_ProcessSimpleDescReq                 151
     ?Subroutine70                              7
     ??Subroutine193_0                          7
     ?Subroutine79                             11
     ??Subroutine218_0                          6
     ?Subroutine150                             4
     ZDO_ProcessActiveEPReq                   118
     ?Subroutine117                             3
     ??Subroutine183_0                          4
     ??Subroutine186_0                          4
     ?Subroutine163                             9
     ?Subroutine109                             6
     ??Subroutine206_0                          4
     ?Subroutine4                               5
     ZDO_ConvertOTAClusters                    60
     ?Subroutine124                            10
     ZDO_ProcessMatchDescReq                  931
     ?Subroutine5                               3
     ??Subroutine184_0                          5
     ?Subroutine84                             31
     ??Subroutine188_0                          4
     ??Subroutine189_0                          1
     ??Subroutine190_0                          5
     ?Subroutine35                              8
     ?Subroutine131                             6
     ?Subroutine34                              9
     ?Subroutine41                              5
     ?Subroutine76                              8
     ??Subroutine210_0                          3
     ??Subroutine211_0                          6
     ?Subroutine152                             5
     ?Subroutine85                              6
     ?Subroutine153                            10
     ??Subroutine216_0                          6
     ?Subroutine179                             7
     ?Subroutine140                             6
     ?Subroutine59                              3
     ??Subroutine223_0                          9
     ??Subroutine225_0                          4
     ?Subroutine103                             5
     ?Subroutine88                             12
     ?Subroutine141                             4
     ?Subroutine170                             7
     ?Subroutine155                             4
     ?Subroutine176                             3
     ?Subroutine132                            10
     ZDO_ProcessBindUnbindReq                 439
     ?Subroutine6                               8
     ?Subroutine161                             3
     ??Subroutine185_0                          5
     ??Subroutine195_0                          6
     ?Subroutine168                             1
     ??Subroutine196_0                          6
     ?Subroutine119                            13
     ?Subroutine120                            13
     ?Subroutine114                             3
     ??Subroutine222_0                          5
     ZDO_UpdateAddrManager                     58
     ZDO_ProcessServerDiscReq                  63
     ?Subroutine64                              4
     ZDO_EndDeviceTimeoutCB                   223
     ?Subroutine82                              1
     ??Subroutine203_0                          4
     ?Subroutine57                              5
     ?Subroutine172                             1
     ??Subroutine208_0                          6
     ?Subroutine178                             8
     ??Subroutine209_0                          5
     ?Subroutine144                             3
     ZDO_ProcessMgmtLqiReq                    734
     ?Subroutine39                             16
     ?Subroutine26                             17
     ?Subroutine21                             19
     ?Subroutine47                             10
     ?Subroutine126                             5
     ?Subroutine104                             6
     ?Subroutine66                              3
     ??Subroutine197_0                          3
     ?Subroutine122                             9
     ??Subroutine221_0                          7
     ?Subroutine129                            11
     ZDO_ProcessMgmtNwkDiscReq                112
     ?Subroutine11                              6
     ?Subroutine112                             4
     ??Subroutine191_0                          4
     ??Subroutine199_0                          5
     ?Subroutine151                             3
     ?Subroutine160                            10
     ?Subroutine53                              6
     ?Subroutine65                              7
     ?Subroutine169                            18
     ZDO_ProcessMgmtRtgReq                    268
     ?Subroutine8                               5
     ?Subroutine123                             5
     ZDO_ProcessMgmtBindReq                   288
     ZDO_ProcessMgmtDirectJoinReq              80
     ?Subroutine12                              5
     ?Subroutine156                             4
     ?Subroutine108                             3
     ??Subroutine194_0                          5
     ?Subroutine94                             11
     ZDO_ProcessMgmtLeaveReq                  187
     ?Subroutine105                             5
     ZDO_ProcessMgmtPermitJoinReq              92
     NLME_PermitJoiningTimeout                  3
     ZDO_ProcessUserDescReq                   188
     ZDO_ProcessUserDescSet                   277
     ?Subroutine2                               3
     ?Subroutine50                              4
     ?Subroutine139                             7
     ?Subroutine97                              4
     ??Subroutine187_0                          6
     ZDO_ProcessDeviceAnnce                   400
     ZDO_BuildSimpleDescBuf                   176
     ?Subroutine101                            14
     ?Subroutine92                             11
     ?Subroutine89                             12
     ?Subroutine29                             13
     ?Subroutine24                             12
     ?Subroutine137                             1
     ??Subroutine201_0                         10
     ?Subroutine166                             4
     ?Subroutine177                            10
     ZDO_MatchEndDeviceBind                   535
     ?Subroutine130                             6
     ??Subroutine202_0                          7
     ?Subroutine80                              9
     ?Subroutine78                             11
     ?Subroutine73                              8
     ?Subroutine62                              3
     ??Subroutine204_0                         10
     ?Subroutine60                              3
     ??Subroutine205_0                         13
     ?Subroutine100                            13
     ?Subroutine95                             14
     ?Subroutine90                             14
     ?Subroutine83                              6
     ??Subroutine207_0                          4
     ?Subroutine147                             4
     ?Subroutine81                             10
     ?Subroutine145                             1
     ?Subroutine74                             12
     ?Subroutine69                              7
     ??Subroutine212_0                          2
     ??Subroutine213_0                          6
     ?Subroutine51                              6
     ?Subroutine19                             17
     ?Subroutine15                              7
     ZDO_RemoveMatchMemory                    129
     ZDO_CopyMatchInfo                        229
     ?Subroutine115                            15
     ?Subroutine93                             16
     ?Subroutine113                            10
     ?Subroutine96                              5
     ZDMatchSendState                         619
     ?Subroutine9                               5
     ?Subroutine99                             13
     ?Subroutine75                             12
     ?Subroutine58                             39
     ZDO_EndDeviceBindMatchTimeoutCB
                                               16
     ZDO_ParseEndDeviceBindReq                290
     ?Subroutine116                            11
     ?Subroutine98                              3
     ??Subroutine214_0                          6
     ?Subroutine54                              1
     ??Subroutine215_0                         12
     ?Subroutine52                             10
     ?Subroutine159                            14
     ?Subroutine45                              5
     ?Subroutine143                             7
     ?Subroutine136                            10
     ?Subroutine22                             10
     ?Subroutine13                              4
     ??Subroutine226_0                         16
     ?Subroutine171                             9
     ??Subroutine231_0                          7
     ZDO_ParseBindUnbindReq                   109
     ?Subroutine55                             11
     ?Subroutine43                              6
     ?Subroutine138                             9
     ??Subroutine224_0                          4
     ?Subroutine91                             11
     ?Subroutine30                              9
     ?Subroutine14                              2
     ??Subroutine227_0                          4
     ??Subroutine228_0                          9
     ?Subroutine56                             17
     ?Subroutine134                             5
     ?Subroutine135                             7
     ZDO_ParseAddrRsp                         195
     ?Subroutine31                              8
     ?Subroutine167                            10
     ?Subroutine27                              5
     ?Subroutine165                             9
     ?Subroutine125                             4
     ?Subroutine127                             9
     ?Subroutine118                             4
     ?Subroutine33                              7
     ?Subroutine149                            13
     ?Subroutine48                              4
     ?Subroutine46                              8
     ZDO_ParseNodeDescRsp                     226
     ?Subroutine10                              5
     ?Subroutine28                              1
     ??Subroutine217_0                          8
     ?Subroutine20                              4
     ?Subroutine133                            20
     ?Subroutine18                              6
     ?Subroutine16                             38
     ?Subroutine174                             6
     ?Subroutine42                              5
     ZDO_ParsePowerDescRsp                    170
     ZDO_ParseSimpleDescRsp                    34
     ?Subroutine7                               4
     ZDO_ParseEPListRsp                        83
     ?Subroutine111                             9
     ??Subroutine219_0                          9
     ?Subroutine25                             15
     ??Subroutine220_0                          7
     ?Subroutine110                            25
     ZDO_ParseServerDiscRsp                    57
     ZDO_ParseMgmtLqiRsp                      159
     ?Subroutine121                             4
     ?Subroutine128                            10
     ?Subroutine72                             10
     ?Subroutine148                            13
     ?Subroutine68                             24
     ?Subroutine23                              4
     ZDO_ParseMgmNwkDiscRsp                   214
     ?Subroutine49                             10
     ?Subroutine44                              9
     ?Subroutine17                             23
     ?Subroutine142                             9
     ?Subroutine71                             15
     ?Subroutine67                             13
     ZDO_ParseMgmtRtgRsp                      157
     ZDO_ParseMgmtBindRsp                     182
     ZDO_ParseUserDescRsp                      98
     ?Subroutine106                             4
     ZDO_ParseSimpleDescBuf                   318
     ?Subroutine40                              5
     ZDO_ParseDeviceAnnce                      62
     ??Subroutine230_0                          5
     ?Subroutine77                              3
     ZDO_ParseMgmtNwkUpdateNotify             185
     ?Subroutine36                              8
     ZDO_ParseMgmtNwkUpdateReq                 84
     ??ZDO_Init?relay                           6
     ??ZDO_StartDevice?relay                    6
     ??ZDO_UpdateNwkStatus?relay                6
     ??ZDO_CompareClusterLists?relay            6
     ??ZDO_AnyClusterMatches?relay              6
     ??ZDO_ProcessNodeDescReq?relay             6
     ??ZDO_ProcessPowerDescReq?relay            6
     ??ZDO_ProcessSimpleDescReq?relay           6
     ??ZDO_ProcessActiveEPReq?relay             6
     ??ZDO_ConvertOTAClusters?relay             6
     ??ZDO_ProcessMatchDescReq?relay            6
     ??ZDO_ProcessBindUnbindReq?relay           6
     ??ZDO_UpdateAddrManager?relay              6
     ??ZDO_ProcessServerDiscReq?relay           6
     ??ZDO_EndDeviceTimeoutCB?relay             6
     ??ZDO_ProcessMgmtLqiReq?relay              6
     ??ZDO_ProcessMgmtNwkDiscReq?relay          6
     ??ZDO_ProcessMgmtRtgReq?relay              6
     ??ZDO_ProcessMgmtBindReq?relay             6
     ??ZDO_ProcessMgmtDirectJoinReq?relay       6
     ??ZDO_ProcessMgmtLeaveReq?relay            6
     ??ZDO_ProcessMgmtPermitJoinReq?relay       6
     ??NLME_PermitJoiningTimeout?relay          6
     ??ZDO_ProcessUserDescReq?relay             6
     ??ZDO_ProcessUserDescSet?relay             6
     ??ZDO_ProcessDeviceAnnce?relay             6
     ??ZDO_BuildSimpleDescBuf?relay             6
     ??ZDO_MatchEndDeviceBind?relay             6
     ??ZDO_RemoveMatchMemory?relay              6
     ??ZDO_CopyMatchInfo?relay                  6
     ??ZDMatchSendState?relay                   6
     ??ZDO_EndDeviceBindMatchTimeoutCB?relay    6
     ??ZDO_ParseEndDeviceBindReq?relay          6
     ??ZDO_ParseBindUnbindReq?relay             6
     ??ZDO_ParseAddrRsp?relay                   6
     ??ZDO_ParseNodeDescRsp?relay               6
     ??ZDO_ParsePowerDescRsp?relay              6
     ??ZDO_ParseSimpleDescRsp?relay             6
     ??ZDO_ParseEPListRsp?relay                 6
     ??ZDO_ParseServerDiscRsp?relay             6
     ??ZDO_ParseMgmtLqiRsp?relay                6
     ??ZDO_ParseMgmNwkDiscRsp?relay             6
     ??ZDO_ParseMgmtRtgRsp?relay                6
     ??ZDO_ParseMgmtBindRsp?relay               6
     ??ZDO_ParseUserDescRsp?relay               6
     ??ZDO_ParseSimpleDescBuf?relay             6
     ??ZDO_ParseDeviceAnnce?relay               6
     ??ZDO_ParseMgmtNwkUpdateNotify?relay       6
     ??ZDO_ParseMgmtNwkUpdateReq?relay          6
     ?<Constant "StartDevice ERR">             16
     ?<Constant "MODE unknown">                13
     ?<Constant "End Device Bind">             16
     ?<Constant "Success Sent">                13
     ?<Constant "Timeout">                      8
     ?<Constant "Match Desc Req">              15
     ?<Constant "Rsp Sent">                     9
     ?<Constant "Non Matched">                 12
     __Constant_7fff800                         4
     __Constant_0                               4

 
 11 628 bytes in segment BANKED_CODE
    294 bytes in segment BANK_RELAYS
    110 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 11 922 bytes of CODE  memory
    102 bytes of CONST memory (+ 8 bytes shared)
     62 bytes of XDATA memory

Errors: none
Warnings: none
