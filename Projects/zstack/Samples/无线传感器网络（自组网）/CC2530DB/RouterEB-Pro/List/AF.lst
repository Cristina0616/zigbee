###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             17/Feb/2013  12:17:01 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\af\AF. #
#                          c                                                  #
#    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530À #
#                          ı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sam #
#                          ples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "C:\Documents and     #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\af\AF #
#                          .c" -D ZIGBEEPRO -D ZTOOL_P1 -D NWK_AUTO_POLL -D   #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\" #
#                           -lA "C:\Documents and Settings\XPMUser\×ÀÃæ\CC253 #
#                          0Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\S #
#                          amples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\Ro #
#                          uterEB-Pro\List\" --diag_suppress Pe001,Pa010 -o   #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterE #
#                          B-Pro\Obj\" -e --require_prototypes --debug        #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I "C:\Documents  #
#                          and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ #
#                          ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp    #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\SOURCE\" -I      #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\. #
#                          .\ZMAIN\TI2530DB\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "C:\Documents and                   #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I "C:\Documents and         #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "C:\Documents and           #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\List\AF.lst                                   #
#    Object file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\Obj\AF.r51                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2009-10-29 00:15:32 -0700 (Thu, 29 Oct 2009) $
      4            Revision:       $Revision: 21013 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    104          
    105          /*********************************************************************
    106           * EXTERNAL VARIABLES
    107           */
    108          
    109          /*********************************************************************
    110           * EXTERNAL FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * LOCAL VARIABLES
    115           */
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    122                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    123                          byte SecurityUse, uint32 timestamp );
    124          
    125          static epList_t *afFindEndPointDescList( byte EndPoint );
    126          
    127          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    128          
    129          /*********************************************************************
    130           * NETWORK LAYER CALLBACKS
    131           */
    132          
    133          /*********************************************************************
    134           * PUBLIC FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * @fn      afInit
    139           *
    140           * @brief   Initialization function for the AF.
    141           *
    142           * @param   none
    143           *
    144           * @return  none
    145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    146          void afInit( void )
   \                     afInit:
    147          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    148            // Start with no endpoint defined
    149            epList = NULL;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    150          }
   \   00000B                REQUIRE ?Subroutine0
   \   00000B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    151          
    152          /*********************************************************************
    153           * @fn      afRegisterExtended
    154           *
    155           * @brief   Register an Application's EndPoint description.
    156           *
    157           * @param   epDesc - pointer to the Application's endpoint descriptor.
    158           * @param   descFn - pointer to descriptor callback function
    159           *
    160           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    161           *
    162           * @return  Pointer to epList_t on success, NULL otherwise.
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn )
   \                     afRegisterExtended:
    165          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    166            epList_t *ep;
    167            epList_t *epSearch;
    168          
    169            ep = osal_mem_alloc( sizeof ( epList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A07         MOV     R2,#0x7
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
    170            if ( ep )
   \   000014   EA           MOV     A,R2
   \   000015   7001         JNZ     ??afRegisterExtended_0
   \   000017   EB           MOV     A,R3
   \                     ??afRegisterExtended_0:
   \   000018   6054         JZ      ??afRegisterExtended_1
    171            {
    172              // Fill in the new list entry
    173              ep->epDesc = epDesc;
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   EE           MOV     A,R6
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EF           MOV     A,R7
   \   000022   F0           MOVX    @DPTR,A
    174          
    175              // Default to allow Match Descriptor.
    176              ep->flags = eEP_AllowMatch;
   \   000023   7401         MOV     A,#0x1
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine5 & 0xFFFF
    177              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_0:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E5..         MOV     A,?V0 + 1
   \   000034   12....       LCALL   ?Subroutine5 & 0xFFFF
    178              ep->nextDesc = NULL;
   \                     ??CrossCallReturnLabel_1:
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    179          
    180              // Does a list exist?
    181              if ( epList == NULL )
   \   00003D   90....       MOV     DPTR,#epList
   \   000040   E0           MOVX    A,@DPTR
   \   000041   7002         JNZ     ??afRegisterExtended_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \                     ??afRegisterExtended_2:
   \   000045   90....       MOV     DPTR,#epList
   \   000048   601F         JZ      ??afRegisterExtended_3
    182                epList = ep;  // Make this the first entry
    183              else
    184              {
    185                // Look for the end of the list
    186                epSearch = epList;
   \   00004A   12....       LCALL   ??Subroutine34_0 & 0xFFFF
    187                while( epSearch->nextDesc != NULL )
    188                  epSearch = epSearch->nextDesc;
   \                     ??CrossCallReturnLabel_72:
   \   00004D   E8           MOV     A,R0
   \   00004E   2405         ADD     A,#0x5
   \   000050   F8           MOV     R0,A
   \   000051   E9           MOV     A,R1
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   E8           MOV     A,R0
   \   000056   FC           MOV     R4,A
   \   000057   E9           MOV     A,R1
   \   000058   FD           MOV     R5,A
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000060   7001         JNZ     ??afRegisterExtended_4
   \   000062   E9           MOV     A,R1
   \                     ??afRegisterExtended_4:
   \   000063   70E8         JNZ     ??CrossCallReturnLabel_72
    189          
    190                // Add new entry to end of list
    191                epSearch->nextDesc = ep;
   \   000065   8C82         MOV     DPL,R4
   \   000067   8D83         MOV     DPH,R5
   \                     ??afRegisterExtended_3:
   \   000069   EA           MOV     A,R2
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   EB           MOV     A,R3
   \   00006D   F0           MOVX    @DPTR,A
    192              }
    193            }
    194          
    195            return ep;
   \                     ??afRegisterExtended_1:
   \   00006E                REQUIRE ?Subroutine1
   \   00006E                ; // Fall through to label ?Subroutine1
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   22           RET
    197          
    198          /*********************************************************************
    199           * @fn      afRegister
    200           *
    201           * @brief   Register an Application's EndPoint description.
    202           *
    203           * @param   epDesc - pointer to the Application's endpoint descriptor.
    204           *
    205           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    206           *
    207           * @return  afStatus_SUCCESS - Registered
    208           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    209           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    212          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    213            epList_t *ep;
    214            
    215            // Look for duplicate endpoint
    216            if ( afFindEndPointDescList( epDesc->endPoint ) )
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   ??afFindEndPointDescList?relay
   \   000012   EA           MOV     A,R2
   \   000013   7001         JNZ     ??afRegister_0
   \   000015   EB           MOV     A,R3
   \                     ??afRegister_0:
   \   000016   6004         JZ      ??afRegister_1
    217              return ( afStatus_INVALID_PARAMETER );
   \   000018   7902         MOV     R1,#0x2
   \   00001A   8017         SJMP    ??afRegister_2
    218            
    219            ep = afRegisterExtended( epDesc, NULL );
    220          
    221            return ((ep == NULL) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_1:
   \   00001C                ; Setup parameters for call to function afRegisterExtended
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??afRegisterExtended?relay
   \   000027   EA           MOV     A,R2
   \   000028   7001         JNZ     ??afRegister_3
   \   00002A   EB           MOV     A,R3
   \                     ??afRegister_3:
   \   00002B   7004         JNZ     ??afRegister_4
   \   00002D   7910         MOV     R1,#0x10
   \   00002F   8002         SJMP    ??afRegister_2
   \                     ??afRegister_4:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afRegister_2:
   \   000033   02....       LJMP    ?Subroutine2 & 0xFFFF
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    223          
    224          
    225          /*********************************************************************
    226           * @fn          afDataConfirm
    227           *
    228           * @brief       This function will generate the Data Confirm back to
    229           *              the application.
    230           *
    231           * @param       endPoint - confirm end point
    232           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    233           * @param       status - status of APSDE_DATA_REQUEST
    234           *
    235           * @return      none
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    238          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   8B..         MOV     ?V0 + 2,R3
    239            endPointDesc_t *epDesc;
    240            afDataConfirm_t *msgPtr;
    241          
    242            // Find the endpoint description
    243            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   ??afFindEndPointDesc?relay
   \   00000E   8A..         MOV     ?V0 + 4,R2
   \   000010   8B..         MOV     ?V0 + 5,R3
   \   000012   AE..         MOV     R6,?V0 + 4
   \   000014   AF..         MOV     R7,?V0 + 5
    244            if ( epDesc == NULL )
   \   000016   EE           MOV     A,R6
   \   000017   7001         JNZ     ??afDataConfirm_0
   \   000019   EF           MOV     A,R7
   \                     ??afDataConfirm_0:
   \   00001A   602D         JZ      ??CrossCallReturnLabel_9
    245              return;
    246          
    247            // Determine the incoming command type
    248            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7A04         MOV     R2,#0x4
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   12....       LCALL   ??osal_msg_allocate?relay
    249            if ( msgPtr )
   \   000023   EA           MOV     A,R2
   \   000024   7001         JNZ     ??afDataConfirm_1
   \   000026   EB           MOV     A,R3
   \                     ??afDataConfirm_1:
   \   000027   6020         JZ      ??CrossCallReturnLabel_9
    250            {
    251              // Build the Data Confirm message
    252              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000029   74FD         MOV     A,#-0x3
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   F0           MOVX    @DPTR,A
    253              msgPtr->hdr.status = status;
   \   000030   A3           INC     DPTR
   \   000031   E5..         MOV     A,?V0 + 2
   \   000033   F0           MOVX    @DPTR,A
    254              msgPtr->endpoint = endPoint;
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   12....       LCALL   ?Subroutine5 & 0xFFFF
    255              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_2:
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   F0           MOVX    @DPTR,A
    256          
    257          #if defined ( MT_AF_CB_FUNC )
    258              /* If MT has subscribed for this callback, don't send as a message. */
    259              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    260              {
    261                /* Send callback if it's subscribed */
    262                MT_AfDataConfirm ((void *)msgPtr);
    263                /* Release the memory. */
    264                osal_msg_deallocate( (void *)msgPtr );
    265              }
    266              else
    267          #endif
    268              {
    269                /* send message through task message */
    270                osal_msg_send( *(epDesc->task_id), (byte *)msgPtr );
   \   000042                ; Setup parameters for call to function osal_msg_send
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   12....       LCALL   ?Subroutine10 & 0xFFFF
    271              }
    272            }
   \                     ??CrossCallReturnLabel_9:
   \   000049   7F06         MOV     R7,#0x6
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    273          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_msg_send?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    274          
    275          /*********************************************************************
    276           * @fn          afIncomingData
    277           *
    278           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    279           *
    280           * @param       aff  - pointer to APS frame format
    281           * @param       SrcAddress  - Source address
    282           * @param       sig - incoming message's link quality
    283           * @param       SecurityUse - Security enable/disable
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    288                               NLDE_Signal_t *sig, byte SecurityUse, uint32 timestamp )
    289          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   8A..         MOV     ?V0 + 10,R2
   \   000017   8B..         MOV     ?V0 + 11,R3
   \   000019   89..         MOV     ?V0 + 3,R1
   \   00001B   741A         MOV     A,#0x1a
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 8,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   741E         MOV     A,#0x1e
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
    290            endPointDesc_t *epDesc = NULL;
    291            uint16 epProfileID = 0xFFFF;  // Invalid Profile ID
   \   000031   75..FF       MOV     ?V0 + 14,#-0x1
   \   000034   75..FF       MOV     ?V0 + 15,#-0x1
    292            epList_t *pList = epList;
   \   000037   90....       MOV     DPTR,#epList
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 1,A
    293          #if !defined ( APS_NO_GROUPS )    
    294            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000041   75..FE       MOV     ?V0 + 2,#-0x2
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   540C         ANL     A,#0xc
   \   00004B   640C         XRL     A,#0xc
   \   00004D   701A         JNZ     ??afIncomingData_0
    295          #endif  
    296          
    297            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    298            {
    299          #if !defined ( APS_NO_GROUPS )    
    300              // Find the first endpoint for this group
    301              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   00004F                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   00004F   79FE         MOV     R1,#-0x2
   \   000051   12....       LCALL   ?Subroutine9 & 0xFFFF
    302              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \                     ??CrossCallReturnLabel_7:
   \   000054   7003         JNZ     $+5
   \   000056   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    303                return;   // No endpoint found
    304          
    305              epDesc = afFindEndPointDesc( grpEp );
   \   000059                ; Setup parameters for call to function afFindEndPointDesc
   \   000059   12....       LCALL   ?Subroutine24 & 0xFFFF
    306              if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_35:
   \   00005C   7001         JNZ     ??afIncomingData_2
   \   00005E   EF           MOV     A,R7
   \                     ??afIncomingData_2:
   \   00005F   7003         JNZ     $+5
   \   000061   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    307                return;   // Endpoint descriptor not found
    308          
    309              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_3:
   \   000064                ; Setup parameters for call to function afFindEndPointDescList
   \   000064   12....       LCALL   ?Subroutine16 & 0xFFFF
    310          #else
    311              return; // Not supported
    312          #endif    
    313            }
   \                     ??CrossCallReturnLabel_21:
   \   000067   8038         SJMP    ??afIncomingData_4
    314            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   74FF         MOV     A,#-0x1
   \   00006F   69           XRL     A,R1
   \   000070   700D         JNZ     ??afIncomingData_5
    315            {
    316              // Set the list
    317              if ( pList != NULL )
   \   000072   E5..         MOV     A,?V0 + 0
   \   000074   7002         JNZ     ??afIncomingData_6
   \   000076   E5..         MOV     A,?V0 + 1
   \                     ??afIncomingData_6:
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    318              {
    319                epDesc = pList->epDesc;
   \   00007D   8017         SJMP    ??afIncomingData_7
    320              }
    321            }
    322            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_5:
   \   00007F                ; Setup parameters for call to function afFindEndPointDesc
   \   00007F   12....       LCALL   ??afFindEndPointDesc?relay
   \   000082   8A..         MOV     ?V0 + 12,R2
   \   000084   8B..         MOV     ?V0 + 13,R3
   \   000086   A8..         MOV     R0,?V0 + 12
   \   000088   A9..         MOV     R1,?V0 + 13
   \   00008A   E8           MOV     A,R0
   \   00008B   FE           MOV     R6,A
   \   00008C   E9           MOV     A,R1
   \   00008D   FF           MOV     R7,A
   \   00008E   E8           MOV     A,R0
   \   00008F   7001         JNZ     ??afIncomingData_8
   \   000091   E9           MOV     A,R1
   \                     ??afIncomingData_8:
   \   000092   600D         JZ      ??afIncomingData_4
   \   000094   80CE         SJMP    ??afIncomingData_3
    323            {
    324              pList = afFindEndPointDescList( epDesc->endPoint );
    325            }
    326          
    327            while ( epDesc )
    328            {
    329              if ( pList->pfnDescCB )
    330              {
    331                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    332                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    333                if ( pID )
    334                {
    335                  epProfileID = *pID;
    336                  osal_mem_free( pID );
    337                }
    338              }
    339              else if ( epDesc->simpleDesc )
    340              {
    341                epProfileID = epDesc->simpleDesc->AppProfId;
    342              }
    343          
    344              if ( (aff->ProfileID == epProfileID) ||
    345                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) )
    346              {
    347                {
    348                  afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig, SecurityUse, timestamp );
    349                }
    350              }
    351          
    352              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    353              {
    354          #if !defined ( APS_NO_GROUPS )      
    355                // Find the next endpoint for this group
    356                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    357                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    358                  return;   // No endpoint found
    359          
    360                epDesc = afFindEndPointDesc( grpEp );
    361                if ( epDesc == NULL )
    362                  return;   // Endpoint descriptor not found
    363          
    364                pList = afFindEndPointDescList( epDesc->endPoint );
    365          #else
    366                return;
    367          #endif      
    368              }
    369              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    370              {
    371                pList = pList->nextDesc;
    372                if ( pList )
    373                  epDesc = pList->epDesc;
   \                     ??afIncomingData_7:
   \   000096   85..82       MOV     DPL,?V0 + 0
   \   000099   85..83       MOV     DPH,?V0 + 1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FE           MOV     R6,A
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   FF           MOV     R7,A
   \                     ??afIncomingData_4:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   7001         JNZ     ??afIncomingData_9
   \   0000A4   EF           MOV     A,R7
   \                     ??afIncomingData_9:
   \   0000A5   7003         JNZ     $+5
   \   0000A7   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000AA   8018         SJMP    ??CrossCallReturnLabel_22
   \                     ??afIncomingData_10:
   \   0000AC                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0000AC   A9..         MOV     R1,?V0 + 2
   \   0000AE   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000B1   7003         JNZ     $+5
   \   0000B3   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000B6                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B6   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000B9   7001         JNZ     ??afIncomingData_11
   \   0000BB   EF           MOV     A,R7
   \                     ??afIncomingData_11:
   \   0000BC   7003         JNZ     $+5
   \   0000BE   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000C1                ; Setup parameters for call to function afFindEndPointDescList
   \   0000C1   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000C4   85..82       MOV     DPL,?V0 + 0
   \   0000C7   85..83       MOV     DPH,?V0 + 1
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000D0   EC           MOV     A,R4
   \   0000D1   7001         JNZ     ??afIncomingData_12
   \   0000D3   ED           MOV     A,R5
   \                     ??afIncomingData_12:
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   6018         JZ      ??afIncomingData_13
   \   0000DA                ; Setup parameters for indirect call
   \   0000DA   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000DD   12....       LCALL   ?CALL_IND
   \   0000E0   EA           MOV     A,R2
   \   0000E1   7001         JNZ     ??afIncomingData_14
   \   0000E3   EB           MOV     A,R3
   \                     ??afIncomingData_14:
   \   0000E4   6019         JZ      ??CrossCallReturnLabel_16
   \   0000E6   8A82         MOV     DPL,R2
   \   0000E8   8B83         MOV     DPH,R3
   \   0000EA   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   12....       LCALL   ??osal_mem_free?relay
   \   0000F0   800D         SJMP    ??CrossCallReturnLabel_16
   \                     ??afIncomingData_13:
   \   0000F2   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000F5   7002         JNZ     ??afIncomingData_15
   \   0000F7   E583         MOV     A,DPH
   \                     ??afIncomingData_15:
   \   0000F9   6004         JZ      ??CrossCallReturnLabel_16
   \   0000FB   A3           INC     DPTR
   \   0000FC   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000FF   85..82       MOV     DPL,?V0 + 10
   \   000102   85..83       MOV     DPH,?V0 + 11
   \   000105   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000108   E5..         MOV     A,?V0 + 14
   \   00010A   68           XRL     A,R0
   \   00010B   7003         JNZ     ??afIncomingData_16
   \   00010D   E5..         MOV     A,?V0 + 15
   \   00010F   69           XRL     A,R1
   \                     ??afIncomingData_16:
   \   000110   600D         JZ      ??afIncomingData_17
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   E0           MOVX    A,@DPTR
   \   000117   7032         JNZ     ??afIncomingData_18
   \   000119   E8           MOV     A,R0
   \   00011A   7001         JNZ     ??afIncomingData_19
   \   00011C   E9           MOV     A,R1
   \                     ??afIncomingData_19:
   \   00011D   702C         JNZ     ??afIncomingData_18
   \                     ??afIncomingData_17:
   \   00011F                ; Setup parameters for call to function afBuildMSGIncoming
   \   00011F   78..         MOV     R0,#?V0 + 4
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000124   7420         MOV     A,#0x20
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00012C   78..         MOV     R0,#?V0 + 8
   \   00012E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000131   7408         MOV     A,#0x8
   \   000133   12....       LCALL   ?XSTACK_DISP0_8
   \   000136   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000139   A9..         MOV     R1,?V0 + 3
   \   00013B   EE           MOV     A,R6
   \   00013C   FC           MOV     R4,A
   \   00013D   EF           MOV     A,R7
   \   00013E   FD           MOV     R5,A
   \   00013F   AA..         MOV     R2,?V0 + 10
   \   000141   AB..         MOV     R3,?V0 + 11
   \   000143   12....       LCALL   ??afBuildMSGIncoming?relay
   \   000146   740A         MOV     A,#0xa
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??afIncomingData_18:
   \   00014B   85..82       MOV     DPL,?V0 + 10
   \   00014E   85..83       MOV     DPH,?V0 + 11
   \   000151   E0           MOVX    A,@DPTR
   \   000152   540C         ANL     A,#0xc
   \   000154   640C         XRL     A,#0xc
   \   000156   7003         JNZ     $+5
   \   000158   02....       LJMP    ??afIncomingData_10 & 0xFFFF
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   64FF         XRL     A,#0xff
   \   000160   701D         JNZ     ??afIncomingData_1
   \   000162   85..82       MOV     DPL,?V0 + 0
   \   000165   85..83       MOV     DPH,?V0 + 1
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   F5..         MOV     ?V0 + 0,A
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F5..         MOV     ?V0 + 1,A
   \   000174   E5..         MOV     A,?V0 + 0
   \   000176   7002         JNZ     ??afIncomingData_20
   \   000178   E5..         MOV     A,?V0 + 1
   \                     ??afIncomingData_20:
   \   00017A   6003         JZ      $+5
   \   00017C   02....       LJMP    ??afIncomingData_7 & 0xFFFF
    374                else
    375                  epDesc = NULL;
   \                     ??afIncomingData_1:
   \   00017F   7402         MOV     A,#0x2
   \   000181                REQUIRE ?Subroutine3
   \   000181                ; // Fall through to label ?Subroutine3
    376              }
    377              else
    378                epDesc = NULL;
    379            }
    380          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ??afFindEndPointDesc?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   EE           MOV     A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??afFindEndPointDescList?relay
   \   000009   8A..         MOV     ?V0 + 0,R2
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   12....       LCALL   ??aps_FindGroupForEndpoint?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   F5..         MOV     ?V0 + 2,A
   \   00000F   74FE         MOV     A,#-0x2
   \   000011   65..         XRL     A,?V0 + 2
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 14,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   7902         MOV     R1,#0x2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine33_0
   \   000007                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine34_0
   \   000001                ; // Fall through to label ??Subroutine34_0
    381          
    382          /*********************************************************************
    383           * @fn          afBuildMSGIncoming
    384           *
    385           * @brief       Build the message for the app
    386           *
    387           * @param
    388           *
    389           * @return      pointer to next in data buffer
    390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    391          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    392                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig, 
    393                           byte SecurityUse, uint32 timestamp )
    394          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   8C..         MOV     ?V0 + 10,R4
   \   000018   8D..         MOV     ?V0 + 11,R5
   \   00001A   741D         MOV     A,#0x1d
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 2,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 3,A
   \   000026   741F         MOV     A,#0x1f
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?L_MOV_X
    395            afIncomingMSGPacket_t *MSGpkt;
    396            const byte len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    397            byte *asdu = aff->asdu;
   \   000030   EA           MOV     A,R2
   \   000031   240E         ADD     A,#0xe
   \   000033   F582         MOV     DPL,A
   \   000035   EB           MOV     A,R3
   \   000036   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000039   12....       LCALL   ?Subroutine13 & 0xFFFF
    398            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_17:
   \   00003C   EA           MOV     A,R2
   \   00003D   2410         ADD     A,#0x10
   \   00003F   F5..         MOV     ?V0 + 8,A
   \   000041   EB           MOV     A,R3
   \   000042   3400         ADDC    A,#0x0
   \   000044   F5..         MOV     ?V0 + 9,A
   \   000046                ; Setup parameters for call to function osal_msg_allocate
   \   000046   85..82       MOV     DPL,?V0 + 8
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   2423         ADD     A,#0x23
   \   00004E   FA           MOV     R2,A
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   12....       LCALL   ??osal_msg_allocate?relay
   \   000054   8A..         MOV     ?V0 + 12,R2
   \   000056   8B..         MOV     ?V0 + 13,R3
   \   000058   AE..         MOV     R6,?V0 + 12
   \   00005A   AF..         MOV     R7,?V0 + 13
    399          
    400            if ( MSGpkt == NULL )
   \   00005C   EE           MOV     A,R6
   \   00005D   7001         JNZ     ??afBuildMSGIncoming_0
   \   00005F   EF           MOV     A,R7
   \                     ??afBuildMSGIncoming_0:
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
    401            {
    402              return;
    403            }
    404          
    405            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000065   741A         MOV     A,#0x1a
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   F0           MOVX    @DPTR,A
    406            MSGpkt->groupId = aff->GroupID;
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000075   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    407            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_43:
   \   000078   85..82       MOV     DPL,?V0 + 0
   \   00007B   85..83       MOV     DPH,?V0 + 1
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    408            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_44:
   \   000088                ; Setup parameters for call to function afCopyAddress
   \   000088   7419         MOV     A,#0x19
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000090   EE           MOV     A,R6
   \   000091   2406         ADD     A,#0x6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   ??afCopyAddress?relay
    409            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   00009B   85..82       MOV     DPL,?V0 + 0
   \   00009E   85..83       MOV     DPH,?V0 + 1
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   C0E0         PUSH    A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   240F         ADD     A,#0xf
   \   0000AA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
    410            MSGpkt->endPoint = epDesc->endPoint;
   \   0000B0   85..82       MOV     DPL,?V0 + 10
   \   0000B3   85..83       MOV     DPH,?V0 + 11
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   C0E0         PUSH    A
   \   0000B9   EE           MOV     A,R6
   \   0000BA   2414         ADD     A,#0x14
   \   0000BC   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000BF   D0E0         POP     A
   \   0000C1   F0           MOVX    @DPTR,A
    411            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000C2   E5..         MOV     A,?V0 + 0
   \   0000C4   240C         ADD     A,#0xc
   \   0000C6   F582         MOV     DPL,A
   \   0000C8   E5..         MOV     A,?V0 + 1
   \   0000CA   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C0E0         PUSH    A
   \   0000D0   EE           MOV     A,R6
   \   0000D1   2415         ADD     A,#0x15
   \   0000D3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine7 & 0xFFFF
    412            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_3:
   \   0000DB   C0E0         PUSH    A
   \   0000DD   EE           MOV     A,R6
   \   0000DE   2416         ADD     A,#0x16
   \   0000E0   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000E3   D0E0         POP     A
   \   0000E5   12....       LCALL   ?Subroutine8 & 0xFFFF
    413            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_5:
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C0E0         PUSH    A
   \   0000EB   EE           MOV     A,R6
   \   0000EC   2417         ADD     A,#0x17
   \   0000EE   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000F1   D0E0         POP     A
   \   0000F3   12....       LCALL   ?Subroutine8 & 0xFFFF
    414            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_6:
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   C0E0         PUSH    A
   \   0000FA   EE           MOV     A,R6
   \   0000FB   2418         ADD     A,#0x18
   \   0000FD   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000100   D0E0         POP     A
   \   000102   F0           MOVX    @DPTR,A
    415            MSGpkt->SecurityUse = SecurityUse;
   \   000103   85..82       MOV     DPL,?XSP + 0
   \   000106   85..83       MOV     DPH,?XSP + 1
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   C0E0         PUSH    A
   \   00010C   EE           MOV     A,R6
   \   00010D   2419         ADD     A,#0x19
   \   00010F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000112   D0E0         POP     A
   \   000114   F0           MOVX    @DPTR,A
    416            MSGpkt->timestamp = timestamp;
   \   000115   EE           MOV     A,R6
   \   000116   241A         ADD     A,#0x1a
   \   000118   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00011B   78..         MOV     R0,#?V0 + 4
   \   00011D   12....       LCALL   ?L_MOV_TO_X
    417            MSGpkt->macDestAddr = aff->macDestAddr;
   \   000120   85..82       MOV     DPL,?V0 + 0
   \   000123   85..83       MOV     DPH,?V0 + 1
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00012B   EE           MOV     A,R6
   \   00012C   2412         ADD     A,#0x12
   \   00012E   12....       LCALL   ?Subroutine6 & 0xFFFF
    418            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_50:
   \   000131   741B         MOV     A,#0x1b
   \   000133   12....       LCALL   ?XSTACK_DISP0_8
   \   000136   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000139   EE           MOV     A,R6
   \   00013A   2410         ADD     A,#0x10
   \   00013C   12....       LCALL   ?Subroutine6 & 0xFFFF
    419            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_51:
   \   00013F   EE           MOV     A,R6
   \   000140   241E         ADD     A,#0x1e
   \   000142   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000145   E4           CLR     A
   \   000146   F0           MOVX    @DPTR,A
    420            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000147   85..82       MOV     DPL,?V0 + 8
   \   00014A   85..83       MOV     DPH,?V0 + 9
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   FC           MOV     R4,A
   \   00014F   7D00         MOV     R5,#0x0
   \   000151   EE           MOV     A,R6
   \   000152   241F         ADD     A,#0x1f
   \   000154   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000157   EC           MOV     A,R4
   \   000158   F0           MOVX    @DPTR,A
   \   000159   A3           INC     DPTR
   \   00015A   E4           CLR     A
   \   00015B   F0           MOVX    @DPTR,A
    421          
    422            if ( MSGpkt->cmd.DataLength )
   \   00015C   EE           MOV     A,R6
   \   00015D   2421         ADD     A,#0x21
   \   00015F   F8           MOV     R0,A
   \   000160   EF           MOV     A,R7
   \   000161   3400         ADDC    A,#0x0
   \   000163   F9           MOV     R1,A
   \   000164   E8           MOV     A,R0
   \   000165   FA           MOV     R2,A
   \   000166   E9           MOV     A,R1
   \   000167   FB           MOV     R3,A
   \   000168   EC           MOV     A,R4
   \   000169   7001         JNZ     ??afBuildMSGIncoming_1
   \   00016B   E4           CLR     A
   \                     ??afBuildMSGIncoming_1:
   \   00016C   602E         JZ      ??afBuildMSGIncoming_2
    423            {
    424              MSGpkt->cmd.Data = (byte *)(MSGpkt + 1);
   \   00016E   EE           MOV     A,R6
   \   00016F   2423         ADD     A,#0x23
   \   000171   08           INC     R0
   \   000172   08           INC     R0
   \   000173   EF           MOV     A,R7
   \   000174   3400         ADDC    A,#0x0
   \   000176   F9           MOV     R1,A
   \   000177   8A82         MOV     DPL,R2
   \   000179   8B83         MOV     DPH,R3
   \   00017B   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    425              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \                     ??CrossCallReturnLabel_45:
   \   00017E                ; Setup parameters for call to function osal_memcpy
   \   00017E   85....       MOV     ?V0 + 0,?V0 + 14
   \   000181   85....       MOV     ?V0 + 1,?V0 + 15
   \   000184   8D..         MOV     ?V0 + 2,R5
   \   000186   78..         MOV     R0,#?V0 + 0
   \   000188   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00018B   8A82         MOV     DPL,R2
   \   00018D   8B83         MOV     DPH,R3
   \   00018F   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    426            }
   \                     ??CrossCallReturnLabel_52:
   \   000192   12....       LCALL   ??osal_memcpy?relay
   \   000195   7403         MOV     A,#0x3
   \   000197   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019A   8008         SJMP    ??afBuildMSGIncoming_3
    427            else
    428            {
    429              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_2:
   \   00019C   8A82         MOV     DPL,R2
   \   00019E   8B83         MOV     DPH,R3
   \   0001A0   E4           CLR     A
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   F0           MOVX    @DPTR,A
    430            }
    431          
    432          #if defined ( MT_AF_CB_FUNC )
    433            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    434            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    435            {
    436              MT_AfIncomingMsg( (void *)MSGpkt );
    437              // Release the memory.
    438              osal_msg_deallocate( (void *)MSGpkt );
    439            }
    440            else
    441          #endif
    442            {
    443              // Send message through task message.
    444              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_3:
   \   0001A4                ; Setup parameters for call to function osal_msg_send
   \   0001A4   EE           MOV     A,R6
   \   0001A5   FA           MOV     R2,A
   \   0001A6   EF           MOV     A,R7
   \   0001A7   FB           MOV     R3,A
   \   0001A8   85..82       MOV     DPL,?V0 + 10
   \   0001AB   85..83       MOV     DPH,?V0 + 11
   \   0001AE   12....       LCALL   ?Subroutine10 & 0xFFFF
    445            }
    446          }
   \                     ??CrossCallReturnLabel_10:
   \   0001B1   7401         MOV     A,#0x1
   \   0001B3   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine30_0
   \   000007                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine32_0
   \   000003                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
    447          
    448          /*********************************************************************
    449           * @fn      AF_DataRequest
    450           *
    451           * @brief   Common functionality for invoking APSDE_DataReq() for both
    452           *          SendMulti and MSG-Send.
    453           *
    454           * input parameters
    455           *
    456           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    457           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    458           * @param   cID - A valid cluster ID as specified by the Profile.
    459           * @param   len - Number of bytes of data pointed to by next param.
    460           * @param  *buf - A pointer to the data bytes to send.
    461           * @param  *transID - A pointer to a byte which can be modified and which will
    462           *                    be used as the transaction sequence number of the msg.
    463           * @param   options - Valid bit mask of Tx options.
    464           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    465           *
    466           * output parameters
    467           *
    468           * @param  *transID - Incremented by one if the return value is success.
    469           *
    470           * @return  afStatus_t - See previous definition of afStatus_... types.
    471           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    472          uint8 AF_DataRequestDiscoverRoute = TRUE;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, 
   \                     AF_DataRequest:
    474                                     endPointDesc_t *srcEP,
    475                                     uint16 cID, 
    476                                     uint16 len,
    477                                     uint8 *buf, 
    478                                     uint8 *transID,
    479                                     uint8 options, 
    480                                     uint8 radius )
    481          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   89..         MOV     ?V0 + 8,R1
   \   000014   7434         MOV     A,#0x34
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 10,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 11,A
   \   000020   7436         MOV     A,#0x36
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 6,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 7,A
   \   00002C   7438         MOV     A,#0x38
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V0 + 12,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 13,A
   \   000038   743A         MOV     A,#0x3a
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F5..         MOV     ?V0 + 2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F5..         MOV     ?V0 + 3,A
   \   000044   743C         MOV     A,#0x3c
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 9,A
    482            pDescCB pfnDescCB;
    483            ZStatus_t stat;
    484            APSDE_DataReq_t req;
    485            afDataReqMTU_t mtu;
    486          
    487            // Verify source end point
    488            if ( srcEP == NULL )
   \   00004C   EC           MOV     A,R4
   \   00004D   7001         JNZ     ??AF_DataRequest_0
   \   00004F   ED           MOV     A,R5
   \                     ??AF_DataRequest_0:
   \   000050   7005         JNZ     ??AF_DataRequest_1
    489            {
    490              return afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_2:
   \   000052   7902         MOV     R1,#0x2
   \   000054   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    491            }
    492          
    493          #if !defined( REFLECTOR )
    494            if ( dstAddr->addrMode == afAddrNotPresent )
    495            {
    496              return afStatus_INVALID_PARAMETER;
    497            }
    498          #endif
    499          
    500            // Validate broadcasting
    501            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    502                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000057   EE           MOV     A,R6
   \   000058   2408         ADD     A,#0x8
   \   00005A   F5..         MOV     ?V0 + 4,A
   \   00005C   EF           MOV     A,R7
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F5..         MOV     ?V0 + 5,A
   \   000061   85..82       MOV     DPL,?V0 + 4
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   FA           MOV     R2,A
   \   000068   7402         MOV     A,#0x2
   \   00006A   6A           XRL     A,R2
   \   00006B   6005         JZ      ??AF_DataRequest_4
   \   00006D   740F         MOV     A,#0xf
   \   00006F   6A           XRL     A,R2
   \   000070   7021         JNZ     ??AF_DataRequest_5
    503            {
    504              // Check for valid broadcast values
    505              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000072                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000072   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000075   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000078   E9           MOV     A,R1
   \   000079   600B         JZ      ??AF_DataRequest_6
    506              {
    507                // Force mode to broadcast
    508                dstAddr->addrMode = afAddrBroadcast;
   \   00007B   740F         MOV     A,#0xf
   \   00007D   85..82       MOV     DPL,?V0 + 4
   \   000080   85..83       MOV     DPH,?V0 + 5
   \   000083   F0           MOVX    @DPTR,A
   \   000084   801A         SJMP    ??AF_DataRequest_7
    509              }
    510              else
    511              {
    512                // Address is not a valid broadcast type
    513                if ( dstAddr->addrMode == afAddrBroadcast )
   \                     ??AF_DataRequest_6:
   \   000086   85..82       MOV     DPL,?V0 + 4
   \   000089   85..83       MOV     DPH,?V0 + 5
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   640F         XRL     A,#0xf
   \   00008F   700F         JNZ     ??AF_DataRequest_7
   \   000091   80BF         SJMP    ??AF_DataRequest_2
    514                {
    515                  return afStatus_INVALID_PARAMETER;
    516                }
    517              }
    518            }
    519            else if ( dstAddr->addrMode != afAddr64Bit &&
    520                      dstAddr->addrMode != afAddrGroup &&
    521                      dstAddr->addrMode != afAddrNotPresent )
   \                     ??AF_DataRequest_5:
   \   000093   7403         MOV     A,#0x3
   \   000095   6A           XRL     A,R2
   \   000096   6008         JZ      ??AF_DataRequest_7
   \   000098   7401         MOV     A,#0x1
   \   00009A   6A           XRL     A,R2
   \   00009B   6003         JZ      ??AF_DataRequest_7
   \   00009D   EA           MOV     A,R2
   \   00009E   70B2         JNZ     ??AF_DataRequest_2
    522            {
    523              return afStatus_INVALID_PARAMETER;
    524            }
    525            
    526            // Set destination address
    527            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   C0E0         PUSH    A
   \   0000A3   740A         MOV     A,#0xa
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   D0E0         POP     A
   \   0000AA   F0           MOVX    @DPTR,A
    528            if ( dstAddr->addrMode == afAddr64Bit )
   \   0000AB   85..82       MOV     DPL,?V0 + 4
   \   0000AE   85..83       MOV     DPH,?V0 + 5
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   6403         XRL     A,#0x3
   \   0000B4   7012         JNZ     ??AF_DataRequest_8
    529              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000B6                ; Setup parameters for call to function sAddrExtCpy
   \   0000B6   EE           MOV     A,R6
   \   0000B7   FC           MOV     R4,A
   \   0000B8   EF           MOV     A,R7
   \   0000B9   FD           MOV     R5,A
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   AA82         MOV     R2,DPL
   \   0000C1   AB83         MOV     R3,DPH
   \   0000C3   12....       LCALL   ??sAddrExtCpy?relay
   \   0000C6   800F         SJMP    ??CrossCallReturnLabel_46
    530            else
    531              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000CF   7402         MOV     A,#0x2
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    532            
    533            req.profileID = ZDO_PROFILE_ID;
   \                     ??CrossCallReturnLabel_46:
   \   0000D7   7411         MOV     A,#0x11
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E4           CLR     A
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   F0           MOVX    @DPTR,A
    534          
    535            if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000E0   90....       MOV     DPTR,#epList
   \   0000E3   8002         SJMP    ??AF_DataRequest_9
   \                     ??AF_DataRequest_10:
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \                     ??AF_DataRequest_9:
   \   0000E7   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000EA   7001         JNZ     ??AF_DataRequest_11
   \   0000EC   E9           MOV     A,R1
   \                     ??AF_DataRequest_11:
   \   0000ED   604A         JZ      ??AF_DataRequest_12
   \   0000EF   8882         MOV     DPL,R0
   \   0000F1   8983         MOV     DPH,R1
   \   0000F3   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000F6   E5..         MOV     A,?V0 + 0
   \   0000F8   6A           XRL     A,R2
   \   0000F9   7003         JNZ     ??AF_DataRequest_13
   \   0000FB   E5..         MOV     A,?V0 + 1
   \   0000FD   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   0000FE   8882         MOV     DPL,R0
   \   000100   8983         MOV     DPH,R1
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   70DE         JNZ     ??AF_DataRequest_10
   \   000107   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00010A   FC           MOV     R4,A
   \   00010B   E9           MOV     A,R1
   \   00010C   FD           MOV     R5,A
   \   00010D   EC           MOV     A,R4
   \   00010E   7001         JNZ     ??AF_DataRequest_14
   \   000110   ED           MOV     A,R5
   \                     ??AF_DataRequest_14:
   \   000111   6026         JZ      ??AF_DataRequest_12
    536            {
    537              uint16 *pID = (uint16 *)(pfnDescCB(
    538                                           AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000113                ; Setup parameters for indirect call
   \   000113   85..82       MOV     DPL,?V0 + 0
   \   000116   85..83       MOV     DPH,?V0 + 1
   \   000119   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00011C   12....       LCALL   ?CALL_IND
    539              if ( pID )
   \   00011F   EA           MOV     A,R2
   \   000120   7001         JNZ     ??AF_DataRequest_15
   \   000122   EB           MOV     A,R3
   \                     ??AF_DataRequest_15:
   \   000123   602E         JZ      ??CrossCallReturnLabel_48
    540              {
    541                req.profileID = *pID;
   \   000125   8A82         MOV     DPL,R2
   \   000127   8B83         MOV     DPH,R3
   \   000129   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00012C   7411         MOV     A,#0x11
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    542                osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_47:
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   12....       LCALL   ??osal_mem_free?relay
   \   000137   801A         SJMP    ??CrossCallReturnLabel_48
    543              }
    544            }
    545            else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   000139   85..82       MOV     DPL,?V0 + 0
   \   00013C   85..83       MOV     DPH,?V0 + 1
   \   00013F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000142   7002         JNZ     ??AF_DataRequest_16
   \   000144   E583         MOV     A,DPH
   \                     ??AF_DataRequest_16:
   \   000146   600B         JZ      ??CrossCallReturnLabel_48
    546            {
    547              req.profileID = srcEP->simpleDesc->AppProfId;
   \   000148   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    548            }
   \                     ??CrossCallReturnLabel_78:
   \   00014B   7411         MOV     A,#0x11
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    549          
    550            req.txOptions = 0;
   \                     ??CrossCallReturnLabel_48:
   \   000153   7417         MOV     A,#0x17
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   E4           CLR     A
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   A3           INC     DPTR
   \   00015B   F0           MOVX    @DPTR,A
    551          
    552            if ( ( options & AF_ACK_REQUEST              ) &&
    553                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    554                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   00015C   E5..         MOV     A,?V0 + 8
   \   00015E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000160   501C         JNC     ??AF_DataRequest_17
   \   000162   740A         MOV     A,#0xa
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   E0           MOVX    A,@DPTR
   \   000168   FA           MOV     R2,A
   \   000169   740F         MOV     A,#0xf
   \   00016B   6A           XRL     A,R2
   \   00016C   6010         JZ      ??AF_DataRequest_17
   \   00016E   7401         MOV     A,#0x1
   \   000170   6A           XRL     A,R2
   \   000171   600B         JZ      ??AF_DataRequest_17
    555            {
    556              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000173   7417         MOV     A,#0x17
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   7404         MOV     A,#0x4
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   A3           INC     DPTR
   \   00017C   E4           CLR     A
   \   00017D   F0           MOVX    @DPTR,A
    557            }
    558          
    559            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_17:
   \   00017E   E5..         MOV     A,?V0 + 8
   \   000180   A2E7         MOV     C,0xE0 /* A   */.7
   \   000182   500C         JNC     ??AF_DataRequest_18
    560            {
    561              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000184   7417         MOV     A,#0x17
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   4410         ORL     A,#0x10
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   F0           MOVX    @DPTR,A
    562            }
    563          
    564            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_18:
   \   000190   E5..         MOV     A,?V0 + 8
   \   000192   A2E6         MOV     C,0xE0 /* A   */.6
   \   000194   5015         JNC     ??AF_DataRequest_19
    565            {
    566              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000196   7417         MOV     A,#0x17
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   E0           MOVX    A,@DPTR
   \   00019C   4401         ORL     A,#0x1
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   A3           INC     DPTR
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   F0           MOVX    @DPTR,A
    567              mtu.aps.secure = TRUE;
   \   0001A2   7401         MOV     A,#0x1
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   7401         MOV     A,#0x1
   \   0001A9   8006         SJMP    ??AF_DataRequest_20
    568            }
    569            else
    570            {
    571              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001AB   7401         MOV     A,#0x1
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   E4           CLR     A
   \                     ??AF_DataRequest_20:
   \   0001B1   F0           MOVX    @DPTR,A
    572            }
    573          
    574            mtu.kvp = FALSE;
   \   0001B2   E4           CLR     A
   \   0001B3   85..82       MOV     DPL,?XSP + 0
   \   0001B6   85..83       MOV     DPH,?XSP + 1
   \   0001B9   12....       LCALL   ?Subroutine7 & 0xFFFF
    575          
    576            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_4:
   \   0001BC   C0E0         PUSH    A
   \   0001BE   7419         MOV     A,#0x19
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   D0E0         POP     A
   \   0001C5   F0           MOVX    @DPTR,A
    577            req.srcEP         = srcEP->endPoint;
   \   0001C6   85..82       MOV     DPL,?V0 + 0
   \   0001C9   85..83       MOV     DPH,?V0 + 1
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   C0E0         PUSH    A
   \   0001CF   740B         MOV     A,#0xb
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   D0E0         POP     A
   \   0001D6   F0           MOVX    @DPTR,A
    578            req.dstEP         = dstAddr->endPoint;
   \   0001D7   8E82         MOV     DPL,R6
   \   0001D9   8F83         MOV     DPH,R7
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   A3           INC     DPTR
   \   0001E0   A3           INC     DPTR
   \   0001E1   A3           INC     DPTR
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   C0E0         PUSH    A
   \   0001E7   740C         MOV     A,#0xc
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   D0E0         POP     A
   \   0001EE   F0           MOVX    @DPTR,A
    579            req.clusterID     = cID;
   \   0001EF   740F         MOV     A,#0xf
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   E5..         MOV     A,?V0 + 10
   \   0001F6   F0           MOVX    @DPTR,A
   \   0001F7   A3           INC     DPTR
   \   0001F8   E5..         MOV     A,?V0 + 11
   \   0001FA   F0           MOVX    @DPTR,A
    580            req.asduLen       = len;
   \   0001FB   7413         MOV     A,#0x13
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   E5..         MOV     A,?V0 + 6
   \   000202   F0           MOVX    @DPTR,A
   \   000203   A3           INC     DPTR
   \   000204   E5..         MOV     A,?V0 + 7
   \   000206   F0           MOVX    @DPTR,A
    581            req.asdu          = buf;
   \   000207   7415         MOV     A,#0x15
   \   000209   12....       LCALL   ?XSTACK_DISP0_8
   \   00020C   E5..         MOV     A,?V0 + 12
   \   00020E   F0           MOVX    @DPTR,A
   \   00020F   A3           INC     DPTR
   \   000210   E5..         MOV     A,?V0 + 13
   \   000212   F0           MOVX    @DPTR,A
    582            req.discoverRoute = AF_DataRequestDiscoverRoute;//(uint8)((options & AF_DISCV_ROUTE) ? 1 : 0);
   \   000213   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   000216   E0           MOVX    A,@DPTR
   \   000217   C0E0         PUSH    A
   \   000219   741A         MOV     A,#0x1a
   \   00021B   12....       LCALL   ?XSTACK_DISP0_8
   \   00021E   D0E0         POP     A
   \   000220   F0           MOVX    @DPTR,A
    583            req.radiusCounter = radius;
   \   000221   741B         MOV     A,#0x1b
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   E5..         MOV     A,?V0 + 9
   \   000228   F0           MOVX    @DPTR,A
    584          #if defined ( INTER_PAN )
    585            req.dstPanId      = dstAddr->panId;
    586          
    587            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    588            {
    589              if ( len > INTERP_DataReqMTU() )
    590              {
    591                stat = afStatus_INVALID_PARAMETER;
    592              }
    593              else
    594              {
    595                stat = INTERP_DataReq( &req );
    596              }
    597            }
    598            else
    599          #endif // INTER_PAN
    600            {
    601              if (len > afDataReqMTU( &mtu ) )
   \   000229                ; Setup parameters for call to function afDataReqMTU
   \   000229   85..82       MOV     DPL,?XSP + 0
   \   00022C   85..83       MOV     DPH,?XSP + 1
   \   00022F   AA82         MOV     R2,DPL
   \   000231   AB83         MOV     R3,DPH
   \   000233   12....       LCALL   ??afDataReqMTU?relay
   \   000236   E9           MOV     A,R1
   \   000237   C3           CLR     C
   \   000238   95..         SUBB    A,?V0 + 6
   \   00023A   E4           CLR     A
   \   00023B   95..         SUBB    A,?V0 + 7
   \   00023D   5022         JNC     ??AF_DataRequest_21
    602              {
    603                if (apsfSendFragmented)
   \   00023F   90....       MOV     DPTR,#apsfSendFragmented
   \   000242   E0           MOVX    A,@DPTR
   \   000243   7002         JNZ     ??AF_DataRequest_22
   \   000245   A3           INC     DPTR
   \   000246   E0           MOVX    A,@DPTR
   \                     ??AF_DataRequest_22:
   \   000247   6014         JZ      ??AF_DataRequest_23
    604                {
    605                  stat = (*apsfSendFragmented)( &req );
   \   000249                ; Setup parameters for indirect call
   \   000249   7402         MOV     A,#0x2
   \   00024B   12....       LCALL   ?XSTACK_DISP0_8
   \   00024E   AA82         MOV     R2,DPL
   \   000250   AB83         MOV     R3,DPH
   \   000252   90....       MOV     DPTR,#apsfSendFragmented
   \   000255   12....       LCALL   ?Subroutine22 & 0xFFFF
    606                }
   \                     ??CrossCallReturnLabel_33:
   \   000258   12....       LCALL   ?CALL_IND
   \   00025B   8010         SJMP    ??AF_DataRequest_24
    607                else
    608                {
    609                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_23:
   \   00025D   7E02         MOV     R6,#0x2
   \   00025F   800E         SJMP    ??AF_DataRequest_25
    610                }
    611              }
    612              else
    613              {
    614                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_21:
   \   000261                ; Setup parameters for call to function APSDE_DataReq
   \   000261   7402         MOV     A,#0x2
   \   000263   12....       LCALL   ?XSTACK_DISP0_8
   \   000266   AA82         MOV     R2,DPL
   \   000268   AB83         MOV     R3,DPH
   \   00026A   12....       LCALL   ??APSDE_DataReq?relay
   \                     ??AF_DataRequest_24:
   \   00026D   E9           MOV     A,R1
   \   00026E   FE           MOV     R6,A
    615              }
    616            }
    617          
    618            /*
    619             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    620             * get added to the NWK databufs. So it will not go OTA and it will not get
    621             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    622             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    623             * message with the first in line TransSeqNumber, even on a multi message.
    624             * Also note that a reflected msg will not have its confirmation generated
    625             * here.
    626             */
    627            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    628                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_25:
   \   00026F   740A         MOV     A,#0xa
   \   000271   12....       LCALL   ?XSTACK_DISP0_8
   \   000274   E0           MOVX    A,@DPTR
   \   000275   6402         XRL     A,#0x2
   \   000277   702E         JNZ     ??AF_DataRequest_26
   \   000279                ; Setup parameters for call to function NLME_GetShortAddr
   \   000279   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00027C   8A..         MOV     ?V0 + 4,R2
   \   00027E   8B..         MOV     ?V0 + 5,R3
   \   000280   A8..         MOV     R0,?V0 + 4
   \   000282   A9..         MOV     R1,?V0 + 5
   \   000284   7402         MOV     A,#0x2
   \   000286   12....       LCALL   ?XSTACK_DISP0_8
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   68           XRL     A,R0
   \   00028B   7003         JNZ     ??AF_DataRequest_27
   \   00028D   A3           INC     DPTR
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   69           XRL     A,R1
   \                     ??AF_DataRequest_27:
   \   000290   7015         JNZ     ??AF_DataRequest_26
    629            {
    630              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000292                ; Setup parameters for call to function afDataConfirm
   \   000292   EE           MOV     A,R6
   \   000293   FB           MOV     R3,A
   \   000294   85..82       MOV     DPL,?V0 + 2
   \   000297   85..83       MOV     DPH,?V0 + 3
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   FA           MOV     R2,A
   \   00029C   85..82       MOV     DPL,?V0 + 0
   \   00029F   85..83       MOV     DPH,?V0 + 1
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   F9           MOV     R1,A
   \   0002A4   12....       LCALL   ??afDataConfirm?relay
    631            }
    632          
    633            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_26:
   \   0002A7   EE           MOV     A,R6
   \   0002A8   7009         JNZ     ??AF_DataRequest_28
    634            {
    635              (*transID)++;
   \   0002AA   85..82       MOV     DPL,?V0 + 2
   \   0002AD   85..83       MOV     DPH,?V0 + 3
   \   0002B0   E0           MOVX    A,@DPTR
   \   0002B1   04           INC     A
   \   0002B2   F0           MOVX    @DPTR,A
    636            }
    637          
    638            return (afStatus_t)stat;
   \                     ??AF_DataRequest_28:
   \   0002B3   EE           MOV     A,R6
   \   0002B4   F9           MOV     R1,A
   \                     ??AF_DataRequest_3:
   \   0002B5   741E         MOV     A,#0x1e
   \   0002B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BA   7F0E         MOV     R7,#0xe
   \   0002BC   02....       LJMP    ?BANKED_LEAVE_XDATA
    639          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine31_0
   \   000004                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   22           RET
    640          
    641          #if defined ( ZIGBEE_SOURCE_ROUTING )
    642          /*********************************************************************
    643           * @fn      AF_DataRequestSrcRtg
    644           *
    645           * @brief   Common functionality for invoking APSDE_DataReq() for both
    646           *          SendMulti and MSG-Send.
    647           *
    648           * input parameters
    649           *
    650           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    651           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    652           * @param   cID - A valid cluster ID as specified by the Profile.
    653           * @param   len - Number of bytes of data pointed to by next param.
    654           * @param  *buf - A pointer to the data bytes to send.
    655           * @param  *transID - A pointer to a byte which can be modified and which will
    656           *                    be used as the transaction sequence number of the msg.
    657           * @param   options - Valid bit mask of Tx options.
    658           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    659           * @param   relayCnt - Number of devices in the relay list
    660           * @param   pRelayList - Pointer to the relay list
    661           *
    662           * output parameters
    663           *
    664           * @param  *transID - Incremented by one if the return value is success.
    665           *
    666           * @return  afStatus_t - See previous definition of afStatus_... types.
    667           */
    668          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    669          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    670                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    671                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    672          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   89..         MOV     ?V0 + 2,R1
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 10,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 11,A
   \   00001B   7416         MOV     A,#0x16
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 8,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 9,A
   \   000027   7418         MOV     A,#0x18
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 6,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 7,A
   \   000033   741A         MOV     A,#0x1a
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 5,A
   \   00003F   741C         MOV     A,#0x1c
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0 + 3,A
   \   000047   741D         MOV     A,#0x1d
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   741E         MOV     A,#0x1e
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?Subroutine17 & 0xFFFF
    673            uint8 status;
    674            
    675            /* Add the source route to the source routing table */
    676            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt, 
    677                                                   pRelayList );
   \                     ??CrossCallReturnLabel_25:
   \   000056                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   000056   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000059   12....       LCALL   ??RTG_AddSrcRtgEntry_Guaranteed?relay
   \   00005C   E9           MOV     A,R1
    678          
    679            if( status == RTG_SUCCESS)
   \   00005D   702D         JNZ     ??AF_DataRequestSrcRtg_0
    680            {
    681              /* Call AF_DataRequest to send the data */
    682              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00005F                ; Setup parameters for call to function AF_DataRequest
   \   00005F   78..         MOV     R0,#?V0 + 3
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   78..         MOV     R0,#?V0 + 4
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   78..         MOV     R0,#?V0 + 6
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   78..         MOV     R0,#?V0 + 8
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   78..         MOV     R0,#?V0 + 10
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   A9..         MOV     R1,?V0 + 2
   \   00007A   AC..         MOV     R4,?V0 + 0
   \   00007C   AD..         MOV     R5,?V0 + 1
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   ??AF_DataRequest?relay
   \   000085   7409         MOV     A,#0x9
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   800B         SJMP    ??AF_DataRequestSrcRtg_1
    683            }
    684            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00008C   7405         MOV     A,#0x5
   \   00008E   69           XRL     A,R1
   \   00008F   7004         JNZ     ??AF_DataRequestSrcRtg_2
    685            {
    686              /* The source route relay count is exceeding the network limit */
    687              status = afStatus_INVALID_PARAMETER;
   \   000091   7902         MOV     R1,#0x2
   \   000093   8002         SJMP    ??AF_DataRequestSrcRtg_1
    688            }
    689            else
    690            {
    691              /* The guaranteed adding entry fails due to memory failure */
    692              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000095   7910         MOV     R1,#0x10
    693            }
    694            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000097   7F0C         MOV     R7,#0xc
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA
    695          }
    696          
    697          #endif
    698          
    699          /*********************************************************************
    700           * @fn      afFindEndPointDescList
    701           *
    702           * @brief   Find the endpoint description entry from the endpoint
    703           *          number.
    704           *
    705           * @param   EndPoint - Application Endpoint to look for
    706           *
    707           * @return  the address to the endpoint/interface description entry
    708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    709          static epList_t *afFindEndPointDescList( byte EndPoint )
   \                     afFindEndPointDescList:
    710          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    711            epList_t *epSearch;
    712          
    713            // Start at the beginning
    714            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8009         SJMP    ??afFindEndPointDescList_0
    715          
    716            // Look through the list until the end
    717            while ( epSearch )
    718            {
    719              // Is there a match?
    720              if ( epSearch->epDesc->endPoint == EndPoint )
    721              {
    722                return ( epSearch );
    723              }
    724              else
    725                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \                     ??afFindEndPointDescList_0:
   \   000012   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000015   EA           MOV     A,R2
   \   000016   7001         JNZ     ??afFindEndPointDescList_2
   \   000018   EB           MOV     A,R3
   \                     ??afFindEndPointDescList_2:
   \   000019   600C         JZ      ??afFindEndPointDescList_3
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000022   69           XRL     A,R1
   \   000023   70E4         JNZ     ??afFindEndPointDescList_1
   \   000025   8004         SJMP    ??afFindEndPointDescList_4
    726            }
    727          
    728            return ( (epList_t *)NULL );
   \                     ??afFindEndPointDescList_3:
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDescList_4:
   \   00002B   02....       LJMP    ?Subroutine0 & 0xFFFF
    729          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET
    730          
    731          /*********************************************************************
    732           * @fn      afFindEndPointDesc
    733           *
    734           * @brief   Find the endpoint description entry from the endpoint
    735           *          number.
    736           *
    737           * @param   EndPoint - Application Endpoint to look for
    738           *
    739           * @return  the address to the endpoint/interface description entry
    740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    741          endPointDesc_t *afFindEndPointDesc( byte EndPoint )
   \                     afFindEndPointDesc:
    742          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    743            epList_t *epSearch;
    744          
    745            // Look for the endpoint
    746            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
    747          
    748            if ( epSearch )
   \                     ??CrossCallReturnLabel_37:
   \   000008   7002         JNZ     ??afFindEndPointDesc_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afFindEndPointDesc_0:
   \   00000C   6005         JZ      ??afFindEndPointDesc_1
    749              return ( epSearch->epDesc );
   \   00000E   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000011   8004         SJMP    ??afFindEndPointDesc_2
    750            else
    751              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_1:
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_2:
   \   000017   02....       LJMP    ?Subroutine2 & 0xFFFF
    752          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ??afFindEndPointDescList?relay
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E582         MOV     A,DPL
   \   000009   22           RET
    753          
    754          /*********************************************************************
    755           * @fn      afFindSimpleDesc
    756           *
    757           * @brief   Find the Simple Descriptor from the endpoint number.
    758           *
    759           * @param   EP - Application Endpoint to look for.
    760           *
    761           * @return  Non-zero to indicate that the descriptor memory must be freed.
    762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    763          byte afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, byte EP )
   \                     afFindSimpleDesc:
    764          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
    765            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000E   8A..         MOV     ?V0 + 2,R2
   \   000010   8B..         MOV     ?V0 + 3,R3
   \   000012   AC..         MOV     R4,?V0 + 2
   \   000014   AD..         MOV     R5,?V0 + 3
    766            byte rtrn = FALSE;
   \   000016   7900         MOV     R1,#0x0
    767          
    768            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   7001         JNZ     ??afFindSimpleDesc_0
   \   00001B   ED           MOV     A,R5
   \                     ??afFindSimpleDesc_0:
   \   00001C   6039         JZ      ??afFindSimpleDesc_1
    769            {
    770              if ( epItem->pfnDescCB )
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000025   E582         MOV     A,DPL
   \   000027   7002         JNZ     ??afFindSimpleDesc_2
   \   000029   E583         MOV     A,DPH
   \                     ??afFindSimpleDesc_2:
   \   00002B   6013         JZ      ??afFindSimpleDesc_3
    771              {
    772                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   AA..         MOV     R2,?V0 + 0
   \   00002F   09           INC     R1
   \   000030   12....       LCALL   ?CALL_IND
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   EA           MOV     A,R2
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   EB           MOV     A,R3
   \   00003B   F0           MOVX    @DPTR,A
    773                rtrn = TRUE;
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   801F         SJMP    ??afFindSimpleDesc_4
    774              }
    775              else
    776              {
    777                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_3:
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   12....       LCALL   ?Subroutine22 & 0xFFFF
    778              }
    779            }
   \                     ??CrossCallReturnLabel_34:
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   EA           MOV     A,R2
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   EB           MOV     A,R3
   \   000055   8007         SJMP    ??afFindSimpleDesc_5
    780            else
    781            {
    782              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_1:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \                     ??afFindSimpleDesc_5:
   \   00005E   F0           MOVX    @DPTR,A
    783            }
    784          
    785            return rtrn;
   \                     ??afFindSimpleDesc_4:
   \   00005F   02....       LJMP    ?Subroutine1 & 0xFFFF
    786          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   22           RET
    787          
    788          /*********************************************************************
    789           * @fn      afGetDescCB
    790           *
    791           * @brief   Get the Descriptor callback function.
    792           *
    793           * @param   epDesc - pointer to the endpoint descriptor
    794           *
    795           * @return  function pointer or NULL
    796           */
    797          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    798          {
    799            epList_t *epSearch;
    800          
    801            // Start at the beginning
    802            epSearch = epList;
    803          
    804            // Look through the list until the end
    805            while ( epSearch )
    806            {
    807              // Is there a match?
    808              if ( epSearch->epDesc == epDesc )
    809              {
    810                return ( epSearch->pfnDescCB );
    811              }
    812              else
    813                epSearch = epSearch->nextDesc;  // Next entry
    814            }
    815          
    816            return ( (pDescCB)NULL );
    817          }
    818          
    819          /*********************************************************************
    820           * @fn      afDataReqMTU
    821           *
    822           * @brief   Get the Data Request MTU(Max Transport Unit).
    823           *
    824           * @param   fields - afDataReqMTU_t
    825           *
    826           * @return  uint8(MTU)
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    829          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    830            uint8 len;
    831            uint8 hdr;
    832          
    833            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    834            {
    835              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    836            }
    837            else
    838            {
    839              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    840            }
    841          
    842            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    843          
    844            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??APSDE_DataReqMTU?relay
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020                REQUIRE ?Subroutine4
   \   000020                ; // Fall through to label ?Subroutine4
    845          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    846          
    847          /*********************************************************************
    848           * @fn      afGetMatch
    849           *
    850           * @brief   Set the allow response flag.
    851           *
    852           * @param   ep - Application Endpoint to look for
    853           * @param   action - true - allow response, false - no response
    854           *
    855           * @return  TRUE allow responses, FALSE no response
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    858          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    859            epList_t *epSearch;
    860          
    861            // Look for the endpoint
    862            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
    863          
    864            if ( epSearch )
   \                     ??CrossCallReturnLabel_38:
   \   000008   7002         JNZ     ??afGetMatch_0
   \   00000A   E583         MOV     A,DPH
   \                     ??afGetMatch_0:
   \   00000C   600B         JZ      ??afGetMatch_1
    865            {
    866              if ( epSearch->flags & eEP_AllowMatch )
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5004         JNC     ??afGetMatch_1
    867                return ( TRUE );
   \   000015   7901         MOV     R1,#0x1
   \   000017   8002         SJMP    ??afGetMatch_2
    868              else
    869                return ( FALSE );
   \                     ??afGetMatch_1:
   \   000019   7900         MOV     R1,#0x0
    870            }
   \                     ??afGetMatch_2:
   \   00001B                REQUIRE ?Subroutine2
   \   00001B                ; // Fall through to label ?Subroutine2
    871            else
    872              return ( FALSE );
    873          }
    874          
    875          /*********************************************************************
    876           * @fn      afSetMatch
    877           *
    878           * @brief   Set the allow response flag.
    879           *
    880           * @param   ep - Application Endpoint to look for
    881           * @param   action - true - allow response, false - no response
    882           *
    883           * @return  TRUE if success, FALSE if endpoint not found
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
    886          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
    887            epList_t *epSearch;
    888          
    889            // Look for the endpoint
    890            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   ??afFindEndPointDescList?relay
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   A8..         MOV     R0,?V0 + 0
   \   000010   A9..         MOV     R1,?V0 + 1
    891          
    892            if ( epSearch )
   \   000012   E8           MOV     A,R0
   \   000013   7001         JNZ     ??afSetMatch_0
   \   000015   E9           MOV     A,R1
   \                     ??afSetMatch_0:
   \   000016   6019         JZ      ??afSetMatch_1
    893            {
    894              if ( action )
   \   000018   E8           MOV     A,R0
   \   000019   2402         ADD     A,#0x2
   \   00001B   F582         MOV     DPL,A
   \   00001D   E9           MOV     A,R1
   \   00001E   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000021   EF           MOV     A,R7
   \   000022   6005         JZ      ??afSetMatch_2
    895              {
    896                epSearch->flags |= eEP_AllowMatch;
   \   000024   E0           MOVX    A,@DPTR
   \   000025   D2E0         SETB    0xE0 /* A   */.0
   \   000027   8003         SJMP    ??afSetMatch_3
    897              }
    898              else
    899              {
    900                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_2:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_3:
   \   00002C   F0           MOVX    @DPTR,A
    901              }
    902              return ( TRUE );
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   8002         SJMP    ??afSetMatch_4
    903            }
    904            else
    905              return ( FALSE );
   \                     ??afSetMatch_1:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afSetMatch_4:
   \   000033   80..         SJMP    ?Subroutine2
    906          }
    907          
    908          /*********************************************************************
    909           * @fn      afNumEndPoints
    910           *
    911           * @brief   Returns the number of endpoints defined (including 0)
    912           *
    913           * @param   none
    914           *
    915           * @return  number of endpoints
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          byte afNumEndPoints( void )
   \                     afNumEndPoints:
    918          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    919            epList_t *epSearch;
    920            byte endpoints;
    921          
    922            // Start at the beginning
    923            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
    924            endpoints = 0;
   \   00000E   7900         MOV     R1,#0x0
   \   000010   8006         SJMP    ??CrossCallReturnLabel_28
    925          
    926            while ( epSearch )
    927            {
    928              endpoints++;
   \                     ??afNumEndPoints_0:
   \   000012   09           INC     R1
    929              epSearch = epSearch->nextDesc;
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ?Subroutine18 & 0xFFFF
    930            }
   \                     ??CrossCallReturnLabel_28:
   \   000018   E582         MOV     A,DPL
   \   00001A   7002         JNZ     ??afNumEndPoints_1
   \   00001C   E583         MOV     A,DPH
   \                     ??afNumEndPoints_1:
   \   00001E   70F2         JNZ     ??afNumEndPoints_0
    931          
    932            return ( endpoints );
   \   000020   02....       LJMP    ?Subroutine0 & 0xFFFF
    933          }
    934          
    935          /*********************************************************************
    936           * @fn      afEndPoints
    937           *
    938           * @brief   Fills in the passed in buffer with the endpoint (numbers).
    939           *          Use afNumEndPoints to find out how big a buffer to supply.
    940           *
    941           * @param   epBuf - pointer to mem used
    942           *
    943           * @return  void
    944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    945          void afEndPoints( byte *epBuf, byte skipZDO )
   \                     afEndPoints:
    946          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    947            epList_t *epSearch;
    948            byte endPoint;
    949          
    950            // Start at the beginning
    951            epSearch = epList;
   \   000005   90....       MOV     DPTR,#epList
   \   000008   8022         SJMP    ??afEndPoints_0
    952          
    953            while ( epSearch )
    954            {
    955              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000011   FE           MOV     R6,A
    956          
    957              if ( !skipZDO || endPoint != 0 )
   \   000012   E9           MOV     A,R1
   \   000013   6003         JZ      ??afEndPoints_2
   \   000015   EE           MOV     A,R6
   \   000016   600B         JZ      ??afEndPoints_3
    958                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000018   EE           MOV     A,R6
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
    959          
    960              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
    961            }
   \                     ??afEndPoints_0:
   \   00002C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00002F   EC           MOV     A,R4
   \   000030   7001         JNZ     ??afEndPoints_4
   \   000032   ED           MOV     A,R5
   \                     ??afEndPoints_4:
   \   000033   70D5         JNZ     ??afEndPoints_1
    962          }
   \   000035   02....       LJMP    ?Subroutine4 & 0xFFFF
    963          
    964          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          void afCopyAddress ( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
    966          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    967            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000005   EC           MOV     A,R4
   \   000006   2408         ADD     A,#0x8
   \   000008   F8           MOV     R0,A
   \   000009   ED           MOV     A,R5
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    968            if ( zAddr->addrMode == Addr64Bit )
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6403         XRL     A,#0x3
   \   000026   7005         JNZ     ??afCopyAddress_0
    969              osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000028                ; Setup parameters for call to function sAddrExtCpy
   \   000028   12....       LCALL   ??sAddrExtCpy?relay
   \   00002B   800E         SJMP    ??CrossCallReturnLabel_49
    970            else
    971              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    972          }
   \                     ??CrossCallReturnLabel_49:
   \   00003B   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegisterExtended?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afRegister?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afIncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afBuildMSGIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AF_DataRequestSrcRtg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDescList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindEndPointDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afFindSimpleDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afDataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afGetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afSetMatch?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afNumEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afEndPoints?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??afCopyAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress
    973          
    974          /*********************************************************************
    975          *********************************************************************/
    976          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AF_DataRequest                     1      0     81
       -> NLME_IsAddressBroadcast       0      0    104
       -> sAddrExtCpy                   0      0    104
       -> osal_mem_free                 0      0    104
       -> afDataReqMTU                  0      0    104
       -> APSDE_DataReq                 0      0    104
       -> NLME_GetShortAddr             0      0    104
       -> afDataConfirm                 0      0    104
     AF_DataRequestSrcRtg               0      0     41
       -> RTG_AddSrcRtgEntry_Guaranteed
                                        0      0     40
       -> AF_DataRequest                0      0     58
     afBuildMSGIncoming                 1      0     64
       -> osal_msg_allocate             0      0     50
       -> afCopyAddress                 0      0     50
       -> osal_memcpy                   0      0     56
       -> osal_msg_send                 0      0     50
     afCopyAddress                      1      0     34
       -> sAddrExtCpy                   0      0     18
     afDataConfirm                      1      0     66
       -> afFindEndPointDesc            0      0     28
       -> osal_msg_allocate             0      0     28
       -> osal_msg_send                 0      0     28
     afDataReqMTU                       0      0     61
       -> APSDE_DataReqMTU              0      0     18
     afEndPoints                        1      0      9
     afFindEndPointDesc                 0      0     36
       -> afFindEndPointDescList        0      0     20
     afFindEndPointDescList             2      0     26
     afFindSimpleDesc                   0      0     12
       -> afFindEndPointDescList        0      0     24
     afGetMatch                         0      0     10
       -> afFindEndPointDescList        0      0     20
     afIncomingData                     0      0     44
       -> aps_FindGroupForEndpoint      0      0     52
       -> afFindEndPointDesc            0      0     52
       -> afFindEndPointDescList        0      0     52
       -> afFindEndPointDesc            0      0     52
       -> aps_FindGroupForEndpoint      0      0     52
       -> afFindEndPointDesc            0      0     52
       -> afFindEndPointDescList        0      0     52
       -> osal_mem_free                 0      0     52
       -> afBuildMSGIncoming            0      0     72
     afInit                             2      0      0
     afNumEndPoints                     2      0      0
     afRegister                         0      0     10
       -> afFindEndPointDescList        0      0     20
       -> afRegisterExtended            0      0     20
     afRegisterExtended                 1      0     22
       -> osal_mem_alloc                0      0     24
     afSetMatch                         0      0     10
       -> afFindEndPointDescList        0      0     20


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     epList                                            2
     afInit                                           11
     ?Subroutine0                                      7
     afRegisterExtended                              110
     ?Subroutine1                                      5
     ?Subroutine5                                      9
     ??Subroutine29_0                                  6
     ?Subroutine14                                     5
     ??Subroutine34_0                                  4
     afRegister                                       54
     ?Subroutine2                                      5
     afDataConfirm                                    78
     ?Subroutine10                                     9
     ?Subroutine28                                     9
     ?Subroutine27                                     5
     afIncomingData                                  385
     ?Subroutine3                                      8
     ?Subroutine24                                    13
     ?Subroutine16                                    14
     ?Subroutine9                                     20
     ?Subroutine13                                     8
     ?Subroutine26                                     3
     ?Subroutine21                                     9
     ?Subroutine11                                    10
     ?Subroutine17                                     6
     ?Subroutine15                                     7
     ??Subroutine33_0                                  1
     afBuildMSGIncoming                              438
     ?Subroutine12                                    11
     ?Subroutine8                                      9
     ?Subroutine7                                      9
     ?Subroutine6                                      7
     ??Subroutine30_0                                  6
     ??Subroutine31_0                                  6
     ?Subroutine23                                     3
     ??Subroutine32_0                                  5
     AF_DataRequestDiscoverRoute                       1
     AF_DataRequest                                  703
     ?Subroutine19                                     4
     ?Subroutine22                                     4
     AF_DataRequestSrcRtg                            156
     afFindEndPointDescList                           46
     ?Subroutine20                                     4
     afFindEndPointDesc                               26
     ?Subroutine25                                    10
     afFindSimpleDesc                                 98
     ?Subroutine18                                    13
     afDataReqMTU                                     32
     ?Subroutine4                                      5
     afGetMatch                                       27
     afSetMatch                                       53
     afNumEndPoints                                   35
     afEndPoints                                      56
     afCopyAddress                                    62
     ?<Initializer for AF_DataRequestDiscoverRoute>    1
     ??afInit?relay                                    6
     ??afRegisterExtended?relay                        6
     ??afRegister?relay                                6
     ??afDataConfirm?relay                             6
     ??afIncomingData?relay                            6
     ??afBuildMSGIncoming?relay                        6
     ??AF_DataRequest?relay                            6
     ??AF_DataRequestSrcRtg?relay                      6
     ??afFindEndPointDescList?relay                    6
     ??afFindEndPointDesc?relay                        6
     ??afFindSimpleDesc?relay                          6
     ??afDataReqMTU?relay                              6
     ??afGetMatch?relay                                6
     ??afSetMatch?relay                                6
     ??afNumEndPoints?relay                            6
     ??afEndPoints?relay                               6
     ??afCopyAddress?relay                             6

 
 2 629 bytes in segment BANKED_CODE
   102 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 2 732 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
