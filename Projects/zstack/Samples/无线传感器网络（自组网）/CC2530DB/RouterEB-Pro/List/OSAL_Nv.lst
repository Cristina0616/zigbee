###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             17/Feb/2013  12:16:49 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\osal\mcu\cc2 #
#                          530\OSAL_Nv.c                                      #
#    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530À #
#                          ı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sam #
#                          ples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ     #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f "C:\Documents and     #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\osal\mcu\cc #
#                          2530\OSAL_Nv.c" -D ZIGBEEPRO -D ZTOOL_P1 -D        #
#                          NWK_AUTO_POLL -D MT_TASK -D MT_SYS_FUNC -D         #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC             #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterE #
#                          B-Pro\List\" -lA "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\" #
#                           --diag_suppress Pe001,Pa010 -o "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\Obj\"  #
#                          -e --require_prototypes --debug --core=plain       #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I "C:\Documents  #
#                          and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ #
#                          ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp    #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\SOURCE\" -I      #
#                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì #
#                          \ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sample #
#                          s\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\. #
#                          .\ZMAIN\TI2530DB\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "C:\Documents and                   #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I "C:\Documents and         #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "C:\Documents and           #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "C:\Documents and            #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "C:\Documents and             #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "C:\Documents and                 #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SADDR\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "C:\Documents and          #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and       #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents and  #
#                          Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ #
#                          »ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp        #
#                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I        #
#                          "C:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\List\OSAL_Nv.lst                              #
#    Object file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ #
#                          ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples #
#                          \SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB #
#                          -Pro\Obj\OSAL_Nv.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àı³Ì\ÏîÄ¿Êµ¼ù\13.Ğ­ÒéÕ»ÍøÂç¹ÜÀí\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2008-08-06 17:17:11 -0700 (Wed, 06 Aug 2008) $
      4            Revision:       $Revision: 17715 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /**************************************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id is to
     43                be reserved for use by this module.
     44          **************************************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "ZComdef.h"
     54          #include "OSAL_Nv.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          #define OSAL_NV_PAGE_FREE       HAL_FLASH_PAGE_SIZE
     73          
     74          // In case pages 0-1 are ever used, define a null page value.
     75          #define OSAL_NV_PAGE_NULL       0
     76          
     77          // In case item Id 0 is ever used, define a null item value.
     78          #define OSAL_NV_ITEM_NULL       0
     79          
     80          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     81          
     82          #define OSAL_NV_PAGE_HDR_OFFSET 0
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          #define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalAdcCheckVdd( HAL_ADC_VDD_LIMIT_4 ))
     89          
     90          #define OSAL_NV_DATA_SIZE( LEN )  \
     91             ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)
     92          
     93          #define OSAL_NV_ITEM_SIZE( LEN )  \
     94            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE)
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          typedef struct
    101          {
    102            uint16 id;
    103            uint16 len;   // Enforce Flash-WORD size on len.
    104            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    105            uint16 stat;  // Item status.
    106          } osalNvHdr_t;
    107          // Struct member offsets.
    108          #define OSAL_NV_HDR_ID    0
    109          #define OSAL_NV_HDR_LEN   2
    110          #define OSAL_NV_HDR_CHK   4
    111          #define OSAL_NV_HDR_STAT  6
    112          
    113          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    114          #define OSAL_NV_HDR_SIZE  8
    115          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    116          
    117          typedef struct
    118          {
    119            uint16 active;
    120            uint16 inUse;
    121            uint16 xfer;
    122            uint16 spare;
    123          } osalNvPgHdr_t;
    124          // Struct member offsets.
    125          #define OSAL_NV_PG_ACTIVE 0
    126          #define OSAL_NV_PG_INUSE  2
    127          #define OSAL_NV_PG_XFER   4
    128          #define OSAL_NV_PG_SPARE  6
    129          
    130          #define OSAL_NV_PAGE_HDR_SIZE  8
    131          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    132          
    133          typedef enum
    134          {
    135            eNvXfer,
    136            eNvZero
    137          } eNvHdrEnum;
    138          
    139          typedef enum
    140          {
    141            ePgActive,
    142            ePgInUse,
    143            ePgXfer,
    144            ePgSpare
    145          } ePgHdrEnum;
    146          
    147          /*********************************************************************
    148           * EXTERNAL FUNCTIONS
    149           */
    150          
    151          extern bool HalAdcCheckVdd(uint8 limit);
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #ifndef OAD_KEEP_NV_PAGES
    158          // When NV pages are to remain intact during OAD download,
    159          // the image itself should not include NV pages.
    160          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    161          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    162          #pragma required=_nvBuf
    163          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
    164          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _nvBuf
    165          #pragma required=_nvIEEE
    166          #endif // OAD_KEEP_NV_PAGES
    167          
    168          /*********************************************************************
    169           * LOCAL VARIABLES
    170           */
    171          
    172          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvIEEE
    174          
    175          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          
    180          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    182          
    183          /* Immediately before the voltage critical operations of a page erase or
    184           * a word write, check bus voltage. If less than min, set global flag & abort.
    185           * Since this is to be done at the lowest level, many void functions would have to be changed to
    186           * return a value and code added to check that value before proceeding, resulting in a very
    187           * expensive code size hit for implementing this properly. Therefore, use this global as follows:
    188           * at the start of osal_nv_item_init/osal_nv_write, set to FALSE, and at the end, before returning,
    189           * check the value. Thus, the global is an accumulator of any error that occurred in any of the
    190           * attempts to modify Flash with a low bus voltage during the complicated sequence of events that
    191           * may occur on any item init or write. This is much more expedient and code saving than adding
    192           * return values and checking return values to early out. No matter which method is used, an NV
    193           * data record may end up mangled due to the low VCC conditions. The strategy is that the headers
    194           * and checksums will detect and allow recovery from such a condition.
    195           *
    196           * One unfortunate side-effect of using the global fail flag vice adding and checking return
    197           * values, is that when setting an item Id to zero has failed due to the low VCC check,
    198           * the page lost-bytes counter is still updated. Having an artificially high lost-byte
    199           * count makes it look like there are more bytes to recover from compacting a page than there may
    200           * actually be. The easy work-around implemented is it to invoke initNV() from osal_nv_item_init or
    201           * osal_nv_write anytime that the failF gets set - this will re-walk all of the pages and set the
    202           * page offset count and page lost bytes count to their actual values.
    203           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint8 failF;
   \                     failF:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          
    210          static uint8  initNV( void );
    211          
    212          static void   setPageUse( uint8 pg, uint8 inUse );
    213          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    214          static void   erasePage( uint8 pg );
    215          static void   compactPage( uint8 pg );
    216          
    217          static uint16 findItem( uint16 id );
    218          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    219          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    220          
    221          static uint16 calcChkB( uint16 len, uint8 *buf );
    222          static uint16 calcChkF( byte pg, uint16 offset, uint16 len );
    223          
    224          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    225          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    226          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    227          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    228          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    229          
    230          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    231          
    232          /*********************************************************************
    233           * @fn      initNV
    234           *
    235           * @brief   Initialize the NV flash pages.
    236           *
    237           * @param   none
    238           *
    239           * @return  TRUE
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          static uint8 initNV( void )
   \                     initNV:
    242          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    243            osalNvPgHdr_t pgHdr;
    244            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
    245            uint8 newPg = OSAL_NV_PAGE_NULL;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
    246            uint8 findDups = FALSE;
   \   000010   7F00         MOV     R7,#0x0
    247            uint8 pg;
    248          
    249            pgRes = OSAL_NV_PAGE_NULL;
   \   000012   E4           CLR     A
   \   000013   90....       MOV     DPTR,#pgRes
   \   000016   F0           MOVX    @DPTR,A
    250          
    251            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000017   7E79         MOV     R6,#0x79
    252            {
    253              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000019                ; Setup parameters for call to function HalFlashRead
   \   000019   75..08       MOV     ?V0 + 2,#0x8
   \   00001C   75..00       MOV     ?V0 + 3,#0x0
   \   00001F   78..         MOV     R0,#?V0 + 2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   EE           MOV     A,R6
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
    254          
    255              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   64FF         XRL     A,#0xff
   \   000042   7004         JNZ     ??initNV_1
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   64FF         XRL     A,#0xff
   \                     ??initNV_1:
   \   000048   7013         JNZ     ??initNV_2
    256              {
    257                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   00004A   90....       MOV     DPTR,#pgRes
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7004         JNZ     ??initNV_3
    258                {
    259                  pgRes = pg;
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   802F         SJMP    ??initNV_4
    260                }
    261                else
    262                {
    263                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   000054                ; Setup parameters for call to function setPageUse
   \   000054   7A01         MOV     R2,#0x1
   \   000056   EE           MOV     A,R6
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??setPageUse?relay
   \   00005B   8026         SJMP    ??initNV_4
    264                }
    265              }
    266              else  // Page is active.
    267              {
    268                // If the page is not yet in use, it is the tgt of items from an xfer.
    269                if ( pgHdr.inUse == OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E0           MOVX    A,@DPTR
   \   000063   64FF         XRL     A,#0xff
   \   000065   7004         JNZ     ??initNV_5
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   64FF         XRL     A,#0xff
   \                     ??initNV_5:
   \   00006B   7004         JNZ     ??initNV_6
    270                {
    271                  newPg = pg;
   \   00006D   8E..         MOV     ?V0 + 0,R6
   \   00006F   8012         SJMP    ??initNV_4
    272                }
    273                // An Xfer from this page was in progress.
    274                else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_6:
   \   000071   7404         MOV     A,#0x4
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   E0           MOVX    A,@DPTR
   \   000077   64FF         XRL     A,#0xff
   \   000079   7004         JNZ     ??initNV_7
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   64FF         XRL     A,#0xff
   \                     ??initNV_7:
   \   00007F   6002         JZ      ??initNV_4
    275                {
    276                  oldPg = pg;
   \   000081   8E..         MOV     ?V0 + 1,R6
    277                }
    278              }
    279          
    280              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    281              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_4:
   \   000083                ; Setup parameters for call to function initPage
   \   000083   EF           MOV     A,R7
   \   000084   FC           MOV     R4,A
   \   000085   7A00         MOV     R2,#0x0
   \   000087   7B00         MOV     R3,#0x0
   \   000089   EE           MOV     A,R6
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??initPage?relay
   \   00008E   EA           MOV     A,R2
   \   00008F   7001         JNZ     ??initNV_8
   \   000091   EB           MOV     A,R3
   \                     ??initNV_8:
   \   000092   6004         JZ      ??initNV_9
    282              {
    283                findDups = TRUE;
   \   000094   7F01         MOV     R7,#0x1
    284                pg = OSAL_NV_PAGE_BEG-1;
   \   000096   7E78         MOV     R6,#0x78
    285                continue;
    286              }
    287            }  // for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_9:
   \   000098   0E           INC     R6
   \   000099   EE           MOV     A,R6
   \   00009A   C3           CLR     C
   \   00009B   947F         SUBB    A,#0x7f
   \   00009D   5003         JNC     $+5
   \   00009F   02....       LJMP    ??initNV_0 & 0xFFFF
    288          
    289            /* First the old page is erased, and then the new page is put into use.
    290             * So if a transfer was in progress, the new page will always not yet be
    291             * marked as in use, since that is the last step to ending a transfer.
    292             */
    293            if ( newPg != OSAL_NV_PAGE_NULL )
   \   0000A2   E5..         MOV     A,?V0 + 0
   \   0000A4   601F         JZ      ??initNV_10
    294            {
    295              /* If there is already a fallow page reserved, keep it and put the newPg in use.
    296               * An unfinished compaction will finish to the new reserve page and the old page
    297               * will be erased and reserved.
    298               */
    299              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   0000A6   90....       MOV     DPTR,#pgRes
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   600D         JZ      ??initNV_11
    300              {
    301                setPageUse( newPg, TRUE );
   \   0000AC                ; Setup parameters for call to function setPageUse
   \   0000AC   7A01         MOV     R2,#0x1
   \   0000AE   A9..         MOV     R1,?V0 + 0
   \   0000B0   12....       LCALL   ??setPageUse?relay
    302              }
    303              else if ( oldPg != OSAL_NV_PAGE_NULL )
    304              {
    305                pgRes = newPg;
    306              }
    307          
    308              /* If a page compaction was interrupted and the page being compacted is not
    309               * yet erased, then there may be items remaining to xfer before erasing.
    310               */
    311              if ( oldPg != OSAL_NV_PAGE_NULL )
   \   0000B3   E5..         MOV     A,?V0 + 1
   \   0000B5   7009         JNZ     ??initNV_12
   \   0000B7   800C         SJMP    ??initNV_10
   \                     ??initNV_11:
   \   0000B9   E5..         MOV     A,?V0 + 1
   \   0000BB   600E         JZ      ??initNV_13
   \   0000BD   E5..         MOV     A,?V0 + 0
   \   0000BF   F0           MOVX    @DPTR,A
    312              {
    313                compactPage( oldPg );
   \                     ??initNV_12:
   \   0000C0                ; Setup parameters for call to function compactPage
   \   0000C0   A9..         MOV     R1,?V0 + 1
   \   0000C2   12....       LCALL   ??compactPage?relay
    314              }
    315            }
    316          
    317            /* If no page met the criteria to be the reserve page:
    318             *  - A compactPage() failed or board reset before doing so.
    319             *  - Perhaps the user changed which Flash pages are dedicated to NV and downloaded the code
    320             *    without erasing Flash?
    321             */
    322            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_10:
   \   0000C5   90....       MOV     DPTR,#pgRes
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   7011         JNZ     ??initNV_14
    323            {
    324              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_13:
   \   0000CB   7E79         MOV     R6,#0x79
    325              {
    326                erasePage( pg );
   \                     ??initNV_15:
   \   0000CD                ; Setup parameters for call to function erasePage
   \   0000CD   EE           MOV     A,R6
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   ??erasePage?relay
    327              }
   \   0000D2   0E           INC     R6
   \   0000D3   EE           MOV     A,R6
   \   0000D4   C3           CLR     C
   \   0000D5   947F         SUBB    A,#0x7f
   \   0000D7   40F4         JC      ??initNV_15
    328              initNV();
   \   0000D9                ; Setup parameters for call to function initNV
   \   0000D9   12....       LCALL   ??initNV?relay
    329            }
    330          
    331            return TRUE;
   \                     ??initNV_14:
   \   0000DC   7901         MOV     R1,#0x1
   \   0000DE   7408         MOV     A,#0x8
   \   0000E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E3                REQUIRE ?Subroutine0
   \   0000E3                ; // Fall through to label ?Subroutine0
    332          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   12....       LCALL   ??HalFlashRead?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    333          
    334          /*********************************************************************
    335           * @fn      setPageUse
    336           *
    337           * @brief   Set page header active/inUse state according to 'inUse'.
    338           *
    339           * @param   pg - Valid NV page to verify and init.
    340           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    341           *
    342           * @return  none
    343           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    344          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    345          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    346            osalNvPgHdr_t pgHdr;
    347          
    348            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
    349          
    350            if ( inUse )
   \   000016   EF           MOV     A,R7
   \   000017   6008         JZ      ??setPageUse_0
    351            {
    352              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   8007         SJMP    ??setPageUse_1
    353            }
    354            else
    355            {
    356              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   74FF         MOV     A,#-0x1
    357            }
   \                     ??setPageUse_1:
   \   000028   12....       LCALL   ??Subroutine30_0 & 0xFFFF
    358          
    359            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_61:
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??writeWord?relay
    360          }
   \   000032   7408         MOV     A,#0x8
   \   000034                REQUIRE ?Subroutine1
   \   000034                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine31_0
   \   000002                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function writeWordH
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001                ; Setup parameters for call to function writeWord
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    361          
    362          /*********************************************************************
    363           * @fn      initPage
    364           *
    365           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    366           *
    367           * @param   pg - Valid NV page to verify and init.
    368           * @param   id - Valid NV item Id to use function as a "findItem".
    369           *               If set to NULL then just perform the page initialization.
    370           *
    371           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    372           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    373           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    375          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 6,R2
   \   00000E   8B..         MOV     ?V0 + 7,R3
   \   000010   8C..         MOV     ?V0 + 5,R4
    376            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV     ?V0 + 2,#0x8
   \   000015   75..00       MOV     ?V0 + 3,#0x0
    377            uint16 sz, lost = 0;
   \   000018   7E00         MOV     R6,#0x0
   \   00001A   7F00         MOV     R7,#0x0
   \   00001C   801B         SJMP    ??initPage_0
    378            osalNvHdr_t hdr;
    379          
    380            do
    381            {
    382              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    383          
    384              if ( hdr.id == OSAL_NV_ERASED_ID )
    385              {
    386                break;
    387              }
    388              offset += OSAL_NV_HDR_SIZE;
    389              sz = OSAL_NV_DATA_SIZE( hdr.len );
    390          
    391              // A bad 'len' write has blown away the rest of the page.
    392              if ( (offset + sz) > OSAL_NV_PAGE_FREE )
    393              {
    394                lost += (OSAL_NV_PAGE_FREE - offset + OSAL_NV_HDR_SIZE);
    395                offset = OSAL_NV_PAGE_FREE;
    396                break;
    397              }
    398          
    399              if ( hdr.id != OSAL_NV_ZEROED_ID )
    400              {
    401                /* This trick allows function to do double duty for findItem() without
    402                 * compromising its essential functionality at powerup initialization.
    403                 */
    404                if ( id != OSAL_NV_ITEM_NULL )
    405                {
    406                  /* This trick allows asking to find the old/transferred item in case
    407                   * of a successful new item write that gets interrupted before the
    408                   * old item can be zeroed out.
    409                   */
    410                  if ( (id & 0x7fff) == hdr.id )
    411                  {
    412                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    413                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
    414                    {
    415                      return offset;
    416                    }
    417                  }
    418                }
    419                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    420                else
    421                {
    422                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
    423                  {
    424                    if ( findDups )
    425                    {
    426                      if ( hdr.stat == OSAL_NV_ERASED_ID )
    427                      {
    428                        /* The trick of setting the MSB of the item Id causes the logic
    429                         * immediately above to return a valid page only if the header 'stat'
    430                         * indicates that it was the older item being transferred.
    431                         */
    432                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
    433          
    434                        if ( off != OSAL_NV_ITEM_NULL )
    435                        {
    436                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
    437                        }
    438                      }
    439                    }
    440                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    441                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
    442                    {
    443                      return OSAL_NV_ERASED_ID;
    444                    }
    445                  }
    446                  else
    447                  {
    448                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
    449                    lost += (OSAL_NV_HDR_SIZE + sz);
    450                  }
    451                }
    452              }
    453              else
    454              {
    455                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_1:
   \   00001E   7408         MOV     A,#0x8
   \   000020   25..         ADD     A,?V0 + 0
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V0 + 1
   \   000026   F9           MOV     R1,A
   \   000027   EE           MOV     A,R6
   \   000028   28           ADD     A,R0
   \   000029   FE           MOV     R6,A
   \   00002A   EF           MOV     A,R7
   \   00002B   39           ADDC    A,R1
   \   00002C   FF           MOV     R7,A
    456              }
    457              offset += sz;
   \                     ??initPage_2:
   \   00002D   E5..         MOV     A,?V0 + 2
   \   00002F   25..         ADD     A,?V0 + 0
   \   000031   F5..         MOV     ?V0 + 2,A
   \   000033   E5..         MOV     A,?V0 + 3
   \   000035   35..         ADDC    A,?V0 + 1
   \   000037   F5..         MOV     ?V0 + 3,A
    458          
    459            } while ( TRUE );
   \                     ??initPage_0:
   \   000039                ; Setup parameters for call to function HalFlashRead
   \   000039   75..08       MOV     ?V0 + 0,#0x8
   \   00003C   75..00       MOV     ?V0 + 1,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AC82         MOV     R4,DPL
   \   00004B   AD83         MOV     R5,DPH
   \   00004D   AA..         MOV     R2,?V0 + 2
   \   00004F   AB..         MOV     R3,?V0 + 3
   \   000051   A9..         MOV     R1,?V0 + 4
   \   000053   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   64FF         XRL     A,#0xff
   \   000062   7004         JNZ     ??initPage_3
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   64FF         XRL     A,#0xff
   \                     ??initPage_3:
   \   000068   6042         JZ      ??initPage_4
   \   00006A   E5..         MOV     A,?V0 + 2
   \   00006C   2408         ADD     A,#0x8
   \   00006E   F5..         MOV     ?V0 + 2,A
   \   000070   E5..         MOV     A,?V0 + 3
   \   000072   3400         ADDC    A,#0x0
   \   000074   F5..         MOV     ?V0 + 3,A
   \   000076   7402         MOV     A,#0x2
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00007E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000081   F5..         MOV     ?V0 + 0,A
   \   000083   74FF         MOV     A,#-0x1
   \   000085   59           ANL     A,R1
   \   000086   F5..         MOV     ?V0 + 1,A
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   25..         ADD     A,?V0 + 2
   \   00008C   F8           MOV     R0,A
   \   00008D   E9           MOV     A,R1
   \   00008E   35..         ADDC    A,?V0 + 3
   \   000090   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000093   4033         JC      ??initPage_5
   \   000095   7408         MOV     A,#0x8
   \   000097   2E           ADD     A,R6
   \   000098   F8           MOV     R0,A
   \   000099   7408         MOV     A,#0x8
   \   00009B   3F           ADDC    A,R7
   \   00009C   F9           MOV     R1,A
   \   00009D   E8           MOV     A,R0
   \   00009E   C3           CLR     C
   \   00009F   95..         SUBB    A,?V0 + 2
   \   0000A1   FE           MOV     R6,A
   \   0000A2   E9           MOV     A,R1
   \   0000A3   95..         SUBB    A,?V0 + 3
   \   0000A5   FF           MOV     R7,A
   \   0000A6   75..00       MOV     ?V0 + 2,#0x0
   \   0000A9   75..08       MOV     ?V0 + 3,#0x8
    460          
    461            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_4:
   \   0000AC   E5..         MOV     A,?V0 + 4
   \   0000AE   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000B1   E5..         MOV     A,?V0 + 2
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E5..         MOV     A,?V0 + 3
   \   0000B7   12....       LCALL   ?Subroutine7 & 0xFFFF
    462            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_2:
   \   0000BA   EE           MOV     A,R6
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   EF           MOV     A,R7
   \   0000BE   F0           MOVX    @DPTR,A
    463          
    464            return OSAL_NV_ITEM_NULL;
   \   0000BF   7A00         MOV     R2,#0x0
   \   0000C1   7B00         MOV     R3,#0x0
   \                     ??initPage_6:
   \   0000C3   7408         MOV     A,#0x8
   \   0000C5   02....       LJMP    ??Subroutine32_0 & 0xFFFF
   \                     ??initPage_5:
   \   0000C8   85..82       MOV     DPL,?XSP + 0
   \   0000CB   85..83       MOV     DPH,?XSP + 1
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   7002         JNZ     ??initPage_7
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \                     ??initPage_7:
   \   0000D3   7003         JNZ     $+5
   \   0000D5   02....       LJMP    ??initPage_1 & 0xFFFF
   \   0000D8   E5..         MOV     A,?V0 + 6
   \   0000DA   7002         JNZ     ??initPage_8
   \   0000DC   E5..         MOV     A,?V0 + 7
   \                     ??initPage_8:
   \   0000DE   6051         JZ      ??initPage_9
   \   0000E0   74FF         MOV     A,#-0x1
   \   0000E2   55..         ANL     A,?V0 + 6
   \   0000E4   F8           MOV     R0,A
   \   0000E5   747F         MOV     A,#0x7f
   \   0000E7   55..         ANL     A,?V0 + 7
   \   0000E9   F9           MOV     R1,A
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   68           XRL     A,R0
   \   0000F2   7003         JNZ     ??initPage_10
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   69           XRL     A,R1
   \                     ??initPage_10:
   \   0000F7   6003         JZ      $+5
   \   0000F9   02....       LJMP    ??initPage_2 & 0xFFFF
   \   0000FC   7406         MOV     A,#0x6
   \   0000FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000101   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000104   7480         MOV     A,#-0x80
   \   000106   55..         ANL     A,?V0 + 7
   \   000108   FB           MOV     R3,A
   \   000109   E4           CLR     A
   \   00010A   7001         JNZ     ??initPage_11
   \   00010C   EB           MOV     A,R3
   \                     ??initPage_11:
   \   00010D   700F         JNZ     ??initPage_12
   \   00010F   74FF         MOV     A,#-0x1
   \   000111   68           XRL     A,R0
   \   000112   7003         JNZ     ??initPage_13
   \   000114   74FF         MOV     A,#-0x1
   \   000116   69           XRL     A,R1
   \                     ??initPage_13:
   \   000117   6003         JZ      $+5
   \   000119   02....       LJMP    ??initPage_2 & 0xFFFF
   \   00011C   800D         SJMP    ??initPage_14
   \                     ??initPage_12:
   \   00011E   74FF         MOV     A,#-0x1
   \   000120   68           XRL     A,R0
   \   000121   7003         JNZ     ??initPage_15
   \   000123   74FF         MOV     A,#-0x1
   \   000125   69           XRL     A,R1
   \                     ??initPage_15:
   \   000126   7003         JNZ     $+5
   \   000128   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_14:
   \   00012B   AA..         MOV     R2,?V0 + 2
   \   00012D   AB..         MOV     R3,?V0 + 3
   \   00012F   8092         SJMP    ??initPage_6
   \                     ??initPage_9:
   \   000131                ; Setup parameters for call to function calcChkF
   \   000131   AA..         MOV     R2,?V0 + 2
   \   000133   AB..         MOV     R3,?V0 + 3
   \   000135   A9..         MOV     R1,?V0 + 4
   \   000137   12....       LCALL   ??calcChkF?relay
   \   00013A   8A..         MOV     ?V0 + 8,R2
   \   00013C   8B..         MOV     ?V0 + 9,R3
   \   00013E   A8..         MOV     R0,?V0 + 8
   \   000140   A9..         MOV     R1,?V0 + 9
   \   000142   7404         MOV     A,#0x4
   \   000144   12....       LCALL   ?XSTACK_DISP0_8
   \   000147   E0           MOVX    A,@DPTR
   \   000148   68           XRL     A,R0
   \   000149   7003         JNZ     ??initPage_16
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   69           XRL     A,R1
   \                     ??initPage_16:
   \   00014E   7053         JNZ     ??initPage_17
   \   000150   7406         MOV     A,#0x6
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000158   E5..         MOV     A,?V0 + 5
   \   00015A   6033         JZ      ??initPage_18
   \   00015C   74FF         MOV     A,#-0x1
   \   00015E   68           XRL     A,R0
   \   00015F   7003         JNZ     ??initPage_19
   \   000161   74FF         MOV     A,#-0x1
   \   000163   69           XRL     A,R1
   \                     ??initPage_19:
   \   000164   6003         JZ      $+5
   \   000166   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000169                ; Setup parameters for call to function findItem
   \   000169   85..82       MOV     DPL,?XSP + 0
   \   00016C   85..83       MOV     DPH,?XSP + 1
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FA           MOV     R2,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   4480         ORL     A,#0x80
   \   000175   FB           MOV     R3,A
   \   000176   12....       LCALL   ??findItem?relay
   \   000179   EA           MOV     A,R2
   \   00017A   7001         JNZ     ??initPage_20
   \   00017C   EB           MOV     A,R3
   \                     ??initPage_20:
   \   00017D   7003         JNZ     $+5
   \   00017F   02....       LJMP    ??initPage_2 & 0xFFFF
   \   000182                ; Setup parameters for call to function setItem
   \   000182   7C01         MOV     R4,#0x1
   \   000184   90....       MOV     DPTR,#findPg
   \   000187   E0           MOVX    A,@DPTR
   \   000188   F9           MOV     R1,A
   \   000189   12....       LCALL   ??setItem?relay
   \   00018C   02....       LJMP    ??initPage_2 & 0xFFFF
   \                     ??initPage_18:
   \   00018F   74FF         MOV     A,#-0x1
   \   000191   68           XRL     A,R0
   \   000192   7003         JNZ     ??initPage_21
   \   000194   74FF         MOV     A,#-0x1
   \   000196   69           XRL     A,R1
   \                     ??initPage_21:
   \   000197   7003         JNZ     $+5
   \   000199   02....       LJMP    ??initPage_2 & 0xFFFF
   \   00019C   7AFF         MOV     R2,#-0x1
   \   00019E   7BFF         MOV     R3,#-0x1
   \   0001A0   02....       LJMP    ??initPage_6 & 0xFFFF
   \                     ??initPage_17:
   \   0001A3                ; Setup parameters for call to function setItem
   \   0001A3   7C01         MOV     R4,#0x1
   \   0001A5   AA..         MOV     R2,?V0 + 2
   \   0001A7   AB..         MOV     R3,?V0 + 3
   \   0001A9   A9..         MOV     R1,?V0 + 4
   \   0001AB   12....       LCALL   ??setItem?relay
   \   0001AE   02....       LJMP    ??initPage_1 & 0xFFFF
    465          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV     A,R0
   \   000001   24..         ADD     A,#((pgLost + 14) & 0xff)
   \   000003   F582         MOV     DPL,A
   \   000005   E9           MOV     A,R1
   \   000006   34..         ADDC    A,#(((pgLost - 242) >> 8) & 0xff)
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F9           MOV     R1,A
   \   000001   C3           CLR     C
   \   000002   E8           MOV     A,R0
   \   000003   9401         SUBB    A,#0x1
   \   000005   E9           MOV     A,R1
   \   000006   9408         SUBB    A,#0x8
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7403         MOV     A,#0x3
   \   000002   2C           ADD     A,R4
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3D           ADDC    A,R5
   \   000006   F9           MOV     R1,A
   \   000007   74FC         MOV     A,#-0x4
   \   000009   58           ANL     A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   E8           MOV     A,R0
   \   000007   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E9           MOV     A,R1
   \   00000C   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV     R7,#0xa
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    466          
    467          /*********************************************************************
    468           * @fn      erasePage
    469           *
    470           * @brief   Erases a page in Flash.
    471           *
    472           * @param   pg - Valid NV page to erase.
    473           *
    474           * @return  none
    475           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    476          static void erasePage( uint8 pg )
   \                     erasePage:
    477          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    478            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   000007                ; Setup parameters for call to function HalAdcCheckVdd
   \   000007   7904         MOV     R1,#0x4
   \   000009   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000C   E9           MOV     A,R1
   \   00000D   7007         JNZ     ??erasePage_0
    479            {
    480              failF = TRUE;
   \   00000F   7401         MOV     A,#0x1
   \   000011   90....       MOV     DPTR,#failF
   \   000014   8014         SJMP    ??erasePage_1
    481              return;
    482            }
    483          
    484            HalFlashErase(pg);
   \                     ??erasePage_0:
   \   000016                ; Setup parameters for call to function HalFlashErase
   \   000016   EE           MOV     A,R6
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??HalFlashErase?relay
    485          
    486            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00001F   7408         MOV     A,#0x8
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   12....       LCALL   ?Subroutine7 & 0xFFFF
    487            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_3:
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \                     ??erasePage_1:
   \   00002A   F0           MOVX    @DPTR,A
    488          }
   \   00002B   02....       LJMP    ??Subroutine29_0 & 0xFFFF
    489          
    490          /*********************************************************************
    491           * @fn      compactPage
    492           *
    493           * @brief   Compacts the page specified.
    494           *
    495           * @param   srcPg - Valid NV page to erase.
    496           *
    497           * @return  none
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          static void compactPage( uint8 srcPg )
   \                     compactPage:
    500          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    501            uint16 dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \   00000C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00000F   12....       LCALL   ?Subroutine13 & 0xFFFF
    502            uint16 srcOff = OSAL_NV_ZEROED_ID;
   \                     ??CrossCallReturnLabel_20:
   \   000012   12....       LCALL   ?Subroutine5 & 0xFFFF
    503            osalNvHdr_t hdr;
    504          
    505            // Mark page as being in process of compaction.
    506            writeWordH( srcPg, OSAL_NV_PG_XFER, (uint8*)(&srcOff) );
   \                     ??CrossCallReturnLabel_59:
   \   000015   7A04         MOV     R2,#0x4
   \   000017   FB           MOV     R3,A
   \   000018   EE           MOV     A,R6
   \   000019   F9           MOV     R1,A
   \   00001A   12....       LCALL   ??writeWordH?relay
    507          
    508            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   7408         MOV     A,#0x8
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E4           CLR     A
   \   000028   02....       LJMP    ??compactPage_0 & 0xFFFF
    509          
    510            do
    511            {
    512              uint16 sz;
    513              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    514          
    515              if ( hdr.id == OSAL_NV_ERASED_ID )
    516              {
    517                break;
    518              }
    519          
    520              srcOff += OSAL_NV_HDR_SIZE;
    521          
    522              if ( (srcOff + hdr.len) > OSAL_NV_PAGE_FREE )
    523              {
    524                break;
    525              }
    526          
    527              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \                     ??compactPage_1:
   \   00002B   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00002E   F5..         MOV     ?V0 + 4,A
   \   000030   74FF         MOV     A,#-0x1
   \   000032   59           ANL     A,R1
   \   000033   F5..         MOV     ?V0 + 5,A
    528          
    529              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   7002         JNZ     ??compactPage_2
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \                     ??compactPage_2:
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??CrossCallReturnLabel_16 & 0xFFFF
    530              {
    531                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000044                ; Setup parameters for call to function calcChkF
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00004D   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   68           XRL     A,R0
   \   000057   7003         JNZ     ??compactPage_3
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   69           XRL     A,R1
   \                     ??compactPage_3:
   \   00005C   7061         JNZ     ??compactPage_4
    532                {
    533                  setItem( srcPg, srcOff, eNvXfer );
   \   00005E                ; Setup parameters for call to function setItem
   \   00005E   7C00         MOV     R4,#0x0
   \   000060   12....       LCALL   ?Subroutine11 & 0xFFFF
    534                  writeBuf( pgRes, dstOff, OSAL_NV_HDR_SIZE, (byte *)(&hdr) );
   \                     ??CrossCallReturnLabel_15:
   \   000063                ; Setup parameters for call to function writeBuf
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   8582..       MOV     ?V0 + 2,DPL
   \   00006B   8583..       MOV     ?V0 + 3,DPH
   \   00006E   78..         MOV     R0,#?V0 + 2
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C08         MOV     R4,#0x8
   \   000075   7D00         MOV     R5,#0x0
   \   000077   AA..         MOV     R2,?V0 + 0
   \   000079   AB..         MOV     R3,?V0 + 1
   \   00007B   90....       MOV     DPTR,#pgRes
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ??writeBuf?relay
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    535                  dstOff += OSAL_NV_HDR_SIZE;
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   2408         ADD     A,#0x8
   \   00008C   F5..         MOV     ?V0 + 0,A
   \   00008E   E5..         MOV     A,?V0 + 1
   \   000090   3400         ADDC    A,#0x0
   \   000092   F5..         MOV     ?V0 + 1,A
    536                  xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000094                ; Setup parameters for call to function xferBuf
   \   000094   78..         MOV     R0,#?V0 + 4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   78..         MOV     R0,#?V0 + 0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   90....       MOV     DPTR,#pgRes
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FC           MOV     R4,A
   \   0000A3   7404         MOV     A,#0x4
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000AB   12....       LCALL   ??xferBuf?relay
   \   0000AE   7404         MOV     A,#0x4
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
    537                  dstOff += sz;
   \   0000B3   E5..         MOV     A,?V0 + 0
   \   0000B5   25..         ADD     A,?V0 + 4
   \   0000B7   F5..         MOV     ?V0 + 0,A
   \   0000B9   E5..         MOV     A,?V0 + 1
   \   0000BB   35..         ADDC    A,?V0 + 5
   \   0000BD   F5..         MOV     ?V0 + 1,A
    538                }
    539          
    540                setItem( srcPg, srcOff, eNvZero );  // Mark old location as invalid.
   \                     ??compactPage_4:
   \   0000BF                ; Setup parameters for call to function setItem
   \   0000BF   7C01         MOV     R4,#0x1
   \   0000C1   12....       LCALL   ?Subroutine11 & 0xFFFF
    541              }
    542          
    543              srcOff += sz;
   \                     ??CrossCallReturnLabel_16:
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   25..         ADD     A,?V0 + 4
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   35..         ADDC    A,?V0 + 5
   \                     ??compactPage_0:
   \   0000D2   F0           MOVX    @DPTR,A
    544          
    545            } while ( TRUE );
   \   0000D3                ; Setup parameters for call to function HalFlashRead
   \   0000D3   75..08       MOV     ?V0 + 2,#0x8
   \   0000D6   75..00       MOV     ?V0 + 3,#0x0
   \   0000D9   78..         MOV     R0,#?V0 + 2
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   7404         MOV     A,#0x4
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   AC82         MOV     R4,DPL
   \   0000E5   AD83         MOV     R5,DPH
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000EF   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   64FF         XRL     A,#0xff
   \   0000FD   7004         JNZ     ??compactPage_5
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   64FF         XRL     A,#0xff
   \                     ??compactPage_5:
   \   000103   602B         JZ      ??compactPage_6
   \   000105   85..82       MOV     DPL,?XSP + 0
   \   000108   85..83       MOV     DPH,?XSP + 1
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   2408         ADD     A,#0x8
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   3400         ADDC    A,#0x0
   \   000113   F0           MOVX    @DPTR,A
   \   000114   7404         MOV     A,#0x4
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00011C   85..82       MOV     DPL,?XSP + 0
   \   00011F   85..83       MOV     DPH,?XSP + 1
   \   000122   E0           MOVX    A,@DPTR
   \   000123   2C           ADD     A,R4
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   3D           ADDC    A,R5
   \   000128   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00012B   5003         JNC     $+5
   \   00012D   02....       LJMP    ??compactPage_1 & 0xFFFF
    546          
    547            pgOff[pgRes-OSAL_NV_PAGE_BEG] = dstOff;
   \                     ??compactPage_6:
   \   000130   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000133   E5..         MOV     A,?V0 + 0
   \   000135   F0           MOVX    @DPTR,A
   \   000136   A3           INC     DPTR
   \   000137   E5..         MOV     A,?V0 + 1
   \   000139   F0           MOVX    @DPTR,A
    548          
    549            /* In order to recover from a page compaction that is interrupted,
    550             * the logic in osal_nv_init() depends upon the following order:
    551             * 1. Compacted page is erased.
    552             * 2. State of the target of compaction is changed ePgActive to ePgInUse.
    553             */
    554            erasePage( srcPg );
   \   00013A                ; Setup parameters for call to function erasePage
   \   00013A   EE           MOV     A,R6
   \   00013B   F9           MOV     R1,A
   \   00013C   12....       LCALL   ??erasePage?relay
    555          
    556            // Mark the reserve page as being in use.
    557            setPageUse( pgRes, TRUE );
   \   00013F                ; Setup parameters for call to function setPageUse
   \   00013F   7A01         MOV     R2,#0x1
   \   000141   90....       MOV     DPTR,#pgRes
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   12....       LCALL   ??setPageUse?relay
    558          
    559            // Set the reserve page to be the newly erased page.
    560            pgRes = srcPg;
   \   000149   EE           MOV     A,R6
   \   00014A   90....       MOV     DPTR,#pgRes
   \   00014D   F0           MOVX    @DPTR,A
    561          }
   \   00014E   740A         MOV     A,#0xa
   \   000150   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EE           MOV     A,R6
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   EE           MOV     A,R6
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??setItem?relay
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#pgRes
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine30_0
   \   000007                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??calcChkF?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   A8..         MOV     R0,?V0 + 2
   \   000009   A9..         MOV     R1,?V0 + 3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    562          
    563          /*********************************************************************
    564           * @fn      findItem
    565           *
    566           * @brief   Find an item Id in NV and return the page and offset to its data.
    567           *
    568           * @param   id - Valid NV item Id.
    569           *
    570           * @return  Offset of data corresponding to item Id, if found;
    571           *          otherwise OSAL_NV_ITEM_NULL.
    572           *
    573           *          The page containing the item, if found;
    574           *          otherwise no valid assignment made - left equal to item Id.
    575           *
    576           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    577          static uint16 findItem( uint16 id )
   \                     findItem:
    578          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   8003         SJMP    ??findItem_0
    579            uint16 off;
    580            uint8 pg;
    581          
    582            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    583            {
    584              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    585              {
    586                findPg = pg;
    587                return off;
    588              }
    589            }
    590          
    591            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    592            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    593            {
    594              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV     A,#-0x80
   \   00000C   4F           ORL     A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV     R7,A
    595            }
   \   00000E   75..79       MOV     ?V0 + 0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV     R4,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   A9..         MOV     R1,?V0 + 0
   \   000019   12....       LCALL   ??initPage?relay
   \   00001C   EA           MOV     A,R2
   \   00001D   7001         JNZ     ??findItem_3
   \   00001F   EB           MOV     A,R3
   \                     ??findItem_3:
   \   000020   6008         JZ      ??findItem_4
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   90....       MOV     DPTR,#findPg
   \   000027   F0           MOVX    @DPTR,A
   \   000028   801A         SJMP    ??findItem_5
   \                     ??findItem_4:
   \   00002A   05..         INC     ?V0 + 0
   \   00002C   E5..         MOV     A,?V0 + 0
   \   00002E   C3           CLR     C
   \   00002F   947F         SUBB    A,#0x7f
   \   000031   40DE         JC      ??findItem_2
   \   000033   7480         MOV     A,#-0x80
   \   000035   5F           ANL     A,R7
   \   000036   F9           MOV     R1,A
   \   000037   E4           CLR     A
   \   000038   7001         JNZ     ??findItem_6
   \   00003A   E9           MOV     A,R1
   \                     ??findItem_6:
   \   00003B   60CD         JZ      ??findItem_1
    596            else
    597            {
    598              findPg = OSAL_NV_PAGE_NULL;
   \   00003D   E4           CLR     A
   \   00003E   90....       MOV     DPTR,#findPg
   \   000041   F0           MOVX    @DPTR,A
    599              return OSAL_NV_ITEM_NULL;
   \   000042   FA           MOV     R2,A
   \   000043   FB           MOV     R3,A
    600            }
   \                     ??findItem_5:
   \   000044   02....       LJMP    ?Subroutine0 & 0xFFFF
    601          }
    602          
    603          /*********************************************************************
    604           * @fn      initItem
    605           *
    606           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    607           *
    608           * @param   id  - Valid NV item Id.
    609           * @param   len - Item data length.
    610           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    611           *
    612           * @return  TRUE if item write and read back checksums ok; FALSE otherwise.
    613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    614          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    615          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   7411         MOV     A,#0x11
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine13 & 0xFFFF
    616            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \                     ??CrossCallReturnLabel_21:
   \   00000F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000012   F8           MOV     R0,A
   \   000013   7408         MOV     A,#0x8
   \   000015   28           ADD     A,R0
   \   000016   F5..         MOV     ?V0 + 4,A
   \   000018   E4           CLR     A
   \   000019   39           ADDC    A,R1
   \   00001A   F5..         MOV     ?V0 + 5,A
    617            uint8 rtrn = FALSE;
   \   00001C   75..00       MOV     ?V0 + 3,#0x0
    618            uint8 cnt = OSAL_NV_PAGES_USED;
   \   00001F   75..06       MOV     ?V0 + 8,#0x6
    619            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000022   90....       MOV     DPTR,#pgRes
   \   000025   E0           MOVX    A,@DPTR
   \   000026   04           INC     A
   \   000027   FF           MOV     R7,A
    620            uint8 idx = 0;
   \   000028   800A         SJMP    ??initItem_0
    621          
    622            do {
    623              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
    624              {
    625                pg = OSAL_NV_PAGE_BEG;
    626              }
    627              if ( pg != pgRes )
    628              {
    629                idx = pg - OSAL_NV_PAGE_BEG;
    630                if ( (pgOff[idx] - pgLost[idx] + sz) <= OSAL_NV_PAGE_FREE )
    631                {
    632                  break;
    633                }
    634              }
    635              pg++;
   \                     ??initItem_1:
   \   00002A   0F           INC     R7
    636            } while (--cnt);
   \   00002B   15..         DEC     ?V0 + 8
   \   00002D   E5..         MOV     A,?V0 + 8
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??initItem_2 & 0xFFFF
   \                     ??initItem_0:
   \   000034   EF           MOV     A,R7
   \   000035   C3           CLR     C
   \   000036   947F         SUBB    A,#0x7f
   \   000038   4002         JC      ??initItem_3
   \   00003A   7F79         MOV     R7,#0x79
   \                     ??initItem_3:
   \   00003C   90....       MOV     DPTR,#pgRes
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6F           XRL     A,R7
   \   000041   60E7         JZ      ??initItem_1
   \   000043   7487         MOV     A,#-0x79
   \   000045   2F           ADD     A,R7
   \   000046   F5..         MOV     ?V0 + 2,A
   \   000048   C3           CLR     C
   \   000049   33           RLC     A
   \   00004A   F8           MOV     R0,A
   \   00004B   E4           CLR     A
   \   00004C   33           RLC     A
   \   00004D   F9           MOV     R1,A
   \   00004E   E8           MOV     A,R0
   \   00004F   24..         ADD     A,#(pgOff & 0xff)
   \   000051   F582         MOV     DPL,A
   \   000053   E9           MOV     A,R1
   \   000054   34..         ADDC    A,#((pgOff >> 8) & 0xff)
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V0 + 6,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F5..         MOV     ?V0 + 7,A
   \   00005F   E8           MOV     A,R0
   \   000060   24..         ADD     A,#(pgLost & 0xff)
   \   000062   F582         MOV     DPL,A
   \   000064   E9           MOV     A,R1
   \   000065   34..         ADDC    A,#((pgLost >> 8) & 0xff)
   \   000067   F583         MOV     DPH,A
   \   000069   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00006C   E5..         MOV     A,?V0 + 6
   \   00006E   C3           CLR     C
   \   00006F   98           SUBB    A,R0
   \   000070   F8           MOV     R0,A
   \   000071   E5..         MOV     A,?V0 + 7
   \   000073   99           SUBB    A,R1
   \   000074   F9           MOV     R1,A
   \   000075   E5..         MOV     A,?V0 + 4
   \   000077   28           ADD     A,R0
   \   000078   F8           MOV     R0,A
   \   000079   E5..         MOV     A,?V0 + 5
   \   00007B   39           ADDC    A,R1
   \   00007C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00007F   50A9         JNC     ??initItem_1
    637          
    638            if (cnt)
   \   000081   E5..         MOV     A,?V0 + 8
   \   000083   6049         JZ      ??initItem_2
    639            {
    640              // Item fits if an old page is compacted.
    641              if ( (pgOff[idx] + sz) > OSAL_NV_PAGE_FREE )
   \   000085   E5..         MOV     A,?V0 + 4
   \   000087   25..         ADD     A,?V0 + 6
   \   000089   F8           MOV     R0,A
   \   00008A   E5..         MOV     A,?V0 + 5
   \   00008C   35..         ADDC    A,?V0 + 7
   \   00008E   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000091   4005         JC      ??initItem_4
    642              {
    643                pg = pgRes;
   \   000093   90....       MOV     DPTR,#pgRes
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FF           MOV     R7,A
    644              }
    645          
    646              // New item is the first one written to the reserved page, then the old page is compacted.
    647              rtrn = writeItem( pg, id, len, buf, flag );
   \                     ??initItem_4:
   \   000098                ; Setup parameters for call to function writeItem
   \   000098   EE           MOV     A,R6
   \   000099   F5..         MOV     ?V0 + 3,A
   \   00009B   78..         MOV     R0,#?V0 + 3
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A0   78..         MOV     R0,#?V0 + 0
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   EF           MOV     A,R7
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??writeItem?relay
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   E9           MOV     A,R1
   \   0000B0   F5..         MOV     ?V0 + 3,A
    648          
    649              if ( pg == pgRes )
   \   0000B2   90....       MOV     DPTR,#pgRes
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   6F           XRL     A,R7
   \   0000B7   7015         JNZ     ??initItem_2
    650              {
    651                if ( flag )
   \   0000B9   7479         MOV     A,#0x79
   \   0000BB   25..         ADD     A,?V0 + 2
   \   0000BD   F9           MOV     R1,A
   \   0000BE   EE           MOV     A,R6
   \   0000BF   6005         JZ      ??initItem_5
    652                {
    653                  compactPage( OSAL_NV_PAGE_BEG+idx );
   \   0000C1                ; Setup parameters for call to function compactPage
   \   0000C1   12....       LCALL   ??compactPage?relay
   \   0000C4   8008         SJMP    ??initItem_2
    654                }
    655                else
    656                {
    657                  *(uint8 *)buf = OSAL_NV_PAGE_BEG+idx;
   \                     ??initItem_5:
   \   0000C6   E9           MOV     A,R1
   \   0000C7   85..82       MOV     DPL,?V0 + 0
   \   0000CA   85..83       MOV     DPH,?V0 + 1
   \   0000CD   F0           MOVX    @DPTR,A
    658                }
    659              }
    660            }
    661          
    662            return rtrn;
   \                     ??initItem_2:
   \   0000CE   A9..         MOV     R1,?V0 + 3
   \   0000D0   7F09         MOV     R7,#0x9
   \   0000D2   02....       LJMP    ?BANKED_LEAVE_XDATA
    663          }
    664          
    665          /*********************************************************************
    666           * @fn      setItem
    667           *
    668           * @brief   Set an item Id or status to mark its state.
    669           *
    670           * @param   pg - Valid NV page.
    671           * @param   offset - Valid offset into the page of the item data - the header
    672           *                   offset is calculated from this.
    673           * @param   stat - Valid enum value for the item status.
    674           *
    675           * @return  none
    676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    678          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
   \   00000C   8C..         MOV     ?V0 + 0,R4
    679            osalNvHdr_t hdr;
    680          
    681            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV     A,R2
   \   00000F   24F8         ADD     A,#-0x8
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   EB           MOV     A,R3
   \   000014   34FF         ADDC    A,#-0x1
   \   000016   F5..         MOV     ?V0 + 3,A
    682            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV     ?V0 + 4,#0x8
   \   00001B   75..00       MOV     ?V0 + 5,#0x0
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   AA..         MOV     R2,?V0 + 2
   \   00002E   AB..         MOV     R3,?V0 + 3
   \   000030   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    683          
    684            if ( stat == eNvXfer )
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   7022         JNZ     ??setItem_0
    685            {
    686              hdr.stat = OSAL_NV_ACTIVE;
   \   00003A   7406         MOV     A,#0x6
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    687              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   000043                ; Setup parameters for call to function writeWord
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AC82         MOV     R4,DPL
   \   00004A   AD83         MOV     R5,DPH
   \   00004C   7404         MOV     A,#0x4
   \   00004E   25..         ADD     A,?V0 + 2
   \   000050   FA           MOV     R2,A
   \   000051   E4           CLR     A
   \   000052   35..         ADDC    A,?V0 + 3
   \   000054   FB           MOV     R3,A
   \   000055   A9..         MOV     R1,?V0 + 1
   \   000057   12....       LCALL   ??writeWord?relay
   \   00005A   802A         SJMP    ??setItem_1
    688          }
    689            else // if ( stat == eNvZero )
    690            {
    691              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    692                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000064   FE           MOV     R6,A
   \   000065   E4           CLR     A
   \   000066   39           ADDC    A,R1
   \   000067   FF           MOV     R7,A
    693              hdr.id = 0;
   \   000068   12....       LCALL   ?Subroutine5 & 0xFFFF
    694              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_60:
   \   00006B   AA..         MOV     R2,?V0 + 2
   \   00006D   AB..         MOV     R3,?V0 + 3
   \   00006F   A9..         MOV     R1,?V0 + 1
   \   000071   12....       LCALL   ??writeWord?relay
    695              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000074   E5..         MOV     A,?V0 + 1
   \   000076   C3           CLR     C
   \   000077   33           RLC     A
   \   000078   F8           MOV     R0,A
   \   000079   E4           CLR     A
   \   00007A   33           RLC     A
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ?Subroutine28 & 0xFFFF
    696            }
   \                     ??CrossCallReturnLabel_57:
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   2E           ADD     A,R6
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   3F           ADDC    A,R7
   \   000085   F0           MOVX    @DPTR,A
    697          }
   \                     ??setItem_1:
   \   000086   7408         MOV     A,#0x8
   \   000088   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   7408         MOV     A,#0x8
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   74FC         MOV     A,#-0x4
   \   00000B   58           ANL     A,R0
   \   00000C   F8           MOV     R0,A
   \   00000D   22           RET
    698          
    699          /*********************************************************************
    700           * @fn      calcChkB
    701           *
    702           * @brief   Calculates the data checksum over the 'buf' parameter.
    703           *
    704           * @param   pg - A valid NV Flash page.
    705           * @param   offset - A valid offset into the page.
    706           * @param   len - Byte count of the data to be checksummed.
    707           *
    708           * @return  Calculated checksum of the data bytes.
    709           */
    710          static uint16 calcChkB( uint16 len, uint8 *buf )
    711          {
    712            uint8 fill = len % OSAL_NV_WORD_SIZE;
    713            uint16 chk;
    714          
    715            if ( !buf )
    716            {
    717              chk = len * OSAL_NV_ERASED;
    718            }
    719            else
    720            {
    721              chk = 0;
    722              while ( len-- )
    723              {
    724                chk += *buf++;
    725              }
    726            }
    727          
    728            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    729            if ( fill )
    730            {
    731              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    732            }
    733          
    734            return chk;
    735          }
    736          
    737          /*********************************************************************
    738           * @fn      calcChkF
    739           *
    740           * @brief   Calculates the data checksum by reading the data bytes from NV.
    741           *
    742           * @param   pg - A valid NV Flash page.
    743           * @param   offset - A valid offset into the page.
    744           * @param   len - Byte count of the data to be checksummed.
    745           *
    746           * @return  Calculated checksum of the data bytes.
    747           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    748          static uint16 calcChkF( byte pg, uint16 offset, uint16 len )
   \                     calcChkF:
    749          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 4,R1
   \   00000C   8A..         MOV     ?V0 + 2,R2
   \   00000E   8B..         MOV     ?V0 + 3,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    750            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    751          
    752            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   7403         MOV     A,#0x3
   \   00001C   2E           ADD     A,R6
   \   00001D   F5..         MOV     ?V0 + 6,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V0 + 7,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V0 + 6
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V0 + 6
   \   00002C   AF..         MOV     R7,?V0 + 7
   \   00002E   8047         SJMP    ??calcChkF_0
    753          
    754            while ( len-- )
    755            {
    756              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    757          
    758              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \                     ??calcChkF_1:
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..04       MOV     ?V0 + 6,#0x4
   \   000033   75..00       MOV     ?V0 + 7,#0x0
   \   000036   78..         MOV     R0,#?V0 + 6
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   AC82         MOV     R4,DPL
   \   000042   AD83         MOV     R5,DPH
   \   000044   AA..         MOV     R2,?V0 + 2
   \   000046   AB..         MOV     R3,?V0 + 3
   \   000048   A9..         MOV     R1,?V0 + 4
   \   00004A   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
    759              offset += OSAL_NV_WORD_SIZE;
   \   000050   E5..         MOV     A,?V0 + 2
   \   000052   2404         ADD     A,#0x4
   \   000054   F5..         MOV     ?V0 + 2,A
   \   000056   E5..         MOV     A,?V0 + 3
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F5..         MOV     ?V0 + 3,A
    760          
    761              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   00005C   7A00         MOV     R2,#0x0
    762              {
    763                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   00005E   8A..         MOV     ?V0 + 6,R2
   \   000060   12....       LCALL   ?Subroutine24 & 0xFFFF
    764              }
   \                     ??CrossCallReturnLabel_49:
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   E5..         MOV     A,?V0 + 0
   \   000067   28           ADD     A,R0
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   E5..         MOV     A,?V0 + 1
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F5..         MOV     ?V0 + 1,A
   \   000070   0A           INC     R2
   \   000071   EA           MOV     A,R2
   \   000072   C3           CLR     C
   \   000073   9404         SUBB    A,#0x4
   \   000075   40E7         JC      ??calcChkF_2
    765            }
   \                     ??calcChkF_0:
   \   000077   EE           MOV     A,R6
   \   000078   F8           MOV     R0,A
   \   000079   EF           MOV     A,R7
   \   00007A   F9           MOV     R1,A
   \   00007B   74FF         MOV     A,#-0x1
   \   00007D   28           ADD     A,R0
   \   00007E   1E           DEC     R6
   \   00007F   74FF         MOV     A,#-0x1
   \   000081   39           ADDC    A,R1
   \   000082   FF           MOV     R7,A
   \   000083   E8           MOV     A,R0
   \   000084   7001         JNZ     ??calcChkF_3
   \   000086   E9           MOV     A,R1
   \                     ??calcChkF_3:
   \   000087   70A7         JNZ     ??calcChkF_1
    766          
    767            return chk;
   \   000089   AA..         MOV     R2,?V0 + 0
   \   00008B   AB..         MOV     R3,?V0 + 1
   \   00008D   7404         MOV     A,#0x4
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   7F08         MOV     R7,#0x8
   \   000094   02....       LJMP    ?BANKED_LEAVE_XDATA
    768          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 6
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET
    769          
    770          /*********************************************************************
    771           * @fn      writeWord
    772           *
    773           * @brief   Writes a Flash-WORD to NV.
    774           *
    775           * @param   pg - A valid NV Flash page.
    776           * @param   offset - A valid offset into the page.
    777           * @param   buf - Pointer to source buffer.
    778           *
    779           * @return  none
    780           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    781          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    782          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    783            offset = (offset >> 2) + ((uint16)pg << 9);
    784          
    785            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000F                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000F   7904         MOV     R1,#0x4
   \   000011   12....       LCALL   ??HalAdcCheckVdd?relay
   \   000014   E9           MOV     A,R1
   \   000015   6032         JZ      ??writeWord_0
    786            {
    787              HalFlashWrite(offset, buf, 1);
   \   000017                ; Setup parameters for call to function HalFlashWrite
   \   000017   75..01       MOV     ?V0 + 2,#0x1
   \   00001A   75..00       MOV     ?V0 + 3,#0x0
   \   00001D   78..         MOV     R0,#?V0 + 2
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   EE           MOV     A,R6
   \   000023   FC           MOV     R4,A
   \   000024   EF           MOV     A,R7
   \   000025   FD           MOV     R5,A
   \   000026   7402         MOV     A,#0x2
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?US_SHR
   \   00002D   85....       MOV     ?V0 + 2,?V0 + 4
   \   000030   7409         MOV     A,#0x9
   \   000032   78..         MOV     R0,#?V0 + 2
   \   000034   12....       LCALL   ?S_SHL
   \   000037   25..         ADD     A,?V0 + 0
   \   000039   FA           MOV     R2,A
   \   00003A   E5..         MOV     A,?V0 + 3
   \   00003C   35..         ADDC    A,?V0 + 1
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   ??HalFlashWrite?relay
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   8006         SJMP    ??writeWord_1
    788            }
    789            else
    790            {
    791              failF = TRUE;
   \                     ??writeWord_0:
   \   000049   7401         MOV     A,#0x1
   \   00004B   90....       MOV     DPTR,#failF
   \   00004E   F0           MOVX    @DPTR,A
    792            }
    793          }
   \                     ??writeWord_1:
   \   00004F   7F05         MOV     R7,#0x5
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
    794          
    795          /*********************************************************************
    796           * @fn      writeWordM
    797           *
    798           * @brief   Writes multiple Flash-WORDs to NV.
    799           *
    800           * @param   pg - A valid NV Flash page.
    801           * @param   offset - A valid offset into the page.
    802           * @param   buf - Pointer to source buffer.
    803           * @param   cnt - Number of 4-byte blocks to write.
    804           *
    805           * @return  none
    806           */
    807          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    808          {
    809            offset = (offset >> 2) + ((uint16)pg << 9);
    810          
    811            if ( OSAL_NV_CHECK_BUS_VOLTAGE )
    812            {
    813              HalFlashWrite(offset, buf, cnt);
    814            }
    815            else
    816            {
    817              failF = TRUE;
    818            }
    819          }
    820          
    821          /*********************************************************************
    822           * @fn      writeWordH
    823           *
    824           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    825           *
    826           * @param   pg - A valid NV Flash page.
    827           * @param   offset - A valid offset into the page.
    828           * @param   buf - Pointer to source buffer.
    829           *
    830           * @return  none
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    833          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    834            uint8 tmp[4];
    835          
    836            tmp[0] = buf[0];
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   F0           MOVX    @DPTR,A
    837            tmp[1] = buf[1];
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C0E0         PUSH    A
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   D0E0         POP     A
   \   000025   F0           MOVX    @DPTR,A
    838            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   74FF         MOV     A,#-0x1
   \   00002D   F0           MOVX    @DPTR,A
    839            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74FF         MOV     A,#-0x1
   \   000035   12....       LCALL   ??Subroutine31_0 & 0xFFFF
    840          
    841            writeWord( pg, offset, tmp );
   \                     ??CrossCallReturnLabel_62:
   \   000038   12....       LCALL   ??writeWord?relay
    842          }
   \   00003B   7404         MOV     A,#0x4
   \   00003D   02....       LJMP    ?Subroutine1 & 0xFFFF
    843          
    844          /*********************************************************************
    845           * @fn      writeBuf
    846           *
    847           * @brief   Writes a data buffer to NV.
    848           *
    849           * @param   dstPg - A valid NV Flash page.
    850           * @param   offset - A valid offset into the page.
    851           * @param   len  - Byte count of the data to write.
    852           * @param   buf  - The data to write.
    853           *
    854           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    857          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V0 + 4,R4
   \   000012   8D..         MOV     ?V0 + 5,R5
   \   000014   7416         MOV     A,#0x16
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine14 & 0xFFFF
    858            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_23:
   \   00001C   EE           MOV     A,R6
   \   00001D   5403         ANL     A,#0x3
   \   00001F   F5..         MOV     ?V0 + 0,A
    859            uint8 tmp[OSAL_NV_WORD_SIZE];
    860          
    861            if ( rem )
   \   000021   606E         JZ      ??writeBuf_0
    862            {
    863              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000023   74FC         MOV     A,#-0x4
   \   000025   5E           ANL     A,R6
   \   000026   FE           MOV     R6,A
    864              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000027                ; Setup parameters for call to function HalFlashRead
   \   000027   75..04       MOV     ?V0 + 6,#0x4
   \   00002A   75..00       MOV     ?V0 + 7,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 6
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   EE           MOV     A,R6
   \   00003C   FA           MOV     R2,A
   \   00003D   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   8022         SJMP    ??writeBuf_1
    865          
    866              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    867              {
    868                tmp[rem++] = *buf++;
   \                     ??writeBuf_2:
   \   000045   85..82       MOV     DPL,?V0 + 2
   \   000048   85..83       MOV     DPH,?V0 + 3
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   C0E0         PUSH    A
   \   00004E   85....       MOV     ?V0 + 6,?V0 + 0
   \   000051   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000054   D0E0         POP     A
   \   000056   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000059   05..         INC     ?V0 + 0
    869                len--;
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   24FF         ADD     A,#-0x1
   \   00005F   F5..         MOV     ?V0 + 4,A
   \   000061   E5..         MOV     A,?V0 + 5
   \   000063   34FF         ADDC    A,#-0x1
   \   000065   F5..         MOV     ?V0 + 5,A
    870              }
   \                     ??writeBuf_1:
   \   000067   E5..         MOV     A,?V0 + 0
   \   000069   C3           CLR     C
   \   00006A   9404         SUBB    A,#0x4
   \   00006C   5008         JNC     ??writeBuf_3
   \   00006E   E5..         MOV     A,?V0 + 4
   \   000070   7002         JNZ     ??writeBuf_4
   \   000072   E5..         MOV     A,?V0 + 5
   \                     ??writeBuf_4:
   \   000074   70CF         JNZ     ??writeBuf_2
    871          
    872              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_3:
   \   000076                ; Setup parameters for call to function writeWord
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   AC82         MOV     R4,DPL
   \   00007E   AD83         MOV     R5,DPH
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   A9..         MOV     R1,?V0 + 1
   \   000086   12....       LCALL   ??writeWord?relay
    873              dstOff += OSAL_NV_WORD_SIZE;
   \   000089   EE           MOV     A,R6
   \   00008A   2404         ADD     A,#0x4
   \   00008C   FE           MOV     R6,A
   \   00008D   EF           MOV     A,R7
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FF           MOV     R7,A
    874            }
    875          
    876            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   000091   E5..         MOV     A,?V0 + 4
   \   000093   5403         ANL     A,#0x3
   \   000095   F5..         MOV     ?V0 + 0,A
    877            len /= OSAL_NV_WORD_SIZE;
   \   000097   85....       MOV     ?V0 + 6,?V0 + 4
   \   00009A   85....       MOV     ?V0 + 7,?V0 + 5
   \   00009D   7402         MOV     A,#0x2
   \   00009F   78..         MOV     R0,#?V0 + 6
   \   0000A1   12....       LCALL   ?US_SHR
   \   0000A4   85....       MOV     ?V0 + 4,?V0 + 6
   \   0000A7   85....       MOV     ?V0 + 5,?V0 + 7
    878          
    879            if ( len )
   \   0000AA   E5..         MOV     A,?V0 + 4
   \   0000AC   7002         JNZ     ??writeBuf_5
   \   0000AE   E5..         MOV     A,?V0 + 5
   \                     ??writeBuf_5:
   \   0000B0   605B         JZ      ??writeBuf_6
    880            {
    881              writeWordM( dstPg, dstOff, buf, len );
   \   0000B2                ; Setup parameters for call to function HalAdcCheckVdd
   \   0000B2   7904         MOV     R1,#0x4
   \   0000B4   12....       LCALL   ??HalAdcCheckVdd?relay
   \   0000B7   E9           MOV     A,R1
   \   0000B8   6032         JZ      ??writeBuf_7
   \   0000BA                ; Setup parameters for call to function HalFlashWrite
   \   0000BA   78..         MOV     R0,#?V0 + 4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   AC..         MOV     R4,?V0 + 2
   \   0000C1   AD..         MOV     R5,?V0 + 3
   \   0000C3   8E..         MOV     ?V0 + 6,R6
   \   0000C5   8F..         MOV     ?V0 + 7,R7
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   78..         MOV     R0,#?V0 + 6
   \   0000CB   12....       LCALL   ?US_SHR
   \   0000CE   85....       MOV     ?V0 + 8,?V0 + 1
   \   0000D1   F5..         MOV     ?V0 + 9,A
   \   0000D3   7409         MOV     A,#0x9
   \   0000D5   78..         MOV     R0,#?V0 + 8
   \   0000D7   12....       LCALL   ?S_SHL
   \   0000DA   25..         ADD     A,?V0 + 6
   \   0000DC   FA           MOV     R2,A
   \   0000DD   E5..         MOV     A,?V0 + 9
   \   0000DF   35..         ADDC    A,?V0 + 7
   \   0000E1   FB           MOV     R3,A
   \   0000E2   12....       LCALL   ??HalFlashWrite?relay
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   8006         SJMP    ??writeBuf_8
   \                     ??writeBuf_7:
   \   0000EC   7401         MOV     A,#0x1
   \   0000EE   90....       MOV     DPTR,#failF
   \   0000F1   F0           MOVX    @DPTR,A
    882              dstOff += OSAL_NV_WORD_SIZE * len;
   \                     ??writeBuf_8:
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   78..         MOV     R0,#?V0 + 4
   \   0000F6   12....       LCALL   ?S_SHL
   \   0000F9   A8..         MOV     R0,?V0 + 4
   \   0000FB   A9..         MOV     R1,?V0 + 5
   \   0000FD   EE           MOV     A,R6
   \   0000FE   28           ADD     A,R0
   \   0000FF   FE           MOV     R6,A
   \   000100   EF           MOV     A,R7
   \   000101   39           ADDC    A,R1
   \   000102   FF           MOV     R7,A
    883              buf += OSAL_NV_WORD_SIZE * len;
   \   000103   E5..         MOV     A,?V0 + 2
   \   000105   28           ADD     A,R0
   \   000106   F5..         MOV     ?V0 + 2,A
   \   000108   E5..         MOV     A,?V0 + 3
   \   00010A   39           ADDC    A,R1
   \   00010B   F5..         MOV     ?V0 + 3,A
    884            }
    885          
    886            if ( rem )
   \                     ??writeBuf_6:
   \   00010D   E5..         MOV     A,?V0 + 0
   \   00010F   606A         JZ      ??writeBuf_9
    887            {
    888              uint8 idx = 0;
   \   000111   75..00       MOV     ?V0 + 6,#0x0
    889              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000114                ; Setup parameters for call to function HalFlashRead
   \   000114   75..04       MOV     ?V0 + 4,#0x4
   \   000117   75..00       MOV     ?V0 + 5,#0x0
   \   00011A   78..         MOV     R0,#?V0 + 4
   \   00011C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   AC82         MOV     R4,DPL
   \   000126   AD83         MOV     R5,DPH
   \   000128   EE           MOV     A,R6
   \   000129   FA           MOV     R2,A
   \   00012A   EF           MOV     A,R7
   \   00012B   FB           MOV     R3,A
   \   00012C   A9..         MOV     R1,?V0 + 1
   \   00012E   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000131   12....       LCALL   ?DEALLOC_XSTACK8
   \   000134   8025         SJMP    ??writeBuf_10
    890              while ( rem-- )
    891              {
    892                tmp[idx++] = *buf++;
   \                     ??writeBuf_11:
   \   000136   85..82       MOV     DPL,?V0 + 2
   \   000139   85..83       MOV     DPH,?V0 + 3
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   C0E0         PUSH    A
   \   00013F   85....       MOV     ?V0 + 4,?V0 + 6
   \   000142   85..82       MOV     DPL,?XSP + 0
   \   000145   85..83       MOV     DPH,?XSP + 1
   \   000148   E582         MOV     A,DPL
   \   00014A   25..         ADD     A,?V0 + 4
   \   00014C   F582         MOV     DPL,A
   \   00014E   E583         MOV     A,DPH
   \   000150   3400         ADDC    A,#0x0
   \   000152   F583         MOV     DPH,A
   \   000154   D0E0         POP     A
   \   000156   12....       LCALL   ?Subroutine6 & 0xFFFF
    893              }
   \                     ??CrossCallReturnLabel_1:
   \   000159   05..         INC     ?V0 + 6
   \                     ??writeBuf_10:
   \   00015B   85....       MOV     ?V0 + 4,?V0 + 0
   \   00015E   74FF         MOV     A,#-0x1
   \   000160   25..         ADD     A,?V0 + 4
   \   000162   F5..         MOV     ?V0 + 0,A
   \   000164   E5..         MOV     A,?V0 + 4
   \   000166   70CE         JNZ     ??writeBuf_11
    894              writeWord( dstPg, dstOff, tmp );
   \   000168                ; Setup parameters for call to function writeWord
   \   000168   85..82       MOV     DPL,?XSP + 0
   \   00016B   85..83       MOV     DPH,?XSP + 1
   \   00016E   AC82         MOV     R4,DPL
   \   000170   AD83         MOV     R5,DPH
   \   000172   EE           MOV     A,R6
   \   000173   FA           MOV     R2,A
   \   000174   EF           MOV     A,R7
   \   000175   FB           MOV     R3,A
   \   000176   A9..         MOV     R1,?V0 + 1
   \   000178   12....       LCALL   ??writeWord?relay
    895            }
    896          }
   \                     ??writeBuf_9:
   \   00017B                REQUIRE ?Subroutine2
   \   00017B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   A3           INC     DPTR
   \   000008   8582..       MOV     ?V0 + 2,DPL
   \   00000B   8583..       MOV     ?V0 + 3,DPH
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
    897          
    898          /*********************************************************************
    899           * @fn      xferBuf
    900           *
    901           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
    902           *
    903           * @return  none
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 8
   \   000004   FC           MOV     R4,A
   \   000005   E583         MOV     A,DPH
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A                REQUIRE ??Subroutine33_0
   \   00000A                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   AA..         MOV     R2,?V0 + 4
   \   000002   AB..         MOV     R3,?V0 + 5
   \   000004   A9..         MOV     R1,?V0 + 6
   \   000006                REQUIRE ??Subroutine34_0
   \   000006                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
    906          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 6,R1
   \   00000C   8A..         MOV     ?V0 + 4,R2
   \   00000E   8B..         MOV     ?V0 + 5,R3
   \   000010   8C..         MOV     ?V0 + 3,R4
   \   000012   7416         MOV     A,#0x16
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001A   7418         MOV     A,#0x18
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FF           MOV     R7,A
    907            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000024   E5..         MOV     A,?V0 + 0
   \   000026   5403         ANL     A,#0x3
   \   000028   F5..         MOV     ?V0 + 2,A
    908            uint8 tmp[OSAL_NV_WORD_SIZE];
    909          
    910            if ( rem )
   \   00002A   6064         JZ      ??CrossCallReturnLabel_32
    911            {
    912              dstOff -= rem;
   \   00002C   F5..         MOV     ?V0 + 8,A
   \   00002E   C3           CLR     C
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   95..         SUBB    A,?V0 + 8
   \   000033   F5..         MOV     ?V0 + 0,A
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   9400         SUBB    A,#0x0
   \   000039   F5..         MOV     ?V0 + 1,A
    913              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003B                ; Setup parameters for call to function HalFlashRead
   \   00003B   75..04       MOV     ?V0 + 8,#0x4
   \   00003E   75..00       MOV     ?V0 + 9,#0x0
   \   000041   78..         MOV     R0,#?V0 + 8
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AC82         MOV     R4,DPL
   \   00004D   AD83         MOV     R5,DPH
   \   00004F   AA..         MOV     R2,?V0 + 0
   \   000051   AB..         MOV     R3,?V0 + 1
   \   000053   A9..         MOV     R1,?V0 + 3
   \   000055   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   8023         SJMP    ??xferBuf_0
    914          
    915              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    916              {
    917                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \                     ??xferBuf_1:
   \   00005D                ; Setup parameters for call to function HalFlashRead
   \   00005D   75..01       MOV     ?V0 + 8,#0x1
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   85....       MOV     ?V0 + 8,?V0 + 2
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    918                srcOff++;
   \   000073   12....       LCALL   ?Subroutine25 & 0xFFFF
    919                rem++;
   \                     ??CrossCallReturnLabel_51:
   \   000076   05..         INC     ?V0 + 2
    920                len--;
   \   000078   EE           MOV     A,R6
   \   000079   24FF         ADD     A,#-0x1
   \   00007B   1E           DEC     R6
   \   00007C   EF           MOV     A,R7
   \   00007D   34FF         ADDC    A,#-0x1
   \   00007F   FF           MOV     R7,A
    921              }
   \                     ??xferBuf_0:
   \   000080   E5..         MOV     A,?V0 + 2
   \   000082   C3           CLR     C
   \   000083   9404         SUBB    A,#0x4
   \   000085   5006         JNC     ??xferBuf_2
   \   000087   EE           MOV     A,R6
   \   000088   7001         JNZ     ??xferBuf_3
   \   00008A   EF           MOV     A,R7
   \                     ??xferBuf_3:
   \   00008B   70D0         JNZ     ??xferBuf_1
    922          
    923              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_2:
   \   00008D                ; Setup parameters for call to function writeWord
   \   00008D   12....       LCALL   ?Subroutine17 & 0xFFFF
    924              dstOff += OSAL_NV_WORD_SIZE;
    925            }
    926          
    927            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_32:
   \   000090   EE           MOV     A,R6
   \   000091   5403         ANL     A,#0x3
   \   000093   F5..         MOV     ?V0 + 2,A
    928            len /= OSAL_NV_WORD_SIZE;
   \   000095   8E..         MOV     ?V0 + 8,R6
   \   000097   8F..         MOV     ?V0 + 9,R7
   \   000099   7402         MOV     A,#0x2
   \   00009B   78..         MOV     R0,#?V0 + 8
   \   00009D   12....       LCALL   ?US_SHR
   \   0000A0   AE..         MOV     R6,?V0 + 8
   \   0000A2   AF..         MOV     R7,?V0 + 9
   \   0000A4   8029         SJMP    ??CrossCallReturnLabel_33
    929          
    930            while ( len-- )
    931            {
    932              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_4:
   \   0000A6                ; Setup parameters for call to function HalFlashRead
   \   0000A6   75..04       MOV     ?V0 + 8,#0x4
   \   0000A9   75..00       MOV     ?V0 + 9,#0x0
   \   0000AC   78..         MOV     R0,#?V0 + 8
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   AC82         MOV     R4,DPL
   \   0000B8   AD83         MOV     R5,DPH
   \   0000BA   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
    933              srcOff += OSAL_NV_WORD_SIZE;
   \   0000C0   E5..         MOV     A,?V0 + 4
   \   0000C2   2404         ADD     A,#0x4
   \   0000C4   F5..         MOV     ?V0 + 4,A
   \   0000C6   E5..         MOV     A,?V0 + 5
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F5..         MOV     ?V0 + 5,A
    934              writeWord( dstPg, dstOff, tmp );
   \   0000CC                ; Setup parameters for call to function writeWord
   \   0000CC   12....       LCALL   ?Subroutine17 & 0xFFFF
    935              dstOff += OSAL_NV_WORD_SIZE;
    936            }
   \                     ??CrossCallReturnLabel_33:
   \   0000CF   EE           MOV     A,R6
   \   0000D0   F8           MOV     R0,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   F9           MOV     R1,A
   \   0000D3   74FF         MOV     A,#-0x1
   \   0000D5   28           ADD     A,R0
   \   0000D6   1E           DEC     R6
   \   0000D7   74FF         MOV     A,#-0x1
   \   0000D9   39           ADDC    A,R1
   \   0000DA   FF           MOV     R7,A
   \   0000DB   E8           MOV     A,R0
   \   0000DC   7001         JNZ     ??xferBuf_5
   \   0000DE   E9           MOV     A,R1
   \                     ??xferBuf_5:
   \   0000DF   70C5         JNZ     ??xferBuf_4
    937          
    938            if ( rem )
   \   0000E1   E5..         MOV     A,?V0 + 2
   \   0000E3   6059         JZ      ??xferBuf_6
    939            {
    940              uint8 idx = 0;
   \   0000E5   7E00         MOV     R6,#0x0
    941              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000E7                ; Setup parameters for call to function HalFlashRead
   \   0000E7   75..04       MOV     ?V0 + 8,#0x4
   \   0000EA   8E..         MOV     ?V0 + 9,R6
   \   0000EC   78..         MOV     R0,#?V0 + 8
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   AC82         MOV     R4,DPL
   \   0000F8   AD83         MOV     R5,DPH
   \   0000FA   AA..         MOV     R2,?V0 + 0
   \   0000FC   AB..         MOV     R3,?V0 + 1
   \   0000FE   A9..         MOV     R1,?V0 + 3
   \   000100   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
   \   000106   8019         SJMP    ??xferBuf_7
    942              while ( rem-- )
    943              {
    944                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_8:
   \   000108                ; Setup parameters for call to function HalFlashRead
   \   000108   75..01       MOV     ?V0 + 8,#0x1
   \   00010B   78..         MOV     R0,#?V0 + 8
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   8E..         MOV     ?V0 + 8,R6
   \   000112   7402         MOV     A,#0x2
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
    945                srcOff++;
   \   00011D   12....       LCALL   ?Subroutine25 & 0xFFFF
    946                idx++;
   \                     ??CrossCallReturnLabel_52:
   \   000120   0E           INC     R6
    947              }
   \                     ??xferBuf_7:
   \   000121   AF..         MOV     R7,?V0 + 2
   \   000123   74FF         MOV     A,#-0x1
   \   000125   2F           ADD     A,R7
   \   000126   F5..         MOV     ?V0 + 2,A
   \   000128   EF           MOV     A,R7
   \   000129   70DD         JNZ     ??xferBuf_8
    948              writeWord( dstPg, dstOff, tmp );
   \   00012B                ; Setup parameters for call to function writeWord
   \   00012B   85..82       MOV     DPL,?XSP + 0
   \   00012E   85..83       MOV     DPH,?XSP + 1
   \   000131   AC82         MOV     R4,DPL
   \   000133   AD83         MOV     R5,DPH
   \   000135   AA..         MOV     R2,?V0 + 0
   \   000137   AB..         MOV     R3,?V0 + 1
   \   000139   A9..         MOV     R1,?V0 + 3
   \   00013B   12....       LCALL   ??writeWord?relay
    949            }
    950          }
   \                     ??xferBuf_6:
   \   00013E   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 4,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 5,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AC82         MOV     R4,DPL
   \   000008   AD83         MOV     R5,DPH
   \   00000A   AA..         MOV     R2,?V0 + 0
   \   00000C   AB..         MOV     R3,?V0 + 1
   \   00000E   A9..         MOV     R1,?V0 + 3
   \   000010   12....       LCALL   ??writeWord?relay
   \   000013   E5..         MOV     A,?V0 + 0
   \   000015   2404         ADD     A,#0x4
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   E5..         MOV     A,?V0 + 1
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   22           RET
    951          
    952          /*********************************************************************
    953           * @fn      writeItem
    954           *
    955           * @brief   Writes an item header/data combo to the specified NV page.
    956           *
    957           * @param   pg - Valid NV Flash page.
    958           * @param   id - Valid NV item Id.
    959           * @param   len  - Byte count of the data to write.
    960           * @param   buf  - The data to write. If NULL, no data/checksum write.
    961           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
    962           *
    963           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
    966          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   8A..         MOV     ?V0 + 8,R2
   \   00000E   8B..         MOV     ?V0 + 9,R3
   \   000010   8C..         MOV     ?V0 + 2,R4
   \   000012   8D..         MOV     ?V0 + 3,R5
   \   000014   7420         MOV     A,#0x20
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 6,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 7,A
   \   000020   7422         MOV     A,#0x22
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
    967            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000028   E9           MOV     A,R1
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   F8           MOV     R0,A
   \   00002C   E4           CLR     A
   \   00002D   33           RLC     A
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000032   F5..         MOV     ?V0 + 12,A
   \   000034   E9           MOV     A,R1
   \   000035   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   000037   F5..         MOV     ?V0 + 13,A
   \   000039   85..82       MOV     DPL,?V0 + 12
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FE           MOV     R6,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FF           MOV     R7,A
    968            uint8 rtrn = FALSE;
   \   000043   75..00       MOV     ?V0 + 1,#0x0
    969            osalNvHdr_t hdr;
    970          
    971            if ( pg == pgRes )
   \   000046   90....       MOV     DPTR,#pgRes
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   65..         XRL     A,?V0 + 0
   \   00004C   7007         JNZ     ??writeItem_0
    972            {
    973              /* Mark reserve page as being active, in process of receiving items.
    974               * Invoking function must effect a page compaction.
    975               */
    976              setPageUse( pg, FALSE );
   \   00004E                ; Setup parameters for call to function setPageUse
   \   00004E   7A00         MOV     R2,#0x0
   \   000050   A9..         MOV     R1,?V0 + 0
   \   000052   12....       LCALL   ??setPageUse?relay
    977            }
    978          
    979            hdr.id = id;
   \                     ??writeItem_0:
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E5..         MOV     A,?V0 + 8
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E5..         MOV     A,?V0 + 9
   \   000060   F0           MOVX    @DPTR,A
    980            hdr.len = len;
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E5..         MOV     A,?V0 + 2
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E5..         MOV     A,?V0 + 3
   \   00006C   F0           MOVX    @DPTR,A
    981          
    982            writeWord( pg, offset, (uint8 *)&hdr );
   \   00006D                ; Setup parameters for call to function writeWord
   \   00006D   7402         MOV     A,#0x2
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   AC82         MOV     R4,DPL
   \   000074   AD83         MOV     R5,DPH
   \   000076   EE           MOV     A,R6
   \   000077   FA           MOV     R2,A
   \   000078   EF           MOV     A,R7
   \   000079   FB           MOV     R3,A
   \   00007A   A9..         MOV     R1,?V0 + 0
   \   00007C   12....       LCALL   ??writeWord?relay
    983            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00007F                ; Setup parameters for call to function HalFlashRead
   \   00007F   75..08       MOV     ?V0 + 10,#0x8
   \   000082   75..00       MOV     ?V0 + 11,#0x0
   \   000085   78..         MOV     R0,#?V0 + 10
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   A9..         MOV     R1,?V0 + 0
   \   000099   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    984          
    985            if ( (hdr.id == id) && (hdr.len == len) )
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   65..         XRL     A,?V0 + 8
   \   0000A7   7004         JNZ     ??writeItem_1
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   65..         XRL     A,?V0 + 9
   \                     ??writeItem_1:
   \   0000AD   6003         JZ      $+5
   \   0000AF   02....       LJMP    ??writeItem_2 & 0xFFFF
   \   0000B2   7404         MOV     A,#0x4
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   65..         XRL     A,?V0 + 2
   \   0000BA   7004         JNZ     ??writeItem_3
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   65..         XRL     A,?V0 + 3
   \                     ??writeItem_3:
   \   0000C0   6003         JZ      $+5
   \   0000C2   02....       LJMP    ??writeItem_2 & 0xFFFF
    986            {
    987              if ( flag )
   \   0000C5   E5..         MOV     A,?V0 + 4
   \   0000C7   7003         JNZ     $+5
   \   0000C9   02....       LJMP    ??writeItem_4 & 0xFFFF
    988              {
    989                uint16 chk = calcChkB( len, buf );
   \   0000CC   85..82       MOV     DPL,?V0 + 6
   \   0000CF   85..83       MOV     DPH,?V0 + 7
   \   0000D2   A8..         MOV     R0,?V0 + 2
   \   0000D4   A9..         MOV     R1,?V0 + 3
   \   0000D6   E8           MOV     A,R0
   \   0000D7   5403         ANL     A,#0x3
   \   0000D9   F5..         MOV     ?V0 + 4,A
   \   0000DB   E582         MOV     A,DPL
   \   0000DD   7002         JNZ     ??writeItem_5
   \   0000DF   E583         MOV     A,DPH
   \                     ??writeItem_5:
   \   0000E1   7015         JNZ     ??writeItem_6
   \   0000E3   E8           MOV     A,R0
   \   0000E4   75F0FF       MOV     B,#-0x1
   \   0000E7   A4           MUL     AB
   \   0000E8   F8           MOV     R0,A
   \   0000E9   AAF0         MOV     R2,B
   \   0000EB   75F0FF       MOV     B,#-0x1
   \   0000EE   E9           MOV     A,R1
   \   0000EF   A4           MUL     AB
   \   0000F0   2A           ADD     A,R2
   \   0000F1   F9           MOV     R1,A
   \   0000F2   E8           MOV     A,R0
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E9           MOV     A,R1
   \   0000F5   FB           MOV     R3,A
   \   0000F6   8022         SJMP    ??writeItem_7
   \                     ??writeItem_6:
   \   0000F8   7A00         MOV     R2,#0x0
   \   0000FA   7B00         MOV     R3,#0x0
   \   0000FC   800A         SJMP    ??writeItem_8
   \                     ??writeItem_9:
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FC           MOV     R4,A
   \   000100   EA           MOV     A,R2
   \   000101   2C           ADD     A,R4
   \   000102   FA           MOV     R2,A
   \   000103   EB           MOV     A,R3
   \   000104   3400         ADDC    A,#0x0
   \   000106   FB           MOV     R3,A
   \   000107   A3           INC     DPTR
   \                     ??writeItem_8:
   \   000108   E8           MOV     A,R0
   \   000109   FC           MOV     R4,A
   \   00010A   E9           MOV     A,R1
   \   00010B   FD           MOV     R5,A
   \   00010C   74FF         MOV     A,#-0x1
   \   00010E   2C           ADD     A,R4
   \   00010F   18           DEC     R0
   \   000110   74FF         MOV     A,#-0x1
   \   000112   3D           ADDC    A,R5
   \   000113   F9           MOV     R1,A
   \   000114   EC           MOV     A,R4
   \   000115   7001         JNZ     ??writeItem_10
   \   000117   ED           MOV     A,R5
   \                     ??writeItem_10:
   \   000118   70E4         JNZ     ??writeItem_9
   \                     ??writeItem_7:
   \   00011A   E5..         MOV     A,?V0 + 4
   \   00011C   601F         JZ      ??writeItem_11
   \   00011E   7404         MOV     A,#0x4
   \   000120   C3           CLR     C
   \   000121   95..         SUBB    A,?V0 + 4
   \   000123   F8           MOV     R0,A
   \   000124   E4           CLR     A
   \   000125   9400         SUBB    A,#0x0
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   75F0FF       MOV     B,#-0x1
   \   00012C   A4           MUL     AB
   \   00012D   F8           MOV     R0,A
   \   00012E   ACF0         MOV     R4,B
   \   000130   75F0FF       MOV     B,#-0x1
   \   000133   E9           MOV     A,R1
   \   000134   A4           MUL     AB
   \   000135   2C           ADD     A,R4
   \   000136   F9           MOV     R1,A
   \   000137   EA           MOV     A,R2
   \   000138   28           ADD     A,R0
   \   000139   FA           MOV     R2,A
   \   00013A   EB           MOV     A,R3
   \   00013B   39           ADDC    A,R1
   \   00013C   FB           MOV     R3,A
   \                     ??writeItem_11:
   \   00013D   85..82       MOV     DPL,?XSP + 0
   \   000140   85..83       MOV     DPH,?XSP + 1
   \   000143   EA           MOV     A,R2
   \   000144   F0           MOVX    @DPTR,A
   \   000145   A3           INC     DPTR
   \   000146   EB           MOV     A,R3
   \   000147   F0           MOVX    @DPTR,A
    990          
    991                offset += OSAL_NV_HDR_SIZE;
   \   000148   EE           MOV     A,R6
   \   000149   2408         ADD     A,#0x8
   \   00014B   FE           MOV     R6,A
   \   00014C   EF           MOV     A,R7
   \   00014D   3400         ADDC    A,#0x0
   \   00014F   FF           MOV     R7,A
    992                if ( buf != NULL )
   \   000150   E5..         MOV     A,?V0 + 6
   \   000152   7002         JNZ     ??writeItem_12
   \   000154   E5..         MOV     A,?V0 + 7
   \                     ??writeItem_12:
   \   000156   6017         JZ      ??writeItem_13
    993                {
    994                  writeBuf( pg, offset, len, buf );
   \   000158                ; Setup parameters for call to function writeBuf
   \   000158   78..         MOV     R0,#?V0 + 6
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015D   AC..         MOV     R4,?V0 + 2
   \   00015F   AD..         MOV     R5,?V0 + 3
   \   000161   EE           MOV     A,R6
   \   000162   FA           MOV     R2,A
   \   000163   EF           MOV     A,R7
   \   000164   FB           MOV     R3,A
   \   000165   A9..         MOV     R1,?V0 + 0
   \   000167   12....       LCALL   ??writeBuf?relay
   \   00016A   7402         MOV     A,#0x2
   \   00016C   12....       LCALL   ?DEALLOC_XSTACK8
    995                }
    996          
    997                if ( chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_13:
   \   00016F                ; Setup parameters for call to function calcChkF
   \   00016F   AC..         MOV     R4,?V0 + 2
   \   000171   AD..         MOV     R5,?V0 + 3
   \   000173   EE           MOV     A,R6
   \   000174   FA           MOV     R2,A
   \   000175   EF           MOV     A,R7
   \   000176   FB           MOV     R3,A
   \   000177   A9..         MOV     R1,?V0 + 0
   \   000179   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00017C   85..82       MOV     DPL,?XSP + 0
   \   00017F   85..83       MOV     DPH,?XSP + 1
   \   000182   E0           MOVX    A,@DPTR
   \   000183   68           XRL     A,R0
   \   000184   7003         JNZ     ??writeItem_14
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   69           XRL     A,R1
   \                     ??writeItem_14:
   \   000189   7049         JNZ     ??writeItem_2
    998                {
    999                  writeWordH(pg, (offset-OSAL_NV_WORD_SIZE), (uint8 *)&chk);
   \   00018B                ; Setup parameters for call to function writeWordH
   \   00018B   85..82       MOV     DPL,?XSP + 0
   \   00018E   85..83       MOV     DPH,?XSP + 1
   \   000191   AC82         MOV     R4,DPL
   \   000193   AD83         MOV     R5,DPH
   \   000195   74FC         MOV     A,#-0x4
   \   000197   2E           ADD     A,R6
   \   000198   FA           MOV     R2,A
   \   000199   74FF         MOV     A,#-0x1
   \   00019B   12....       LCALL   ?Subroutine18 & 0xFFFF
   1000                  HalFlashRead(pg, (offset-OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_34:
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   AC82         MOV     R4,DPL
   \   0001A8   AD83         MOV     R5,DPH
   \   0001AA   74F8         MOV     A,#-0x8
   \   0001AC   2E           ADD     A,R6
   \   0001AD   FA           MOV     R2,A
   \   0001AE   74FF         MOV     A,#-0x1
   \   0001B0   3F           ADDC    A,R7
   \   0001B1   FB           MOV     R3,A
   \   0001B2   A9..         MOV     R1,?V0 + 0
   \   0001B4   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001B7   12....       LCALL   ?DEALLOC_XSTACK8
   1001          
   1002                  if ( chk == hdr.chk )
   \   0001BA   85..82       MOV     DPL,?XSP + 0
   \   0001BD   85..83       MOV     DPH,?XSP + 1
   \   0001C0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0001C3   7406         MOV     A,#0x6
   \   0001C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   68           XRL     A,R0
   \   0001CA   7003         JNZ     ??writeItem_15
   \   0001CC   A3           INC     DPTR
   \   0001CD   E0           MOVX    A,@DPTR
   \   0001CE   69           XRL     A,R1
   \                     ??writeItem_15:
   \   0001CF   7003         JNZ     ??writeItem_2
   1003                  {
   1004                    rtrn = pg;
   \                     ??writeItem_4:
   \   0001D1   85....       MOV     ?V0 + 1,?V0 + 0
   1005                  }
   1006                }
   1007              }
   1008              else
   1009              {
   1010                rtrn = pg;
   1011              }
   1012            }
   1013          
   1014            len = OSAL_NV_ITEM_SIZE( hdr.len );
   1015            pgOff[pg-OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_2:
   \   0001D4   7404         MOV     A,#0x4
   \   0001D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D9   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001DC   F8           MOV     R0,A
   \   0001DD   E4           CLR     A
   \   0001DE   39           ADDC    A,R1
   \   0001DF   F9           MOV     R1,A
   \   0001E0   85..82       MOV     DPL,?V0 + 12
   \   0001E3   85..83       MOV     DPH,?V0 + 13
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   28           ADD     A,R0
   \   0001E8   F0           MOVX    @DPTR,A
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   39           ADDC    A,R1
   \   0001EC   F0           MOVX    @DPTR,A
   1016          
   1017            return rtrn;
   \   0001ED   A9..         MOV     R1,?V0 + 1
   \   0001EF   740A         MOV     A,#0xa
   \   0001F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F4   7F0E         MOV     R7,#0xe
   \   0001F6   02....       LJMP    ?BANKED_LEAVE_XDATA
   1018          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   3F           ADDC    A,R7
   \   000001   FB           MOV     R3,A
   \   000002   A9..         MOV     R1,?V0 + 0
   \   000004   12....       LCALL   ??writeWordH?relay
   \   000007                ; Setup parameters for call to function HalFlashRead
   \   000007                ; Setup parameters for call to function HalFlashRead
   \   000007   75..08       MOV     ?V0 + 2,#0x8
   \   00000A   75..00       MOV     ?V0 + 3,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 2
   \   00000F   22           RET
   1019          
   1020          /*********************************************************************
   1021           * @fn      osal_nv_init
   1022           *
   1023           * @brief   Initialize NV service.
   1024           *
   1025           * @param   p - Not used.
   1026           *
   1027           * @return  none
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1030          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1031            (void)p;  // Suppress Lint warning.
   1032            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   ??initNV?relay
   1033          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   1034          
   1035          /*********************************************************************
   1036           * @fn      osal_nv_item_init
   1037           *
   1038           * @brief   If the NV item does not already exist, it is created and
   1039           *          initialized with the data passed to the function, if any.
   1040           *          This function must be called before calling osal_nv_read() or
   1041           *          osal_nv_write().
   1042           *
   1043           * @param   id  - Valid NV item Id.
   1044           * @param   len - Item length.
   1045           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1046           *
   1047           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1048           *          ZSUCCESS       - Id already existed, no action taken.
   1049           *          NV_OPER_FAILED - Failure to find or create Id.
   1050           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1051          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1052          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine14 & 0xFFFF
   1053            /* Global fail flag for fail due to low bus voltage has less impact on code
   1054             * size than passing back a return value all the way from the lowest level.
   1055             */
   1056            failF = FALSE;
   \                     ??CrossCallReturnLabel_24:
   \   000015   E4           CLR     A
   \   000016   90....       MOV     DPTR,#failF
   \   000019   F0           MOVX    @DPTR,A
   1057          
   1058            if ( (findItem( id ) != OSAL_NV_ITEM_NULL) )
   \   00001A                ; Setup parameters for call to function findItem
   \   00001A   12....       LCALL   ??findItem?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   7001         JNZ     ??osal_nv_item_init_0
   \   000020   EB           MOV     A,R3
   \                     ??osal_nv_item_init_0:
   \   000021   6004         JZ      ??osal_nv_item_init_1
   1059            {
   1060              return ZSUCCESS;
   \   000023   7900         MOV     R1,#0x0
   \   000025   802B         SJMP    ??osal_nv_item_init_2
   1061            }
   1062            else if ( initItem( TRUE, id, len, buf ) )
   \                     ??osal_nv_item_init_1:
   \   000027                ; Setup parameters for call to function initItem
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   AC..         MOV     R4,?V0 + 0
   \   00002E   AD..         MOV     R5,?V0 + 1
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   ??initItem?relay
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   E9           MOV     A,R1
   \   00003F   600F         JZ      ??osal_nv_item_init_3
   1063            {
   1064              if ( failF )
   \   000041   90....       MOV     DPTR,#failF
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6005         JZ      ??osal_nv_item_init_4
   1065              {
   1066                (void)initNV();  // See comment at the declaration of failF.
   \   000047                ; Setup parameters for call to function initNV
   \   000047   12....       LCALL   ??initNV?relay
   1067                return NV_OPER_FAILED;
   \   00004A   8004         SJMP    ??osal_nv_item_init_3
   1068              }
   1069              else
   1070              {
   1071                return NV_ITEM_UNINIT;
   \                     ??osal_nv_item_init_4:
   \   00004C   7909         MOV     R1,#0x9
   \   00004E   8002         SJMP    ??osal_nv_item_init_2
   1072              }
   1073            }
   1074            else
   1075            {
   1076              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_3:
   \   000050   790A         MOV     R1,#0xa
   1077            }
   \                     ??osal_nv_item_init_2:
   \   000052   80..         SJMP    ??Subroutine35_0
   1078          }
   1079          
   1080          /*********************************************************************
   1081           * @fn      osal_nv_item_len
   1082           *
   1083           * @brief   Get the data length of the item stored in NV memory.
   1084           *
   1085           * @param   id  - Valid NV item Id.
   1086           *
   1087           * @return  Item length, if found; zero otherwise.
   1088           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1089          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1090          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1091            uint16 offset = findItem( id );
   \   00000A                ; Setup parameters for call to function findItem
   \   00000A   12....       LCALL   ??findItem?relay
   1092          
   1093            if ( offset == OSAL_NV_ITEM_NULL )
   \   00000D   EA           MOV     A,R2
   \   00000E   7001         JNZ     ??osal_nv_item_len_0
   \   000010   EB           MOV     A,R3
   \                     ??osal_nv_item_len_0:
   \   000011   7006         JNZ     ??osal_nv_item_len_1
   1094            {
   1095              return 0;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8031         SJMP    ??osal_nv_item_len_2
   1096            }
   1097            else
   1098            {
   1099              osalNvHdr_t hdr;
   1100              HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_1:
   \   000019                ; Setup parameters for call to function HalFlashRead
   \   000019   75..08       MOV     ?V0 + 0,#0x8
   \   00001C   75..00       MOV     ?V0 + 1,#0x0
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   AC82         MOV     R4,DPL
   \   00002B   AD83         MOV     R5,DPH
   \   00002D   74F8         MOV     A,#-0x8
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   74FF         MOV     A,#-0x1
   \   000033   3B           ADDC    A,R3
   \   000034   FB           MOV     R3,A
   \   000035   90....       MOV     DPTR,#findPg
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   1101              return hdr.len;
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FA           MOV     R2,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FB           MOV     R3,A
   \                     ??osal_nv_item_len_2:
   \   00004A   7408         MOV     A,#0x8
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7F02         MOV     R7,#0x2
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
   1102            }
   1103          }
   1104          
   1105          /*********************************************************************
   1106           * @fn      osal_nv_write
   1107           *
   1108           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1109           *          an element of an item by indexing into the item with an offset.
   1110           *
   1111           * @param   id  - Valid NV item Id.
   1112           * @param   ndx - Index offset into item
   1113           * @param   len - Length of data to write.
   1114           * @param  *buf - Data to write.
   1115           *
   1116           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1117           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1118           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1119          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1120          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 10,R2
   \   00000C   8B..         MOV     ?V0 + 11,R3
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   7423         MOV     A,#0x23
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 8,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 9,A
   1121            uint8 rtrn = ZSUCCESS;
   \   00001E   75..00       MOV     ?V0 + 1,#0x0
   1122          
   1123            /* Global fail flag for fail due to low bus voltage has less impact on code
   1124             * size than passing back a return value all the way from the lowest level.
   1125             */
   1126            failF = FALSE;
   \   000021   E4           CLR     A
   \   000022   90....       MOV     DPTR,#failF
   \   000025   F0           MOVX    @DPTR,A
   1127          
   1128            if ( len != 0 )
   \   000026   E5..         MOV     A,?V0 + 8
   \   000028   7002         JNZ     ??osal_nv_write_0
   \   00002A   E5..         MOV     A,?V0 + 9
   \                     ??osal_nv_write_0:
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1129            {
   1130              osalNvHdr_t hdr;
   1131              uint16 origOff, srcOff;
   1132              uint16 cnt;
   1133              uint8 *ptr;
   1134          
   1135              origOff = srcOff = findItem( id );
   \   000031                ; Setup parameters for call to function findItem
   \   000031   12....       LCALL   ??findItem?relay
   \   000034   8A..         MOV     ?V0 + 4,R2
   \   000036   8B..         MOV     ?V0 + 5,R3
   \   000038   A8..         MOV     R0,?V0 + 4
   \   00003A   A9..         MOV     R1,?V0 + 5
   \   00003C   E8           MOV     A,R0
   \   00003D   FE           MOV     R6,A
   \   00003E   E9           MOV     A,R1
   \   00003F   FF           MOV     R7,A
   \   000040   88..         MOV     ?V0 + 14,R0
   \   000042   89..         MOV     ?V0 + 15,R1
   1136              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000044   EE           MOV     A,R6
   \   000045   7001         JNZ     ??osal_nv_write_2
   \   000047   EF           MOV     A,R7
   \                     ??osal_nv_write_2:
   \   000048   7005         JNZ     ??osal_nv_write_3
   1137              {
   1138                return NV_ITEM_UNINIT;
   \   00004A   7909         MOV     R1,#0x9
   \   00004C   02....       LJMP    ??osal_nv_write_4 & 0xFFFF
   1139              }
   1140          
   1141              HalFlashRead(findPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_3:
   \   00004F                ; Setup parameters for call to function HalFlashRead
   \   00004F   75..08       MOV     ?V0 + 4,#0x8
   \   000052   75..00       MOV     ?V0 + 5,#0x0
   \   000055   78..         MOV     R0,#?V0 + 4
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7405         MOV     A,#0x5
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   AC82         MOV     R4,DPL
   \   000061   AD83         MOV     R5,DPH
   \   000063   74F8         MOV     A,#-0x8
   \   000065   2E           ADD     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   74FF         MOV     A,#-0x1
   \   000069   3F           ADDC    A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   90....       MOV     DPTR,#findPg
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   1142              if ( hdr.len < (ndx + len) )
   \   000076   7405         MOV     A,#0x5
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E5..         MOV     A,?V0 + 8
   \   00007D   25..         ADD     A,?V0 + 2
   \   00007F   F8           MOV     R0,A
   \   000080   E5..         MOV     A,?V0 + 9
   \   000082   35..         ADDC    A,?V0 + 3
   \   000084   F9           MOV     R1,A
   \   000085   C3           CLR     C
   \   000086   E0           MOVX    A,@DPTR
   \   000087   98           SUBB    A,R0
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   99           SUBB    A,R1
   \   00008B   5005         JNC     ??osal_nv_write_5
   1143              {
   1144                return NV_OPER_FAILED;
   \   00008D   790A         MOV     R1,#0xa
   \   00008F   02....       LJMP    ??osal_nv_write_4 & 0xFFFF
   1145              }
   1146          
   1147              srcOff += ndx;
   \                     ??osal_nv_write_5:
   \   000092   12....       LCALL   ?Subroutine20 & 0xFFFF
   1148              ptr = buf;
   \                     ??CrossCallReturnLabel_39:
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F5..         MOV     ?V0 + 4,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   F5..         MOV     ?V0 + 5,A
   1149              cnt = len;
   \   00009F   85....       MOV     ?V0 + 6,?V0 + 8
   \   0000A2   85....       MOV     ?V0 + 7,?V0 + 9
   \   0000A5   8017         SJMP    ??osal_nv_write_6
   1150              while ( cnt )
   1151              {
   1152                uint8 tmp;
   1153                HalFlashRead(findPg, srcOff++, &tmp, 1);
   1154                if ( tmp != *ptr++ )
   1155                {
   1156                  break;
   1157                }
   1158                cnt--;
   \                     ??osal_nv_write_7:
   \   0000A7   E5..         MOV     A,?V0 + 6
   \   0000A9   24FF         ADD     A,#-0x1
   \   0000AB   F5..         MOV     ?V0 + 6,A
   \   0000AD   E5..         MOV     A,?V0 + 7
   \   0000AF   34FF         ADDC    A,#-0x1
   \   0000B1   F5..         MOV     ?V0 + 7,A
   \   0000B3   E5..         MOV     A,?V0 + 6
   \   0000B5   7002         JNZ     ??osal_nv_write_8
   \   0000B7   E5..         MOV     A,?V0 + 7
   \                     ??osal_nv_write_8:
   \   0000B9   7003         JNZ     $+5
   \   0000BB   02....       LJMP    ??osal_nv_write_9 & 0xFFFF
   \                     ??osal_nv_write_6:
   \   0000BE                ; Setup parameters for call to function HalFlashRead
   \   0000BE   75..01       MOV     ?V0 + 12,#0x1
   \   0000C1   75..00       MOV     ?V0 + 13,#0x0
   \   0000C4   78..         MOV     R0,#?V0 + 12
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   AC82         MOV     R4,DPL
   \   0000D0   AD83         MOV     R5,DPH
   \   0000D2   EE           MOV     A,R6
   \   0000D3   FA           MOV     R2,A
   \   0000D4   EF           MOV     A,R7
   \   0000D5   FB           MOV     R3,A
   \   0000D6   90....       MOV     DPTR,#findPg
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   EE           MOV     A,R6
   \   0000E2   2401         ADD     A,#0x1
   \   0000E4   0E           INC     R6
   \   0000E5   EF           MOV     A,R7
   \   0000E6   3400         ADDC    A,#0x0
   \   0000E8   FF           MOV     R7,A
   \   0000E9   A8..         MOV     R0,?V0 + 4
   \   0000EB   A9..         MOV     R1,?V0 + 5
   \   0000ED   8882         MOV     DPL,R0
   \   0000EF   8983         MOV     DPH,R1
   \   0000F1   A3           INC     DPTR
   \   0000F2   8582..       MOV     ?V0 + 4,DPL
   \   0000F5   8583..       MOV     ?V0 + 5,DPH
   \   0000F8   85..82       MOV     DPL,?XSP + 0
   \   0000FB   85..83       MOV     DPH,?XSP + 1
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FA           MOV     R2,A
   \   000100   8882         MOV     DPL,R0
   \   000102   8983         MOV     DPH,R1
   \   000104   E0           MOVX    A,@DPTR
   \   000105   6A           XRL     A,R2
   \   000106   609F         JZ      ??osal_nv_write_7
   1159              }
   1160          
   1161              if ( cnt != 0 )  // If the buffer to write is different in one or more bytes.
   1162              {
   1163                uint8 comPg, dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000108                ; Setup parameters for call to function initItem
   \   000108   85..82       MOV     DPL,?XSP + 0
   \   00010B   85..83       MOV     DPH,?XSP + 1
   \   00010E   8582..       MOV     ?V0 + 4,DPL
   \   000111   8583..       MOV     ?V0 + 5,DPH
   \   000114   78..         MOV     R0,#?V0 + 4
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   7407         MOV     A,#0x7
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000121   AA..         MOV     R2,?V0 + 10
   \   000123   AB..         MOV     R3,?V0 + 11
   \   000125   7900         MOV     R1,#0x0
   \   000127   12....       LCALL   ??initItem?relay
   \   00012A   7402         MOV     A,#0x2
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012F   E9           MOV     A,R1
   \   000130   F5..         MOV     ?V0 + 0,A
   1164          
   1165                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000132   7003         JNZ     $+5
   \   000134   02....       LJMP    ??osal_nv_write_10 & 0xFFFF
   1166                {
   1167                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   000137   7405         MOV     A,#0x5
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00013F   7401         MOV     A,#0x1
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   E8           MOV     A,R0
   \   000145   F0           MOVX    @DPTR,A
   \   000146   A3           INC     DPTR
   \   000147   E9           MOV     A,R1
   \   000148   F0           MOVX    @DPTR,A
   1168                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000149   E5..         MOV     A,?V0 + 0
   \   00014B   C3           CLR     C
   \   00014C   33           RLC     A
   \   00014D   F8           MOV     R0,A
   \   00014E   E4           CLR     A
   \   00014F   33           RLC     A
   \   000150   F9           MOV     R1,A
   \   000151   E8           MOV     A,R0
   \   000152   24..         ADD     A,#((pgOff + 14) & 0xff)
   \   000154   F5..         MOV     ?V0 + 6,A
   \   000156   E9           MOV     A,R1
   \   000157   34..         ADDC    A,#(((pgOff - 242) >> 8) & 0xff)
   \   000159   F5..         MOV     ?V0 + 7,A
   \   00015B   85..82       MOV     DPL,?V0 + 6
   \   00015E   F583         MOV     DPH,A
   \   000160   C082         PUSH    DPL
   \   000162   C083         PUSH    DPH
   \   000164   7401         MOV     A,#0x1
   \   000166   12....       LCALL   ?XSTACK_DISP0_8
   \   000169   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00016C   D083         POP     DPH
   \   00016E   D082         POP     DPL
   \   000170   12....       LCALL   ?Subroutine16 & 0xFFFF
   1169                  uint8 srcPg = findPg;
   \                     ??CrossCallReturnLabel_30:
   \   000173   90....       MOV     DPTR,#findPg
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F5..         MOV     ?V0 + 4,A
   1170                  srcOff = origOff;
   1171          
   1172                  setItem( srcPg, srcOff, eNvXfer );
   \   000179                ; Setup parameters for call to function setItem
   \   000179   7C00         MOV     R4,#0x0
   \   00017B   AA..         MOV     R2,?V0 + 14
   \   00017D   AB..         MOV     R3,?V0 + 15
   \   00017F   F9           MOV     R1,A
   \   000180   12....       LCALL   ??setItem?relay
   1173          
   1174                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \   000183                ; Setup parameters for call to function xferBuf
   \   000183   78..         MOV     R0,#?V0 + 2
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000188   8E..         MOV     ?V0 + 10,R6
   \   00018A   8F..         MOV     ?V0 + 11,R7
   \   00018C   78..         MOV     R0,#?V0 + 10
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000191   AC..         MOV     R4,?V0 + 0
   \   000193   AA..         MOV     R2,?V0 + 14
   \   000195   AB..         MOV     R3,?V0 + 15
   \   000197   A9..         MOV     R1,?V0 + 4
   \   000199   12....       LCALL   ??xferBuf?relay
   \   00019C   7404         MOV     A,#0x4
   \   00019E   12....       LCALL   ?DEALLOC_XSTACK8
   1175                  srcOff += ndx;
   1176                  dstOff += ndx;
   \   0001A1   12....       LCALL   ?Subroutine20 & 0xFFFF
   1177          
   1178                  writeBuf( dstPg, dstOff, len, buf );
   \                     ??CrossCallReturnLabel_40:
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001AA   AC..         MOV     R4,?V0 + 8
   \   0001AC   AD..         MOV     R5,?V0 + 9
   \   0001AE   EE           MOV     A,R6
   \   0001AF   FA           MOV     R2,A
   \   0001B0   EF           MOV     A,R7
   \   0001B1   FB           MOV     R3,A
   \   0001B2   A9..         MOV     R1,?V0 + 0
   \   0001B4   12....       LCALL   ??writeBuf?relay
   \   0001B7   7402         MOV     A,#0x2
   \   0001B9   12....       LCALL   ?DEALLOC_XSTACK8
   1179                  srcOff += len;
   1180                  dstOff += len;
   1181          
   1182                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   0001BC                ; Setup parameters for call to function xferBuf
   \   0001BC   7405         MOV     A,#0x5
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   C3           CLR     C
   \   0001C3   95..         SUBB    A,?V0 + 2
   \   0001C5   F8           MOV     R0,A
   \   0001C6   A3           INC     DPTR
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   95..         SUBB    A,?V0 + 3
   \   0001CA   F9           MOV     R1,A
   \   0001CB   E8           MOV     A,R0
   \   0001CC   C3           CLR     C
   \   0001CD   95..         SUBB    A,?V0 + 8
   \   0001CF   F5..         MOV     ?V0 + 10,A
   \   0001D1   E9           MOV     A,R1
   \   0001D2   95..         SUBB    A,?V0 + 9
   \   0001D4   F5..         MOV     ?V0 + 11,A
   \   0001D6   78..         MOV     R0,#?V0 + 10
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DB   E5..         MOV     A,?V0 + 8
   \   0001DD   2E           ADD     A,R6
   \   0001DE   F5..         MOV     ?V0 + 10,A
   \   0001E0   E5..         MOV     A,?V0 + 9
   \   0001E2   3F           ADDC    A,R7
   \   0001E3   F5..         MOV     ?V0 + 11,A
   \   0001E5   78..         MOV     R0,#?V0 + 10
   \   0001E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001EA   AC..         MOV     R4,?V0 + 0
   \   0001EC   E5..         MOV     A,?V0 + 2
   \   0001EE   25..         ADD     A,?V0 + 14
   \   0001F0   F8           MOV     R0,A
   \   0001F1   E5..         MOV     A,?V0 + 3
   \   0001F3   35..         ADDC    A,?V0 + 15
   \   0001F5   F9           MOV     R1,A
   \   0001F6   E5..         MOV     A,?V0 + 8
   \   0001F8   28           ADD     A,R0
   \   0001F9   FA           MOV     R2,A
   \   0001FA   E5..         MOV     A,?V0 + 9
   \   0001FC   39           ADDC    A,R1
   \   0001FD   FB           MOV     R3,A
   \   0001FE   A9..         MOV     R1,?V0 + 4
   \   000200   12....       LCALL   ??xferBuf?relay
   \   000203   7404         MOV     A,#0x4
   \   000205   12....       LCALL   ?DEALLOC_XSTACK8
   1183          
   1184                  // Calculate and write the new checksum.
   1185                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   000208   85..82       MOV     DPL,?V0 + 6
   \   00020B   85..83       MOV     DPH,?V0 + 7
   \   00020E   C082         PUSH    DPL
   \   000210   C083         PUSH    DPH
   \   000212   7401         MOV     A,#0x1
   \   000214   12....       LCALL   ?XSTACK_DISP0_8
   \   000217   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00021A   D083         POP     DPH
   \   00021C   D082         POP     DPL
   \   00021E   12....       LCALL   ?Subroutine16 & 0xFFFF
   1186                  tmp = calcChkF( dstPg, dstOff, hdr.len );
   \                     ??CrossCallReturnLabel_31:
   \   000221                ; Setup parameters for call to function calcChkF
   \   000221   7405         MOV     A,#0x5
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000229   EE           MOV     A,R6
   \   00022A   FA           MOV     R2,A
   \   00022B   EF           MOV     A,R7
   \   00022C   FB           MOV     R3,A
   \   00022D   A9..         MOV     R1,?V0 + 0
   \   00022F   12....       LCALL   ??calcChkF?relay
   \   000232   7401         MOV     A,#0x1
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   EA           MOV     A,R2
   \   000238   F0           MOVX    @DPTR,A
   \   000239   A3           INC     DPTR
   \   00023A   EB           MOV     A,R3
   \   00023B   F0           MOVX    @DPTR,A
   1187                  dstOff -= OSAL_NV_HDR_SIZE;
   \   00023C   EE           MOV     A,R6
   \   00023D   24F8         ADD     A,#-0x8
   \   00023F   FE           MOV     R6,A
   \   000240   EF           MOV     A,R7
   \   000241   34FF         ADDC    A,#-0x1
   \   000243   FF           MOV     R7,A
   1188                  writeWordH( dstPg, (dstOff+OSAL_NV_HDR_CHK), (uint8 *)&tmp );
   \   000244                ; Setup parameters for call to function writeWordH
   \   000244   7401         MOV     A,#0x1
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   AC82         MOV     R4,DPL
   \   00024B   AD83         MOV     R5,DPH
   \   00024D   7404         MOV     A,#0x4
   \   00024F   2E           ADD     A,R6
   \   000250   FA           MOV     R2,A
   \   000251   E4           CLR     A
   \   000252   12....       LCALL   ?Subroutine18 & 0xFFFF
   1189                  HalFlashRead(dstPg, dstOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_35:
   \   000255   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000258   7405         MOV     A,#0x5
   \   00025A   12....       LCALL   ?XSTACK_DISP0_8
   \   00025D   AC82         MOV     R4,DPL
   \   00025F   AD83         MOV     R5,DPH
   \   000261   EE           MOV     A,R6
   \   000262   FA           MOV     R2,A
   \   000263   EF           MOV     A,R7
   \   000264   FB           MOV     R3,A
   \   000265   A9..         MOV     R1,?V0 + 0
   \   000267   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00026A   12....       LCALL   ?DEALLOC_XSTACK8
   1190          
   1191                  if ( tmp == hdr.chk )
   \   00026D   7401         MOV     A,#0x1
   \   00026F   12....       LCALL   ?XSTACK_DISP0_8
   \   000272   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000275   7407         MOV     A,#0x7
   \   000277   12....       LCALL   ?XSTACK_DISP0_8
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   68           XRL     A,R0
   \   00027C   7003         JNZ     ??osal_nv_write_11
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   69           XRL     A,R1
   \                     ??osal_nv_write_11:
   \   000281   700D         JNZ     ??osal_nv_write_12
   1192                  {
   1193                    setItem( srcPg, origOff, eNvZero );
   \   000283                ; Setup parameters for call to function setItem
   \   000283   7C01         MOV     R4,#0x1
   \   000285   AA..         MOV     R2,?V0 + 14
   \   000287   AB..         MOV     R3,?V0 + 15
   \   000289   A9..         MOV     R1,?V0 + 4
   \   00028B   12....       LCALL   ??setItem?relay
   \   00028E   8003         SJMP    ??osal_nv_write_13
   1194                  }
   1195                  else
   1196                  {
   1197                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_12:
   \   000290   75..0A       MOV     ?V0 + 1,#0xa
   1198                  }
   1199          
   1200                  if ( dstPg == pgRes )
   \                     ??osal_nv_write_13:
   \   000293   90....       MOV     DPTR,#pgRes
   \   000296   E0           MOVX    A,@DPTR
   \   000297   65..         XRL     A,?V0 + 0
   \   000299   7010         JNZ     ??osal_nv_write_9
   1201                  {
   1202                    compactPage( comPg );
   \   00029B                ; Setup parameters for call to function compactPage
   \   00029B   85..82       MOV     DPL,?XSP + 0
   \   00029E   85..83       MOV     DPH,?XSP + 1
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   F9           MOV     R1,A
   \   0002A3   12....       LCALL   ??compactPage?relay
   \   0002A6   8003         SJMP    ??osal_nv_write_9
   1203                  }
   1204                }
   1205                else
   1206                {
   1207                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_10:
   \   0002A8   75..0A       MOV     ?V0 + 1,#0xa
   1208                }
   1209              }
   1210            }
   1211          
   1212            if ( failF )
   \                     ??osal_nv_write_9:
   \   0002AB   90....       MOV     DPTR,#failF
   \   0002AE   E0           MOVX    A,@DPTR
   \   0002AF   6006         JZ      ??osal_nv_write_1
   1213            {
   1214              (void)initNV();  // See comment at the declaration of failF.
   \   0002B1                ; Setup parameters for call to function initNV
   \   0002B1   12....       LCALL   ??initNV?relay
   1215              rtrn = NV_OPER_FAILED;
   \   0002B4   75..0A       MOV     ?V0 + 1,#0xa
   1216            }
   1217          
   1218            return rtrn;
   \                     ??osal_nv_write_1:
   \   0002B7   A9..         MOV     R1,?V0 + 1
   \                     ??osal_nv_write_4:
   \   0002B9   740B         MOV     A,#0xb
   \   0002BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002BE   7F10         MOV     R7,#0x10
   \   0002C0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1219          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   25..         ADD     A,?V0 + 2
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   35..         ADDC    A,?V0 + 3
   \   000007   FF           MOV     R7,A
   \   000008                ; Setup parameters for call to function writeBuf
   \   000008   7425         MOV     A,#0x25
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C3           CLR     C
   \   000002   98           SUBB    A,R0
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   99           SUBB    A,R1
   \   000007   FF           MOV     R7,A
   \   000008   22           RET
   1220          
   1221          /*********************************************************************
   1222           * @fn      osal_nv_read
   1223           *
   1224           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1225           *          an element of an item by indexing into the item with an offset.
   1226           *          Read data is copied into *buf.
   1227           *
   1228           * @param   id  - Valid NV item Id.
   1229           * @param   ndx - Index offset into item
   1230           * @param   len - Length of data to read.
   1231           * @param  *buf - Data is read into this buffer.
   1232           *
   1233           * @return  ZSUCCESS if NV data was copied to the parameter 'buf'.
   1234           *          Otherwise, NV_OPER_FAILED for failure.
   1235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1236          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1237          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   \   000009   740E         MOV     A,#0xe
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000011   7410         MOV     A,#0x10
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   1238            uint16 offset;
   1239          
   1240            offset = findItem( id );
   \   00001B                ; Setup parameters for call to function findItem
   \   00001B   12....       LCALL   ??findItem?relay
   1241            if ( offset == OSAL_NV_ITEM_NULL )
   \   00001E   EA           MOV     A,R2
   \   00001F   7001         JNZ     ??osal_nv_read_0
   \   000021   EB           MOV     A,R3
   \                     ??osal_nv_read_0:
   \   000022   7004         JNZ     ??osal_nv_read_1
   1242            {
   1243              return NV_OPER_FAILED;
   \   000024   790A         MOV     R1,#0xa
   \   000026   801E         SJMP    ??osal_nv_read_2
   1244            }
   1245          
   1246            HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_1:
   \   000028                ; Setup parameters for call to function HalFlashRead
   \   000028   78..         MOV     R0,#?V0 + 2
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   EE           MOV     A,R6
   \   00002E   FC           MOV     R4,A
   \   00002F   EF           MOV     A,R7
   \   000030   FD           MOV     R5,A
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   2A           ADD     A,R2
   \   000034   FA           MOV     R2,A
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   3B           ADDC    A,R3
   \   000038   FB           MOV     R3,A
   \   000039   90....       MOV     DPTR,#findPg
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1247          
   1248            return ZSUCCESS;
   \   000044   7900         MOV     R1,#0x0
   \                     ??osal_nv_read_2:
   \   000046   02....       LJMP    ??Subroutine35_0 & 0xFFFF
   1249          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setPageUse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??erasePage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compactPage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??findItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??setItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??calcChkF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWord?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeWordH?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??xferBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??writeItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_item_len?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osal_nv_read?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read
   1250          
   1251          /*********************************************************************
   1252          *********************************************************************/

   Maximum stack usage in bytes:

     Function            ISTACK PSTACK XSTACK
     --------            ------ ------ ------
     calcChkF                0      0     57
       -> HalFlashRead       0      0     44
     compactPage             0      0     63
       -> writeWordH         0      0     48
       -> calcChkF           0      0     48
       -> setItem            0      0     48
       -> writeBuf           0      0     52
       -> xferBuf            0      0     56
       -> setItem            0      0     48
       -> HalFlashRead       0      0     52
       -> erasePage          0      0     48
       -> setPageUse         0      0     48
     erasePage               0      0     33
       -> HalAdcCheckVdd     0      0     18
       -> HalFlashErase      0      0     18
     findItem                0      0     47
       -> initPage           0      0     24
     initItem                1      0     57
       -> writeItem          0      0     40
       -> compactPage        0      0     34
     initNV                  0      0     57
       -> HalFlashRead       0      0     44
       -> setPageUse         0      0     40
       -> initPage           0      0     40
       -> setPageUse         0      0     40
       -> compactPage        0      0     40
       -> erasePage          0      0     40
       -> initNV             0      0     40
     initPage                0      0     48
       -> HalFlashRead       0      0     56
       -> calcChkF           0      0     52
       -> findItem           0      0     52
       -> setItem            0      0     52
       -> setItem            0      0     52
     osal_nv_init            2      0      0
       -> initNV             4      0      0
     osal_nv_item_init       0      0     18
       -> findItem           0      0     28
       -> initItem           0      0     32
       -> initNV             0      0     28
     osal_nv_item_len        0      0     20
       -> findItem           0      0     36
       -> HalFlashRead       0      0     40
     osal_nv_read            0      0     20
       -> findItem           0      0     28
       -> HalFlashRead       0      0     32
     osal_nv_write           2      0     43
       -> findItem           0      0     70
       -> HalFlashRead       0      0     74
       -> HalFlashRead       0      0     74
       -> initItem           0      0     74
       -> setItem            0      0     70
       -> xferBuf            0      0     78
       -> writeBuf           0      0     74
       -> xferBuf            0      0     78
       -> calcChkF           0      0     70
       -> writeWordH         0      0     70
       -> HalFlashRead       0      0     74
       -> setItem            0      0     70
       -> compactPage        0      0     70
       -> initNV             0      0     70
     setItem                 0      0     59
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> writeWord          0      0     44
     setPageUse              0      0     49
       -> writeWord          0      0     34
     writeBuf                1      0     61
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> HalAdcCheckVdd     0      0     44
       -> HalFlashWrite      0      0     48
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
     writeItem               0      0     54
       -> setPageUse         0      0     64
       -> writeWord          0      0     64
       -> HalFlashRead       0      0     68
       -> writeBuf           0      0     68
       -> calcChkF           0      0     64
       -> writeWordH         0      0     64
       -> HalFlashRead       0      0     68
     writeWord               0      0     47
       -> HalAdcCheckVdd     0      0     26
       -> HalFlashWrite      0      0     30
     writeWordH              1      0     48
       -> writeWord          0      0     26
     xferBuf                 0      0     63
       -> HalFlashRead       0      0     48
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44
       -> HalFlashRead       0      0     48
       -> HalFlashRead       0      0     48
       -> writeWord          0      0     44


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     _nvBuf                    12288
     _nvIEEE                       8
     pgOff                        12
     pgLost                       12
     pgRes                         1
     findPg                        1
     failF                         1
     initNV                      227
     ?Subroutine0                  5
     ??Subroutine34_0              6
     setPageUse                   52
     ?Subroutine1                  3
     ??Subroutine29_0              5
     ??Subroutine30_0              2
     ??Subroutine31_0             12
     initPage                    433
     ?Subroutine22                 4
     ?Subroutine7                  5
     ?Subroutine28                11
     ?Subroutine21                 9
     ?Subroutine19                11
     ?Subroutine15                 6
     ?Subroutine27                17
     ??Subroutine32_0              8
     ?Subroutine10                 6
     erasePage                    46
     compactPage                 339
     ?Subroutine12                 8
     ?Subroutine11                17
     ?Subroutine8                  8
     ?Subroutine5                  7
     ?Subroutine13                 8
     ?Subroutine23                12
     ?Subroutine3                  3
     ??Subroutine35_0              5
     findItem                     71
     initItem                    213
     setItem                     139
     ?Subroutine9                  7
     ?Subroutine26                14
     calcChkF                    151
     ?Subroutine24                19
     writeWord                    84
     writeWordH                   64
     writeBuf                    379
     ?Subroutine2                  2
     ?Subroutine6                 15
     ?Subroutine14                 8
     ?Subroutine4                 10
     ??Subroutine33_0              6
     xferBuf                     321
     ?Subroutine25                13
     ?Subroutine17                32
     writeItem                   505
     ?Subroutine18                16
     osal_nv_init                 14
     osal_nv_item_init            84
     osal_nv_item_len             84
     osal_nv_write               707
     ?Subroutine20                11
     ?Subroutine16                 9
     osal_nv_read                 73
     ??initNV?relay                6
     ??setPageUse?relay            6
     ??initPage?relay              6
     ??erasePage?relay             6
     ??compactPage?relay           6
     ??findItem?relay              6
     ??initItem?relay              6
     ??setItem?relay               6
     ??calcChkF?relay              6
     ??writeWord?relay             6
     ??writeWordH?relay            6
     ??writeBuf?relay              6
     ??xferBuf?relay               6
     ??writeItem?relay             6
     ??osal_nv_init?relay          6
     ??osal_nv_item_init?relay     6
     ??osal_nv_item_len?relay      6
     ??osal_nv_write?relay         6
     ??osal_nv_read?relay          6

 
  4 326 bytes in segment BANKED_CODE
    114 bytes in segment BANK_RELAYS
      8 bytes in segment IEEE_ADDRESS_SPACE
     27 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  4 440 bytes of CODE  memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none
