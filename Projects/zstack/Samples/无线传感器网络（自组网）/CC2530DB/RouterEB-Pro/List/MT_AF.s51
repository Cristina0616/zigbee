///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            17/Feb/2013  12:16:53 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì /
//                          \ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Components\mt\MT_AF.c /
//    Command line       =  -f "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530 /
//                          Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\S /
//                          amples\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wRouter.cfg"             /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f "C:\Documents and                /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg" (-DSECURE=0                  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF0                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Components\mt\MT_AF.c" -D ZIGBEEPRO    /
//                          -D ZTOOL_P1 -D NWK_AUTO_POLL -D MT_TASK -D        /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC "C:\Documents and         /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\ /
//                          " -lA "C:\Documents and                           /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\List\ /
//                          " --diag_suppress Pe001,Pa010 -o "C:\Documents    /
//                          and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13. /
//                          Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp  /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\RouterEB-Pro\Obj\" /
//                           -e --require_prototypes --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Documents and         /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\" -I               /
//                          "C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³ /
//                          Ì\ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samp /
//                          les\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\S /
//                          OURCE\" -I "C:\Documents and                      /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\ZMAIN\TI2 /
//                          530DB\" -I "C:\Documents and                      /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MT\" -I "C:\Documents and                 /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\HAL\INCLUDE\" -I "C:\Documents and        /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\HAL\TARGET\CC2530EB\" -I "C:\Documents    /
//                          and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13. /
//                          Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp  /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\OSAL\MCU\CCSOC\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\OSAL\INCLUDE\" -I "C:\Documents and       /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\AF\" -I "C:\Documents and           /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\NWK\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SEC\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SAPI\" -I "C:\Documents and         /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\SYS\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\STACK\ZDO\" -I "C:\Documents and          /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\ZMAC\F8W\" -I "C:\Documents and           /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\ZMAC\" -I "C:\Documents and               /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SADDR\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\SERVICES\SDATA\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\INCLUDE\" -I "C:\Documents and        /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\HIGH_LEVEL\" -I "C:\Documents and     /
//                          Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­Òé /
//                          Õ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp      /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Documents    /
//                          and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13. /
//                          Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Samples\SampleApp  /
//                          ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\..\..\..\..\..\COM /
//                          PONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -I      /
//                          "C:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.4\8051\INC\" -I "C:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì /
//                          \ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Projects\zstack\Sampl /
//                          es\SampleApp ÍøÂç¹ÜÀí-µã²¥·½Ê½·¢ËÍ\CC2530DB\Route /
//                          rEB-Pro\List\MT_AF.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_AF

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??MT_AfCommandProcessing?relay
        FUNCTION ??MT_AfCommandProcessing?relay,0203H
        PUBLIC ??MT_AfDataConfirm?relay
        FUNCTION ??MT_AfDataConfirm?relay,0203H
        PUBLIC ??MT_AfDataRequest?relay
        FUNCTION ??MT_AfDataRequest?relay,0203H
        PUBLIC ??MT_AfDataRequestSrcRtg?relay
        FUNCTION ??MT_AfDataRequestSrcRtg?relay,0203H
        PUBLIC ??MT_AfIncomingMsg?relay
        FUNCTION ??MT_AfIncomingMsg?relay,0203H
        PUBLIC ??MT_AfRegister?relay
        FUNCTION ??MT_AfRegister?relay,0203H
        PUBLIC MT_AfCommandProcessing
        FUNCTION MT_AfCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_AfDataConfirm
        FUNCTION MT_AfDataConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC MT_AfDataRequest
        FUNCTION MT_AfDataRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC MT_AfDataRequestSrcRtg
        FUNCTION MT_AfDataRequestSrcRtg,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC MT_AfIncomingMsg
        FUNCTION MT_AfIncomingMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC MT_AfRegister
        FUNCTION MT_AfRegister,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
MT_BuildEndpointDesc SYMBOL "MT_BuildEndpointDesc"
afRegister          SYMBOL "afRegister"
osal_mem_free       SYMBOL "osal_mem_free"
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
osal_memcpy         SYMBOL "osal_memcpy"
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_memset         SYMBOL "osal_memset"
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??AF_DataRequestSrcRtg?relay SYMBOL "?relay", AF_DataRequestSrcRtg
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
??MT_BuildEndpointDesc?relay SYMBOL "?relay", MT_BuildEndpointDesc
??afFindEndPointDesc?relay SYMBOL "?relay", afFindEndPointDesc
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
MT_AfCommandProcessing SYMBOL "MT_AfCommandProcessing"
??MT_AfCommandProcessing?relay SYMBOL "?relay", MT_AfCommandProcessing
MT_AfDataConfirm    SYMBOL "MT_AfDataConfirm"
??MT_AfDataConfirm?relay SYMBOL "?relay", MT_AfDataConfirm
MT_AfDataRequest    SYMBOL "MT_AfDataRequest"
??MT_AfDataRequest?relay SYMBOL "?relay", MT_AfDataRequest
MT_AfDataRequestSrcRtg SYMBOL "MT_AfDataRequestSrcRtg"
??MT_AfDataRequestSrcRtg?relay SYMBOL "?relay", MT_AfDataRequestSrcRtg
MT_AfIncomingMsg    SYMBOL "MT_AfIncomingMsg"
??MT_AfIncomingMsg?relay SYMBOL "?relay", MT_AfIncomingMsg
MT_AfRegister       SYMBOL "MT_AfRegister"
??MT_AfRegister?relay SYMBOL "?relay", MT_AfRegister

        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildEndpointDesc
        FUNCTION MT_BuildEndpointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??AF_DataRequestSrcRtg?relay
        FUNCTION ??AF_DataRequestSrcRtg?relay,00H
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??MT_BuildEndpointDesc?relay
        FUNCTION ??MT_BuildEndpointDesc?relay,00H
        EXTERN ??afFindEndPointDesc?relay
        FUNCTION ??afFindEndPointDesc?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN MT_TaskID

// C:\Documents and Settings\XPMUser\×ÀÃæ\CC2530Àý³Ì\ÏîÄ¿Êµ¼ù\13.Ð­ÒéÕ»ÍøÂç¹ÜÀí\Components\mt\MT_AF.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_AF.c
//    3   Revised:        $Date: 2010-01-08 16:52:37 -0800 (Fri, 08 Jan 2010) $
//    4   Revision:       $Revision: 21471 $
//    5 
//    6 
//    7   Description:    MonitorTest functions for the AF layer.
//    8 
//    9 
//   10   Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 
//   40 **************************************************************************************************/
//   41 
//   42 /***************************************************************************************************
//   43  * INCLUDES
//   44  ***************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "MT.h"
//   48 #include "MT_AF.h"
//   49 #include "MT_ZDO.h"
//   50 #include "nwk.h"
//   51 #include "OnBoard.h"
//   52 #include "MT_UART.h"
//   53 
//   54 #if defined INTER_PAN
//   55 #include "stub_aps.h"
//   56 #endif
//   57 
//   58 /***************************************************************************************************
//   59  * GLOBAL VARIABLES
//   60  ***************************************************************************************************/
//   61 
//   62 #if defined ( MT_AF_CB_FUNC )
//   63 uint16 _afCallbackSub;
//   64 #endif
//   65 
//   66 /***************************************************************************************************
//   67  * LOCAL FUNCTIONS
//   68  ***************************************************************************************************/
//   69 void MT_AfRegister(uint8 *pBuf);
//   70 void MT_AfDataRequest(uint8 *pBuf);
//   71 
//   72 #if defined ( ZIGBEE_SOURCE_ROUTING )
//   73 void MT_AfDataRequestSrcRtg(uint8 *pBuf);
//   74 #endif
//   75 
//   76 #if defined INTER_PAN
//   77 static void MT_AfInterPanCtl(uint8 *pBuf);
//   78 #endif
//   79 
//   80 /***************************************************************************************************
//   81  * @fn      MT_afCommandProcessing
//   82  *
//   83  * @brief   Process all the AF commands that are issued by test tool
//   84  *
//   85  * @param   pBuf - pointer to the received buffer
//   86  *
//   87  * @return  status
//   88  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   89 uint8 MT_AfCommandProcessing(uint8 *pBuf)
MT_AfCommandProcessing:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function MT_AfCommandProcessing
//   90 {
        FUNCALL MT_AfCommandProcessing, MT_AfRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfCommandProcessing, MT_AfDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfCommandProcessing, MT_AfDataRequestSrcRtg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   91   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//   92 
//   93   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for MT_AfCommandProcessing>_0`:
        DATA
        DB        0
        DB        3
        DW        ??MT_AfCommandProcessing_0
        DW        ??MT_AfCommandProcessing_1
        DW        ??MT_AfCommandProcessing_2
        DW        ??MT_AfCommandProcessing_2
        DW        ??MT_AfCommandProcessing_3
        CODE
//   94   {
//   95     case MT_AF_REGISTER:
//   96       MT_AfRegister(pBuf);
??MT_AfCommandProcessing_1:
        ; Setup parameters for call to function MT_AfRegister
        LCALL   ??MT_AfRegister?relay
        SJMP    ??MT_AfCommandProcessing_4
//   97       break;
//   98 
//   99     case MT_AF_DATA_REQUEST:
//  100     case MT_AF_DATA_REQUEST_EXT:
//  101       MT_AfDataRequest(pBuf);
??MT_AfCommandProcessing_2:
        ; Setup parameters for call to function MT_AfDataRequest
        LCALL   ??MT_AfDataRequest?relay
        SJMP    ??MT_AfCommandProcessing_4
//  102       break;
//  103       
//  104 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  105     case MT_AF_DATA_REQUEST_SRCRTG:
//  106       MT_AfDataRequestSrcRtg(pBuf);
??MT_AfCommandProcessing_3:
        ; Setup parameters for call to function MT_AfDataRequestSrcRtg
        LCALL   ??MT_AfDataRequestSrcRtg?relay
        SJMP    ??MT_AfCommandProcessing_4
//  107       break;
//  108 #endif
//  109       
//  110 #if defined INTER_PAN
//  111     case MT_AF_INTER_PAN_CTL:
//  112       MT_AfInterPanCtl(pBuf);
//  113       break; 
//  114 #endif
//  115       
//  116     default:
//  117       status = MT_RPC_ERR_COMMAND_ID;
??MT_AfCommandProcessing_0:
        INC     R6
        INC     R6
//  118       break;
//  119   }
//  120 
//  121   return status;
??MT_AfCommandProcessing_4:
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  122 }
//  123 
//  124 /***************************************************************************************************
//  125  * @fn      MT_AfRegister
//  126  *
//  127  * @brief   Process AF Register command
//  128  *
//  129  * @param   pBuf - pointer to the received buffer
//  130  *
//  131  * @return  none
//  132  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  133 void MT_AfRegister(uint8 *pBuf)
MT_AfRegister:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function MT_AfRegister
//  134 {
        FUNCALL MT_AfRegister, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfRegister, MT_BuildEndpointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfRegister, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfRegister, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfRegister, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  135   uint8 cmdId;
//  136   uint8 retValue = ZMemError;
        MOV     A,#0x10
        LCALL   ?Subroutine13 & 0xFFFF
//  137   endPointDesc_t *epDesc;
//  138 
//  139   /* parse header */
//  140   cmdId = pBuf[MT_RPC_POS_CMD1];
??CrossCallReturnLabel_16:
        MOV     ?V0 + 2,A
//  141   pBuf += MT_RPC_FRAME_HDR_SZ;
//  142 
//  143   epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  144   if ( epDesc )
        MOV     A,R6
        JNZ     ??MT_AfRegister_0
        MOV     A,R7
??MT_AfRegister_0:
        JZ      ??MT_AfRegister_1
//  145   {
//  146     epDesc->task_id = &MT_TaskID;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,#(MT_TaskID & 0xff)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#((MT_TaskID >> 8) & 0xff)
        MOVX    @DPTR,A
//  147     retValue = MT_BuildEndpointDesc( pBuf, epDesc );
        ; Setup parameters for call to function MT_BuildEndpointDesc
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0 + 0
        ADD     A,#0x3
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??MT_BuildEndpointDesc?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  148     if ( retValue == ZSuccess )
        JNZ     ??MT_AfRegister_2
//  149     {
//  150       retValue = afRegister( epDesc );
        ; Setup parameters for call to function afRegister
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??afRegister?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  151     }
//  152 
//  153     if ( retValue != ZSuccess )
??MT_AfRegister_2:
        MOVX    A,@DPTR
        JZ      ??MT_AfRegister_1
//  154     {
//  155       osal_mem_free( epDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  156     }
//  157   }
//  158 
//  159   /* Build and send back the response */
//  160   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
??MT_AfRegister_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,?V0 + 2
        MOV     R1,#0x64
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  161 }
        MOV     A,#0x1
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Valid
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  162 
//  163 /***************************************************************************************************
//  164  * @fn      MT_AfDataRequest
//  165  *
//  166  * @brief   Process AF Register command
//  167  *
//  168  * @param   pBuf - pointer to the received buffer
//  169  *
//  170  * @return  none
//  171  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  172 void MT_AfDataRequest(uint8 *pBuf)
MT_AfDataRequest:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MT_AfDataRequest
//  173 {
        FUNCALL MT_AfDataRequest, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequest, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequest, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
//  174   uint8 cmd0, cmd1, tempLen = 0;
//  175   uint8 retValue = ZFailure;
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine14 & 0xFFFF
//  176   endPointDesc_t *epDesc;
//  177   byte transId;
//  178   afAddrType_t dstAddr;
//  179   cId_t cId;
//  180   byte txOpts, radius, srcEP;
//  181 
//  182   /* Parse header */
//  183   cmd0 = pBuf[MT_RPC_POS_CMD0];
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        MOV     R7,A
//  184   cmd1 = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  185   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,R3
        LCALL   ?Subroutine18 & 0xFFFF
//  186 
//  187   if (cmd1 == MT_AF_DATA_REQUEST_EXT)
??CrossCallReturnLabel_29:
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??MT_AfDataRequest_0
//  188   {
//  189     dstAddr.addrMode = (afAddrMode_t)*pBuf++;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
//  190 
//  191     if (dstAddr.addrMode == afAddr64Bit)
        MOV     A,#0x3
        XRL     A,R2
        JNZ     ??MT_AfDataRequest_1
//  192     {
//  193       (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        SJMP    ??MT_AfDataRequest_2
//  194     }
//  195     else
//  196     {
//  197       dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_AfDataRequest_1:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine5 & 0xFFFF
//  198     }
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  199     pBuf += Z_EXTADDR_LEN;
??MT_AfDataRequest_2:
        MOV     A,?V0 + 4
        ADD     A,#0x8
        LCALL   ??Subroutine21_0 & 0xFFFF
//  200 
//  201     dstAddr.endPoint = *pBuf++;
??CrossCallReturnLabel_27:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
//  202     dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
??CrossCallReturnLabel_9:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R0,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  203     pBuf += 2;
        MOV     A,?V0 + 4
        ADD     A,#0x2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        SJMP    ??MT_AfDataRequest_3
//  204   }
//  205   else
//  206   {
//  207     /* Destination address */
//  208     dstAddr.addrMode = afAddr16Bit;
??MT_AfDataRequest_0:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  209     dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  210     pBuf += 2;
        LCALL   ?Subroutine8 & 0xFFFF
//  211 
//  212     /* Destination endpoint */
//  213     dstAddr.endPoint = *pBuf++;
??CrossCallReturnLabel_25:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
//  214     dstAddr.panId = 0;
??CrossCallReturnLabel_10:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  215   }
//  216 
//  217   /* Source endpoint */
//  218   srcEP = *pBuf++;
??MT_AfDataRequest_3:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
//  219   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//  220 
//  221   /* ClusterId */
//  222   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     ?V0 + 2,A
        MOV     A,R1
        MOV     ?V0 + 3,A
//  223   pBuf +=2;
        LCALL   ?Subroutine8 & 0xFFFF
//  224 
//  225   /* TransId */
//  226   transId = *pBuf++;
??CrossCallReturnLabel_26:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine17 & 0xFFFF
//  227 
//  228   /* TxOption */
//  229   txOpts = *pBuf++;
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
//  230 
//  231   /* Radius */
//  232   radius = *pBuf++;
        MOVX    A,@DPTR
        MOV     R3,A
        INC     DPTR
//  233 
//  234   /* Length */
//  235   tempLen = *pBuf++;
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
//  236 
//  237   if ( epDesc == NULL )
        MOV     A,R4
        JNZ     ??MT_AfDataRequest_4
        MOV     A,R5
??MT_AfDataRequest_4:
        JNZ     ??MT_AfDataRequest_5
//  238   {
//  239     retValue = afStatus_INVALID_PARAMETER;
        MOV     A,#0x2
        SJMP    ??MT_AfDataRequest_6
//  240   }
//  241   else
//  242   {
//  243     retValue = AF_DataRequest( &dstAddr, epDesc, cId, tempLen, pBuf, &transId, txOpts, radius );
??MT_AfDataRequest_5:
        ; Setup parameters for call to function AF_DataRequest
        MOV     A,R3
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R1
??MT_AfDataRequest_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  244   }
//  245 
//  246   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
        MOV     A,#-0x20
        ANL     A,R7
        XRL     A,#0x20
        JNZ     ??MT_AfDataRequest_7
//  247   {
//  248     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x64
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  249   }
//  250 }
??MT_AfDataRequest_7:
        MOV     A,#0xe
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_9
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_10
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     A,?V0 + 4
        ADD     A,#0x2
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_30:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_25
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_26
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_27
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_28
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28
//  251 
//  252 
//  253 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  254 
//  255 /***************************************************************************************************
//  256  * @fn      MT_AfDataRequestSrcRtg
//  257  *
//  258  * @brief   Process AF Register command
//  259  *
//  260  * @param   pBuf - pointer to the received buffer
//  261  *
//  262  * @return  none
//  263  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 void MT_AfDataRequestSrcRtg(uint8 *pBuf)
MT_AfDataRequestSrcRtg:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function MT_AfDataRequestSrcRtg
//  265 {
        FUNCALL MT_AfDataRequestSrcRtg, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequestSrcRtg, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequestSrcRtg, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequestSrcRtg, AF_DataRequestSrcRtg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequestSrcRtg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfDataRequestSrcRtg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  266   uint8 cmdId, dataLen = 0;
//  267   uint8 retValue = ZFailure;
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine12 & 0xFFFF
//  268   endPointDesc_t *epDesc;
//  269   byte transId;
//  270   afAddrType_t dstAddr;
//  271   cId_t cId;
//  272   byte txOpts, radius, srcEP, relayCnt;
//  273   uint16 *pRelayList;
//  274   uint8 i;
//  275 
//  276   /* parse header */
//  277   cmdId = pBuf[MT_RPC_POS_CMD1];
??CrossCallReturnLabel_13:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  278   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        INC     R6
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  279 
//  280   /* Destination address */
//  281   /* Initialize the panID field to zero to avoid inter-pan */
//  282   osal_memset( &dstAddr, 0, sizeof(afAddrType_t) ); 
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  283   dstAddr.addrMode = afAddr16Bit;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  284   dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine11 & 0xFFFF
//  285   pBuf += 2;
//  286 
//  287   /* Destination endpoint */
//  288   dstAddr.endPoint = *pBuf++;
??CrossCallReturnLabel_11:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine12 & 0xFFFF
//  289 
//  290   /* Source endpoint */
//  291   srcEP = *pBuf++;
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  292   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  293 
//  294   /* ClusterId */
//  295   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V0 + 6,A
        MOV     A,R1
        MOV     ?V0 + 7,A
//  296   pBuf +=2;
        LCALL   ?Subroutine19 & 0xFFFF
//  297 
//  298   /* TransId */
//  299   transId = *pBuf++;
??CrossCallReturnLabel_23:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine12 & 0xFFFF
//  300 
//  301   /* TxOption */
//  302   txOpts = *pBuf++;
??CrossCallReturnLabel_15:
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        INC     DPTR
//  303 
//  304   /* Radius */
//  305   radius = *pBuf++;
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
//  306   
//  307   /* Source route relay count */
//  308   relayCnt = *pBuf++;
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  309   
//  310   /* Convert the source route relay list */
//  311   if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
        ; Setup parameters for call to function osal_mem_alloc
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        JNZ     ??MT_AfDataRequestSrcRtg_0
        MOV     A,R3
??MT_AfDataRequestSrcRtg_0:
        JNZ     $+5
        LJMP    ??MT_AfDataRequestSrcRtg_1 & 0xFFFF
//  312   {
//  313     for( i = 0; i < relayCnt; i++ )
        MOV     R4,#0x0
        SJMP    ??MT_AfDataRequestSrcRtg_2
//  314     {
//  315       pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_AfDataRequestSrcRtg_3:
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        ADD     A,R2
        MOV     A,R1
        MOV     R3,A
        MOV     A,R4
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine11 & 0xFFFF
//  316       pBuf += 2;
//  317     }
??CrossCallReturnLabel_12:
        INC     R4
??MT_AfDataRequestSrcRtg_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R4
        CLR     C
        SUBB    A,?V0 + 11
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JC      ??MT_AfDataRequestSrcRtg_3
//  318   
//  319     /* Data payload Length */
//  320     dataLen = *pBuf++;
        MOV     ?V0 + 12,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  321 
//  322     if ( epDesc == NULL )
        MOV     A,?V0 + 4
        JNZ     ??MT_AfDataRequestSrcRtg_4
        MOV     A,?V0 + 5
??MT_AfDataRequestSrcRtg_4:
        JNZ     ??MT_AfDataRequestSrcRtg_5
//  323     {
//  324       retValue = afStatus_INVALID_PARAMETER;
        MOV     A,#0x2
        SJMP    ??MT_AfDataRequestSrcRtg_6
//  325     }
//  326     else
//  327     {
//  328       retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf, 
//  329                                      &transId, txOpts, radius, relayCnt, pRelayList );
??MT_AfDataRequestSrcRtg_5:
        ; Setup parameters for call to function AF_DataRequestSrcRtg
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,?V0 + 11
        MOV     ?V0 + 8,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,?V0 + 10
        MOV     ?V0 + 8,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 8,DPL
        MOV     ?V0 + 9,DPH
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 42)
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 13,#0x0
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R1,?V0 + 3
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequestSrcRtg?relay
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
??MT_AfDataRequestSrcRtg_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  330     }
//  331     
//  332     /* Free the memory allocated */
//  333     osal_mem_free( pRelayList );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
        SJMP    ??MT_AfDataRequestSrcRtg_7
//  334   }
//  335   else
//  336   {
//  337     retValue = afStatus_MEM_FAIL;
??MT_AfDataRequestSrcRtg_1:
        MOV     A,#0x10
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  338   }
//  339     
//  340 
//  341   /* Build and send back the response */
//  342   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
??MT_AfDataRequestSrcRtg_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,?V0 + 2
        MOV     R1,#0x64
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  343 }
        MOV     A,#0xe
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_24:
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_11
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_12
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
//  344 #endif
//  345 
//  346 #if defined INTER_PAN
//  347 /***************************************************************************************************
//  348  * @fn      MT_AfInterPanCtl
//  349  *
//  350  * @brief   Process the AF Inter Pan control command.
//  351  *
//  352  * @param   pBuf - pointer to the received buffer
//  353  *
//  354  * @return  none
//  355  ***************************************************************************************************/
//  356 static void MT_AfInterPanCtl(uint8 *pBuf)
//  357 {
//  358   uint8 cmd, rtrn;
//  359   uint16 panId;
//  360   endPointDesc_t *pEP;
//  361   
//  362   cmd = pBuf[MT_RPC_POS_CMD1];
//  363   pBuf += MT_RPC_FRAME_HDR_SZ;
//  364 
//  365   switch (*pBuf++)  // Inter-pan request parameter.
//  366   {
//  367   case InterPanClr:
//  368     rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
//  369     break;
//  370 
//  371   case InterPanSet:
//  372     rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
//  373     break;
//  374 
//  375   case InterPanReg:
//  376     if ((pEP = afFindEndPointDesc(*pBuf)))
//  377     {
//  378       StubAPS_RegisterApp(pEP);
//  379       rtrn = SUCCESS;
//  380     }
//  381     else
//  382     {
//  383       rtrn = FAILURE;
//  384     }
//  385     break;
//  386 
//  387   case InterPanChk:
//  388     panId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  389     rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
//  390     break;
//  391 
//  392   default:
//  393     rtrn = afStatus_INVALID_PARAMETER;
//  394     break;
//  395   }
//  396 
//  397   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
//  398 }
//  399 #endif
//  400 
//  401 /***************************************************************************************************
//  402  * @fn      MT_AfDataConfirm
//  403  *
//  404  * @brief   Process
//  405  *
//  406  * @param   pBuf - pointer to the received buffer
//  407  *
//  408  * @return  none
//  409  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  410 void MT_AfDataConfirm(afDataConfirm_t *pMsg)
MT_AfDataConfirm:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function MT_AfDataConfirm
//  411 {
        FUNCALL MT_AfDataConfirm, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 3)
//  412   uint8 retArray[3];
//  413 
//  414   retArray[0] = pMsg->hdr.status;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine13 & 0xFFFF
//  415   retArray[1] = pMsg->endpoint;
??CrossCallReturnLabel_17:
        PUSH    A
        CFI CFA_SP SP+-6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+-5
        LCALL   ?Subroutine14 & 0xFFFF
//  416   retArray[2] = pMsg->transID;
??CrossCallReturnLabel_19:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-6
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+-5
        MOVX    @DPTR,A
//  417 
//  418   /* Build and send back the response */
//  419   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x3
        MOV     R2,#-0x80
        MOV     R1,#0x44
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  420 }
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 28)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond50) CFA_SP SP+-5
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 3)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond54) CFA_SP SP+-5
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 3)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55
//  421 
//  422 /***************************************************************************************************
//  423  * @fn          MT_AfIncomingMsg
//  424  *
//  425  * @brief       Process the callback subscription for AF Incoming data.
//  426  *
//  427  * @param       pkt - Incoming AF data.
//  428  *
//  429  * @return      none
//  430  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
MT_AfIncomingMsg:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function MT_AfIncomingMsg
//  432 {
        FUNCALL MT_AfIncomingMsg, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfIncomingMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfIncomingMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfIncomingMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_AfIncomingMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x15
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        ; Saved register size: 21
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  433   uint8 dataLen = pMsg->cmd.DataLength;  /* Length of the data section in the response packet */
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  434   uint8 respLen = 17 + dataLen;          /* Length of the whole response packet */
        MOV     A,#0x11
        ADD     A,?V0 + 11
        MOV     ?V0 + 12,A
//  435   uint8 cmd = MT_AF_INCOMING_MSG;
        MOV     ?V0 + 10,#-0x7f
//  436   uint8 *pRsp, *tempPtr;
//  437 
//  438 #if defined INTER_PAN
//  439   if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
//  440   {
//  441     cmd = MT_AF_INCOMING_MSG_EXT;
//  442   }
//  443   else
//  444 #endif
//  445   if (pMsg->srcAddr.addrMode == afAddr64Bit)
        MOV     A,R2
        ADD     A,#0xe
        MOV     ?V0 + 4,A
        MOV     A,R3
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_28:
        XRL     A,#0x3
        JNZ     ??MT_AfIncomingMsg_0
//  446   {
//  447     cmd = MT_AF_INCOMING_MSG_EXT;
        MOV     ?V0 + 10,#-0x7e
//  448   }
//  449 
//  450   if (cmd == MT_AF_INCOMING_MSG_EXT)
//  451   {
//  452     respLen += 9;
        MOV     A,#0x9
        ADD     A,?V0 + 12
        MOV     ?V0 + 12,A
//  453   }
//  454 
//  455   // Attempt to allocate memory for the response packet.
//  456   if ((pRsp = osal_mem_alloc(respLen)) == NULL)
??MT_AfIncomingMsg_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V0 + 12
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        JNZ     ??MT_AfIncomingMsg_1
        MOV     A,R3
??MT_AfIncomingMsg_1:
        JNZ     $+5
        LJMP    ??MT_AfIncomingMsg_2 & 0xFFFF
//  457   {
//  458     return;
//  459   }
//  460   tempPtr = pRsp;
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  461 
//  462   /* Fill in the data */
//  463 
//  464   /* Group ID */
//  465   *tempPtr++ = LO_UINT16(pMsg->groupId);
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine3 & 0xFFFF
//  466   *tempPtr++ = HI_UINT16(pMsg->groupId);
??CrossCallReturnLabel_0:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ??Subroutine26_0 & 0xFFFF
//  467 
//  468   /* Cluster ID */
//  469   *tempPtr++ = LO_UINT16(pMsg->clusterId);
??CrossCallReturnLabel_46:
        ADD     A,#0x4
        INC     R0
        INC     R0
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine25_0 & 0xFFFF
//  470   *tempPtr++ = HI_UINT16(pMsg->clusterId);
??CrossCallReturnLabel_40:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine2 & 0xFFFF
//  471 
//  472   if (cmd == MT_AF_INCOMING_MSG_EXT)
??CrossCallReturnLabel_41:
        INC     DPTR
        MOV     R1,DPH
        MOV     A,?V0 + 0
        ADD     A,#0xf
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     A,?V0 + 0
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#-0x7e
        XRL     A,?V0 + 10
        JNZ     ??MT_AfIncomingMsg_3
//  473   {
//  474     *tempPtr++ = pMsg->srcAddr.addrMode;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine7 & 0xFFFF
//  475 
//  476     if (pMsg->srcAddr.addrMode == afAddr64Bit)
??CrossCallReturnLabel_7:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??MT_AfIncomingMsg_4
//  477     {
//  478       (void)osal_memcpy(tempPtr, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        SJMP    ??MT_AfIncomingMsg_5
//  479     }
//  480     else
//  481     {
//  482       tempPtr[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
??MT_AfIncomingMsg_4:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine20 & 0xFFFF
//  483       tempPtr[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
//  484     }
??CrossCallReturnLabel_49:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        INC     DPTR
        MOVX    @DPTR,A
//  485     tempPtr += Z_EXTADDR_LEN;
??MT_AfIncomingMsg_5:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  486 
//  487     *tempPtr++ = pMsg->srcAddr.endPoint;
        LCALL   ?Subroutine4 & 0xFFFF
//  488 #if defined INTER_PAN
//  489     *tempPtr++ = LO_UINT16(pMsg->srcAddr.panId);
//  490     *tempPtr++ = HI_UINT16(pMsg->srcAddr.panId);
//  491 #else
//  492     *tempPtr++ = 0;
??CrossCallReturnLabel_35:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
//  493     *tempPtr++ = 0;
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        INC     R6
        SJMP    ??CrossCallReturnLabel_36
//  494 #endif
//  495   }
//  496   else
//  497   {
//  498     /* Source Address */
//  499     *tempPtr++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
??MT_AfIncomingMsg_3:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine7 & 0xFFFF
//  500     *tempPtr++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
??CrossCallReturnLabel_8:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine2 & 0xFFFF
//  501 
//  502     /* Source EP */
//  503     *tempPtr++ = pMsg->srcAddr.endPoint;
??CrossCallReturnLabel_42:
        LCALL   ?Subroutine4 & 0xFFFF
//  504   }
??CrossCallReturnLabel_36:
        INC     R6
        MOV     R7,DPH
//  505 
//  506   /* Destination EP */
//  507   *tempPtr++ = pMsg->endPoint;
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine3 & 0xFFFF
//  508 
//  509   /* WasBroadCast */
//  510   *tempPtr++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_1:
        MOV     A,?V0 + 0
        ADD     A,#0x15
        LCALL   ?Subroutine1 & 0xFFFF
//  511 
//  512   /* LinkQuality */
//  513   *tempPtr++ = pMsg->LinkQuality;
??CrossCallReturnLabel_43:
        ADD     A,#0x16
        LCALL   ?Subroutine1 & 0xFFFF
//  514 
//  515   /* SecurityUse */
//  516   *tempPtr++ = pMsg->SecurityUse;
??CrossCallReturnLabel_44:
        ADD     A,#0x19
        LCALL   ?Subroutine1 & 0xFFFF
//  517 
//  518   /* Timestamp */
//  519   *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 0);
??CrossCallReturnLabel_45:
        ADD     A,#0x1a
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine9 & 0xFFFF
//  520   *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 1);
??CrossCallReturnLabel_31:
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 5
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine23_0 & 0xFFFF
//  521   *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 2);
??CrossCallReturnLabel_33:
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        LCALL   ?Subroutine9 & 0xFFFF
//  522   *tempPtr++ = BREAK_UINT32(pMsg->timestamp, 3);
??CrossCallReturnLabel_32:
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
//  523 
//  524   /* Transmit Sequence Number */
//  525   *tempPtr++ = pMsg->cmd.TransSeqNumber;
        MOV     A,?V0 + 0
        ADD     A,#0x1e
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ??Subroutine24_0 & 0xFFFF
//  526 
//  527   /* Data Length */
//  528   *tempPtr++ = dataLen;
??CrossCallReturnLabel_34:
        MOV     A,?V0 + 11
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        INC     R6
        MOV     R7,DPH
//  529 
//  530   /* Data */
//  531   if (dataLen)
        JZ      ??MT_AfIncomingMsg_6
//  532   {
//  533     osal_memcpy(tempPtr, pMsg->cmd.Data, dataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 0
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R4,?V0 + 11
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  534   }
//  535 
//  536   /* Build and send back the response */
//  537   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
??MT_AfIncomingMsg_6:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R3,?V0 + 12
        MOV     R2,?V0 + 10
        MOV     R1,#0x44
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  538 
//  539   /* Free memory */
//  540   osal_mem_free(pRsp);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  541 }
??MT_AfIncomingMsg_2:
        MOV     R7,#0xd
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 4
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     R6
        MOV     A,R1
        MOV     R7,A
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_39:
        INC     DPTR
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_8
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_35
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_36
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_34
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_0
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_1
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_51:
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_7
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_8
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_35
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_36
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_34
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_0
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_1
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_41
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_42
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_40
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_43
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_45
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_46
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker98 Using cfiCommon1
        CFI (cfiPicker98) NoFunction
        CFI (cfiPicker98) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond99 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        RET
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond103) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond103) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        INC     DPTR
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker108 Using cfiCommon1
        CFI (cfiPicker108) NoFunction
        CFI (cfiPicker108) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_47:
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiPicker108

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond109 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_42
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_40
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_43
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond112) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond112) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_45
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_46
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_52:
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        RET
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,?V0 + 0
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AfCommandProcessing?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AfCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AfRegister?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AfRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AfDataRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AfDataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AfDataRequestSrcRtg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AfDataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AfDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AfDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_AfIncomingMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MT_AfIncomingMsg

        END
//  542 
//  543 /***************************************************************************************************
//  544 ***************************************************************************************************/
// 
// 1 704 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
// 
// 1 740 bytes of CODE memory
//
//Errors: none
//Warnings: none
